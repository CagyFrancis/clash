diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_01.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_01.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_01.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_01.c	2025-05-05 11:26:03.424359837 +0800
@@ -29,9 +29,9 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -48,7 +48,7 @@
     if (data == NULL) {exit(-1);}
     /* FIX: Do NOT free data in the source - the bad sink frees data */
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     /* do nothing */
     /* FIX: Don't attempt to free the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_02.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_02.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_02.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_02.c	2025-05-05 11:26:03.412359575 +0800
@@ -31,12 +31,12 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(1)
     {
@@ -111,7 +111,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -130,7 +130,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_03.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_03.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_03.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_03.c	2025-05-05 11:26:03.405359423 +0800
@@ -31,12 +31,12 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(5==5)
     {
@@ -111,7 +111,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -130,7 +130,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_04.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_04.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_04.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_04.c	2025-05-05 11:26:03.337357940 +0800
@@ -37,12 +37,12 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -61,7 +61,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -117,7 +117,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -136,7 +136,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_05.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_05.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_05.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_05.c	2025-05-05 11:26:03.419359728 +0800
@@ -37,12 +37,12 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -61,7 +61,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(staticTrue)
     {
@@ -117,7 +117,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -136,7 +136,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_06.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_06.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_06.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_06.c	2025-05-05 11:26:03.324357656 +0800
@@ -36,12 +36,12 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -60,7 +60,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -135,7 +135,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_07.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_07.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_07.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_07.c	2025-05-05 11:26:03.433360033 +0800
@@ -36,12 +36,12 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -60,7 +60,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(staticFive==5)
     {
@@ -116,7 +116,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -135,7 +135,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_08.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_08.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_08.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_08.c	2025-05-05 11:26:03.334357874 +0800
@@ -44,12 +44,12 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -68,7 +68,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(staticReturnsTrue())
     {
@@ -124,7 +124,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -143,7 +143,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_09.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_09.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_09.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_09.c	2025-05-05 11:26:03.444360273 +0800
@@ -31,12 +31,12 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -111,7 +111,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -130,7 +130,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_10.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_10.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_10.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_10.c	2025-05-05 11:26:03.446360317 +0800
@@ -31,12 +31,12 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(globalTrue)
     {
@@ -111,7 +111,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_11.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_11.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_11.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_11.c	2025-05-05 11:26:03.328357744 +0800
@@ -31,12 +31,12 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(globalReturnsFalse())
     {
@@ -81,7 +81,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(globalReturnsTrue())
     {
@@ -111,7 +111,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_12.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_12.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_12.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_12.c	2025-05-05 11:26:03.323357635 +0800
@@ -31,7 +31,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
     else
     {
@@ -69,14 +69,14 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     else
     {
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -115,12 +115,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_13.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_13.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_13.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_13.c	2025-05-05 11:26:03.394359183 +0800
@@ -31,12 +31,12 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -81,7 +81,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -111,7 +111,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -130,7 +130,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_14.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_14.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_14.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_14.c	2025-05-05 11:26:03.331357809 +0800
@@ -31,12 +31,12 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(globalFive!=5)
     {
@@ -81,7 +81,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     if(globalFive==5)
     {
@@ -111,7 +111,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_15.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_15.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_15.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_15.c	2025-05-05 11:26:03.394359183 +0800
@@ -32,7 +32,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -43,7 +43,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -101,7 +101,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -144,7 +144,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -175,7 +175,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_16.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_16.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_16.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_16.c	2025-05-05 11:26:03.438360142 +0800
@@ -31,13 +31,13 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
         break;
     }
 }
@@ -57,7 +57,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
         break;
     }
     while(1)
@@ -85,7 +85,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_17.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_17.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_17.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_17.c	2025-05-05 11:26:03.417359684 +0800
@@ -32,12 +32,12 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -57,7 +57,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
     }
     for(k = 0; k < 1; k++)
     {
@@ -83,7 +83,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_18.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_18.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_18.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_18.c	2025-05-05 11:26:03.407359466 +0800
@@ -31,11 +31,11 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     goto sink;
 sink:
     /* do nothing */
@@ -75,7 +75,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 void CWE415_Double_Free__malloc_free_char_18_good()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_21.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_21.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_21.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_21.c	2025-05-05 11:26:03.436360099 +0800
@@ -29,7 +29,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -41,7 +41,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -79,7 +79,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2BStatic)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_22a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_22a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_22a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_22a.c	2025-05-05 11:26:03.397359248 +0800
@@ -34,7 +34,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_22_badGlobal = 1; /* true */
     CWE415_Double_Free__malloc_free_char_22_badSink(data);
 }
@@ -59,7 +59,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_22_goodB2G1Global = 0; /* false */
     CWE415_Double_Free__malloc_free_char_22_goodB2G1Sink(data);
 }
@@ -75,7 +75,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_22_goodB2G2Global = 1; /* true */
     CWE415_Double_Free__malloc_free_char_22_goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_22b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_22b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_22b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_22b.c	2025-05-05 11:26:03.413359597 +0800
@@ -29,7 +29,7 @@
     if(CWE415_Double_Free__malloc_free_char_22_badGlobal)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -75,7 +75,7 @@
     if(CWE415_Double_Free__malloc_free_char_22_goodG2BGlobal)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_31.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_31.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_31.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_31.c	2025-05-05 11:26:03.421359772 +0800
@@ -29,12 +29,12 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     {
         char * dataCopy = data;
         char * data = dataCopy;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -55,7 +55,7 @@
         char * dataCopy = data;
         char * data = dataCopy;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -68,7 +68,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     {
         char * dataCopy = data;
         char * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_32.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_32.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_32.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_32.c	2025-05-05 11:26:03.333357853 +0800
@@ -33,13 +33,13 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
         *dataPtr1 = data;
     }
     {
         char * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -65,7 +65,7 @@
     {
         char * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -82,7 +82,7 @@
         data = (char *)malloc(100*sizeof(char));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_char(data, has_free_char);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_33.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_33.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_33.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_33.cpp	2025-05-05 11:26:03.330357787 +0800
@@ -33,11 +33,11 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     {
         char * data = dataRef;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -58,7 +58,7 @@
     {
         char * data = dataRef;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -72,7 +72,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     {
         char * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_34.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_34.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_34.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_34.c	2025-05-05 11:26:03.416359663 +0800
@@ -36,12 +36,12 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     myUnion.unionFirst = data;
     {
         char * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -63,7 +63,7 @@
     {
         char * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_char(data, has_free_char);
     }
 }
 
@@ -77,7 +77,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     myUnion.unionFirst = data;
     {
         char * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_41.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_41.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_41.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_41.c	2025-05-05 11:26:03.429359946 +0800
@@ -24,7 +24,7 @@
 static void badSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 void CWE415_Double_Free__malloc_free_char_41_bad()
@@ -35,7 +35,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     badSink(data);
 }
 
@@ -47,7 +47,7 @@
 static void goodG2BSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_42.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_42.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_42.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_42.c	2025-05-05 11:26:03.402359357 +0800
@@ -26,7 +26,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     return data;
 }
 
@@ -37,7 +37,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -60,7 +60,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_43.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_43.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_43.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_43.cpp	2025-05-05 11:26:03.397359248 +0800
@@ -29,7 +29,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -70,7 +70,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_44.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_44.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_44.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_44.c	2025-05-05 11:26:03.434360055 +0800
@@ -24,7 +24,7 @@
 static void badSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 void CWE415_Double_Free__malloc_free_char_44_bad()
@@ -37,7 +37,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -50,7 +50,7 @@
 static void goodG2BSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_45.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_45.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_45.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_45.c	2025-05-05 11:26:03.442360229 +0800
@@ -29,7 +29,7 @@
 {
     char * data = CWE415_Double_Free__malloc_free_char_45_badData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 void CWE415_Double_Free__malloc_free_char_45_bad()
@@ -40,7 +40,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_45_badData = data;
     badSink();
 }
@@ -54,7 +54,7 @@
 {
     char * data = CWE415_Double_Free__malloc_free_char_45_goodG2BData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_45_goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_51a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_51a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_51a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_51a.c	2025-05-05 11:26:03.429359946 +0800
@@ -32,7 +32,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_51b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_51b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_51b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_51b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_51b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_51b.c	2025-05-05 11:26:03.434360055 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_char_51b_badSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_char_51b_goodG2BSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_52a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_52a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_52a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_52a.c	2025-05-05 11:26:03.445360295 +0800
@@ -32,7 +32,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_52b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_52b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_52c.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_52c.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_52c.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_52c.c	2025-05-05 11:26:03.410359532 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_char_52c_badSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_char_52c_goodG2BSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_53a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_53a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_53a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_53a.c	2025-05-05 11:26:03.434360055 +0800
@@ -32,7 +32,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_53b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_53b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_53d.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_53d.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_53d.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_53d.c	2025-05-05 11:26:03.402359357 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_char_53d_badSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_char_53d_goodG2BSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_54a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_54a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_54a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_54a.c	2025-05-05 11:26:03.422359794 +0800
@@ -32,7 +32,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_54b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_54b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_54e.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_54e.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_54e.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_54e.c	2025-05-05 11:26:03.399359292 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_char_54e_badSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_char_54e_goodG2BSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_61a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_61a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_61a.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_61a.c	2025-05-05 11:26:03.327357722 +0800
@@ -31,7 +31,7 @@
     data = NULL;
     data = CWE415_Double_Free__malloc_free_char_61b_badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -48,7 +48,7 @@
     data = NULL;
     data = CWE415_Double_Free__malloc_free_char_61b_goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_61b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_61b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_61b.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_61b.c	2025-05-05 11:26:03.323357635 +0800
@@ -26,7 +26,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     return data;
 }
 
@@ -49,7 +49,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_62a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_62a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_62a.cpp	2025-05-05 11:26:03.330357787 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_62b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_62b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_62b.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_62b.cpp	2025-05-05 11:26:03.321357591 +0800
@@ -29,7 +29,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -50,7 +50,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_63a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_63a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_63a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_63a.c	2025-05-05 11:26:03.322357613 +0800
@@ -32,7 +32,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_63b_badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_63b_goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_63b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_63b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_63b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_63b.c	2025-05-05 11:26:03.414359619 +0800
@@ -25,7 +25,7 @@
 {
     char * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -37,7 +37,7 @@
 {
     char * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_64a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_64a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_64a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_64a.c	2025-05-05 11:26:03.327357722 +0800
@@ -32,7 +32,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_64b_badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_64b_goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_64b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_64b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_64b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_64b.c	2025-05-05 11:26:03.440360186 +0800
@@ -28,7 +28,7 @@
     /* dereference dataPtr into data */
     char * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -43,7 +43,7 @@
     /* dereference dataPtr into data */
     char * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_65a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_65a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_65a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_65a.c	2025-05-05 11:26:03.423359815 +0800
@@ -34,7 +34,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_65b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_65b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_65b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_65b.c	2025-05-05 11:26:03.437360121 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_char_65b_badSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_char_65b_goodG2BSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_66a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_66a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_66a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_66a.c	2025-05-05 11:26:03.445360295 +0800
@@ -33,7 +33,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     /* put data in array */
     dataArray[2] = data;
     CWE415_Double_Free__malloc_free_char_66b_badSink(dataArray);
@@ -71,7 +71,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     dataArray[2] = data;
     CWE415_Double_Free__malloc_free_char_66b_goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_66b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_66b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_66b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_66b.c	2025-05-05 11:26:03.323357635 +0800
@@ -26,7 +26,7 @@
     /* copy data out of dataArray */
     char * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 {
     char * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_67a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_67a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_67a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_67a.c	2025-05-05 11:26:03.421359772 +0800
@@ -38,7 +38,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     myStruct.structFirst = data;
     CWE415_Double_Free__malloc_free_char_67b_badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     myStruct.structFirst = data;
     CWE415_Double_Free__malloc_free_char_67b_goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_67b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_67b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_67b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_67b.c	2025-05-05 11:26:03.411359554 +0800
@@ -30,7 +30,7 @@
 {
     char * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -42,7 +42,7 @@
 {
     char * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_68a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_68a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_68a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_68a.c	2025-05-05 11:26:03.431359990 +0800
@@ -36,7 +36,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_68_badData = data;
     CWE415_Double_Free__malloc_free_char_68b_badSink();
 }
@@ -71,7 +71,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_68_goodB2GData = data;
     CWE415_Double_Free__malloc_free_char_68b_goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_68b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_68b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_68b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_68b.c	2025-05-05 11:26:03.396359226 +0800
@@ -29,7 +29,7 @@
 {
     char * data = CWE415_Double_Free__malloc_free_char_68_badData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     char * data = CWE415_Double_Free__malloc_free_char_68_goodG2BData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_72a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_72a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_72a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_72a.cpp	2025-05-05 11:26:03.321357591 +0800
@@ -39,7 +39,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -82,7 +82,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_72b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_72b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_72b.cpp	2025-05-05 11:26:03.427359902 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     char * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     char * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_73a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_73a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_73a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_73a.cpp	2025-05-05 11:26:03.441360208 +0800
@@ -39,7 +39,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -82,7 +82,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_73b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_73b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_73b.cpp	2025-05-05 11:26:03.420359750 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     char * data = dataList.back();
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     char * data = dataList.back();
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_74a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_74a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_74a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_74a.cpp	2025-05-05 11:26:03.339357984 +0800
@@ -39,7 +39,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -82,7 +82,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_74b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_74b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_74b.cpp	2025-05-05 11:26:03.335357896 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     char * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     char * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_81a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_81a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_81a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_81a.cpp	2025-05-05 11:26:03.442360229 +0800
@@ -31,7 +31,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     const CWE415_Double_Free__malloc_free_char_81_base& baseObject = CWE415_Double_Free__malloc_free_char_81_bad();
     baseObject.action(data);
 }
@@ -62,7 +62,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     const CWE415_Double_Free__malloc_free_char_81_base& baseObject = CWE415_Double_Free__malloc_free_char_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_81_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_81_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_81_bad.cpp	2025-05-05 11:26:03.408359488 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_char_81_bad::action(char * data) const
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_81_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_81_goodG2B.cpp	2025-05-05 11:26:03.445360295 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_char_81_goodG2B::action(char * data) const
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_82a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_82a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_82a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_82a.cpp	2025-05-05 11:26:03.329357765 +0800
@@ -31,7 +31,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_82_base* baseObject = new CWE415_Double_Free__malloc_free_char_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -64,7 +64,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
     CWE415_Double_Free__malloc_free_char_82_base* baseObject = new CWE415_Double_Free__malloc_free_char_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_82_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_82_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_82_bad.cpp	2025-05-05 11:26:03.408359488 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_char_82_bad::action(char * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_82_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_82_goodG2B.cpp	2025-05-05 11:26:03.410359532 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_char_82_goodG2B::action(char * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_83_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_83_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_83_bad.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_83_bad.cpp	2025-05-05 11:26:03.394359183 +0800
@@ -27,13 +27,13 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 CWE415_Double_Free__malloc_free_char_83_bad::~CWE415_Double_Free__malloc_free_char_83_bad()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_83_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_83_goodB2G.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_83_goodB2G.cpp	2025-05-05 11:26:03.413359597 +0800
@@ -27,7 +27,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 CWE415_Double_Free__malloc_free_char_83_goodB2G::~CWE415_Double_Free__malloc_free_char_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_83_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_83_goodG2B.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_83_goodG2B.cpp	2025-05-05 11:26:03.415359641 +0800
@@ -32,7 +32,7 @@
 CWE415_Double_Free__malloc_free_char_83_goodG2B::~CWE415_Double_Free__malloc_free_char_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_84_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_84_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_84_bad.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_84_bad.cpp	2025-05-05 11:26:03.417359684 +0800
@@ -27,13 +27,13 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 CWE415_Double_Free__malloc_free_char_84_bad::~CWE415_Double_Free__malloc_free_char_84_bad()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_84_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_84_goodB2G.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_84_goodB2G.cpp	2025-05-05 11:26:03.440360186 +0800
@@ -27,7 +27,7 @@
     data = (char *)malloc(100*sizeof(char));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_char(data, has_free_char);
 }
 
 CWE415_Double_Free__malloc_free_char_84_goodB2G::~CWE415_Double_Free__malloc_free_char_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_84_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_84_goodG2B.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_char_84_goodG2B.cpp	2025-05-05 11:26:03.327357722 +0800
@@ -32,7 +32,7 @@
 CWE415_Double_Free__malloc_free_char_84_goodG2B::~CWE415_Double_Free__malloc_free_char_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_char(data, has_free_char);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_01.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_01.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_01.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_01.c	2025-05-05 11:26:03.439360164 +0800
@@ -29,9 +29,9 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -48,7 +48,7 @@
     if (data == NULL) {exit(-1);}
     /* FIX: Do NOT free data in the source - the bad sink frees data */
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     /* do nothing */
     /* FIX: Don't attempt to free the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_02.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_02.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_02.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_02.c	2025-05-05 11:26:03.446360317 +0800
@@ -31,12 +31,12 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(1)
     {
@@ -111,7 +111,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -130,7 +130,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_03.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_03.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_03.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_03.c	2025-05-05 11:26:03.414359619 +0800
@@ -31,12 +31,12 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(5==5)
     {
@@ -111,7 +111,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -130,7 +130,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_04.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_04.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_04.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_04.c	2025-05-05 11:26:03.395359205 +0800
@@ -37,12 +37,12 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -61,7 +61,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -117,7 +117,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -136,7 +136,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_05.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_05.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_05.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_05.c	2025-05-05 11:26:03.401359336 +0800
@@ -37,12 +37,12 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -61,7 +61,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(staticTrue)
     {
@@ -117,7 +117,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -136,7 +136,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_06.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_06.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_06.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_06.c	2025-05-05 11:26:03.330357787 +0800
@@ -36,12 +36,12 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -60,7 +60,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -135,7 +135,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_07.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_07.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_07.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_07.c	2025-05-05 11:26:03.428359924 +0800
@@ -36,12 +36,12 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -60,7 +60,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(staticFive==5)
     {
@@ -116,7 +116,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -135,7 +135,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_08.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_08.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_08.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_08.c	2025-05-05 11:26:03.401359336 +0800
@@ -44,12 +44,12 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -68,7 +68,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(staticReturnsTrue())
     {
@@ -124,7 +124,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -143,7 +143,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_09.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_09.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_09.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_09.c	2025-05-05 11:26:03.418359706 +0800
@@ -31,12 +31,12 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -111,7 +111,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -130,7 +130,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_10.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_10.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_10.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_10.c	2025-05-05 11:26:03.395359205 +0800
@@ -31,12 +31,12 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(globalTrue)
     {
@@ -111,7 +111,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_11.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_11.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_11.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_11.c	2025-05-05 11:26:03.407359466 +0800
@@ -31,12 +31,12 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(globalReturnsFalse())
     {
@@ -81,7 +81,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(globalReturnsTrue())
     {
@@ -111,7 +111,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_12.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_12.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_12.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_12.c	2025-05-05 11:26:03.439360164 +0800
@@ -31,7 +31,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
     else
     {
@@ -69,14 +69,14 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     else
     {
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -115,12 +115,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_13.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_13.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_13.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_13.c	2025-05-05 11:26:03.331357809 +0800
@@ -31,12 +31,12 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -81,7 +81,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -111,7 +111,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -130,7 +130,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_14.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_14.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_14.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_14.c	2025-05-05 11:26:03.433360033 +0800
@@ -31,12 +31,12 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(globalFive!=5)
     {
@@ -81,7 +81,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     if(globalFive==5)
     {
@@ -111,7 +111,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_15.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_15.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_15.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_15.c	2025-05-05 11:26:03.396359226 +0800
@@ -32,7 +32,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -43,7 +43,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -101,7 +101,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -144,7 +144,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -175,7 +175,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_16.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_16.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_16.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_16.c	2025-05-05 11:26:03.398359270 +0800
@@ -31,13 +31,13 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
         break;
     }
 }
@@ -57,7 +57,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
         break;
     }
     while(1)
@@ -85,7 +85,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_17.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_17.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_17.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_17.c	2025-05-05 11:26:03.426359881 +0800
@@ -32,12 +32,12 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -57,7 +57,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
     }
     for(k = 0; k < 1; k++)
     {
@@ -83,7 +83,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_18.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_18.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_18.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_18.c	2025-05-05 11:26:03.439360164 +0800
@@ -31,11 +31,11 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     goto sink;
 sink:
     /* do nothing */
@@ -75,7 +75,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 void CWE415_Double_Free__malloc_free_int_18_good()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_21.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_21.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_21.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_21.c	2025-05-05 11:26:03.404359401 +0800
@@ -29,7 +29,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -41,7 +41,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -79,7 +79,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2BStatic)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_22a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_22a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_22a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_22a.c	2025-05-05 11:26:03.332357831 +0800
@@ -34,7 +34,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_22_badGlobal = 1; /* true */
     CWE415_Double_Free__malloc_free_int_22_badSink(data);
 }
@@ -59,7 +59,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_22_goodB2G1Global = 0; /* false */
     CWE415_Double_Free__malloc_free_int_22_goodB2G1Sink(data);
 }
@@ -75,7 +75,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_22_goodB2G2Global = 1; /* true */
     CWE415_Double_Free__malloc_free_int_22_goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_22b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_22b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_22b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_22b.c	2025-05-05 11:26:03.428359924 +0800
@@ -29,7 +29,7 @@
     if(CWE415_Double_Free__malloc_free_int_22_badGlobal)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -75,7 +75,7 @@
     if(CWE415_Double_Free__malloc_free_int_22_goodG2BGlobal)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_31.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_31.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_31.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_31.c	2025-05-05 11:26:03.335357896 +0800
@@ -29,12 +29,12 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     {
         int * dataCopy = data;
         int * data = dataCopy;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -55,7 +55,7 @@
         int * dataCopy = data;
         int * data = dataCopy;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -68,7 +68,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     {
         int * dataCopy = data;
         int * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_32.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_32.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_32.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_32.c	2025-05-05 11:26:03.326357700 +0800
@@ -33,13 +33,13 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
         *dataPtr1 = data;
     }
     {
         int * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -65,7 +65,7 @@
     {
         int * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -82,7 +82,7 @@
         data = (int *)malloc(100*sizeof(int));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int(data, has_free_int);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_33.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_33.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_33.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_33.cpp	2025-05-05 11:26:03.423359815 +0800
@@ -33,11 +33,11 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     {
         int * data = dataRef;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -58,7 +58,7 @@
     {
         int * data = dataRef;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -72,7 +72,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     {
         int * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_34.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_34.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_34.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_34.c	2025-05-05 11:26:03.442360229 +0800
@@ -36,12 +36,12 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     myUnion.unionFirst = data;
     {
         int * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -63,7 +63,7 @@
     {
         int * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int(data, has_free_int);
     }
 }
 
@@ -77,7 +77,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     myUnion.unionFirst = data;
     {
         int * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_41.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_41.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_41.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_41.c	2025-05-05 11:26:03.420359750 +0800
@@ -24,7 +24,7 @@
 static void badSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 void CWE415_Double_Free__malloc_free_int_41_bad()
@@ -35,7 +35,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     badSink(data);
 }
 
@@ -47,7 +47,7 @@
 static void goodG2BSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_42.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_42.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_42.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_42.c	2025-05-05 11:26:03.423359815 +0800
@@ -26,7 +26,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     return data;
 }
 
@@ -37,7 +37,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -60,7 +60,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_43.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_43.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_43.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_43.cpp	2025-05-05 11:26:03.432360012 +0800
@@ -29,7 +29,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -70,7 +70,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_44.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_44.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_44.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_44.c	2025-05-05 11:26:03.430359968 +0800
@@ -24,7 +24,7 @@
 static void badSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 void CWE415_Double_Free__malloc_free_int_44_bad()
@@ -37,7 +37,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -50,7 +50,7 @@
 static void goodG2BSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_45.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_45.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_45.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_45.c	2025-05-05 11:26:03.394359183 +0800
@@ -29,7 +29,7 @@
 {
     int * data = CWE415_Double_Free__malloc_free_int_45_badData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 void CWE415_Double_Free__malloc_free_int_45_bad()
@@ -40,7 +40,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_45_badData = data;
     badSink();
 }
@@ -54,7 +54,7 @@
 {
     int * data = CWE415_Double_Free__malloc_free_int_45_goodG2BData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_45_goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_51a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_51a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_51a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_51a.c	2025-05-05 11:26:03.415359641 +0800
@@ -32,7 +32,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_51b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_51b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_51b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_51b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_51b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_51b.c	2025-05-05 11:26:03.418359706 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_int_51b_badSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_int_51b_goodG2BSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_52a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_52a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_52a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_52a.c	2025-05-05 11:26:03.394359183 +0800
@@ -32,7 +32,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_52b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_52b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_52c.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_52c.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_52c.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_52c.c	2025-05-05 11:26:03.326357700 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_int_52c_badSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_int_52c_goodG2BSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_53a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_53a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_53a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_53a.c	2025-05-05 11:26:03.417359684 +0800
@@ -32,7 +32,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_53b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_53b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_53d.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_53d.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_53d.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_53d.c	2025-05-05 11:26:03.418359706 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_int_53d_badSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_int_53d_goodG2BSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_54a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_54a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_54a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_54a.c	2025-05-05 11:26:03.323357635 +0800
@@ -32,7 +32,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_54b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_54b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_54e.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_54e.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_54e.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_54e.c	2025-05-05 11:26:03.335357896 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_int_54e_badSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_int_54e_goodG2BSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_61a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_61a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_61a.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_61a.c	2025-05-05 11:26:03.396359226 +0800
@@ -31,7 +31,7 @@
     data = NULL;
     data = CWE415_Double_Free__malloc_free_int_61b_badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -48,7 +48,7 @@
     data = NULL;
     data = CWE415_Double_Free__malloc_free_int_61b_goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_61b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_61b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_61b.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_61b.c	2025-05-05 11:26:03.413359597 +0800
@@ -26,7 +26,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     return data;
 }
 
@@ -49,7 +49,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_62a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_62a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_62a.cpp	2025-05-05 11:26:03.397359248 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_62b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_62b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_62b.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_62b.cpp	2025-05-05 11:26:03.428359924 +0800
@@ -29,7 +29,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -50,7 +50,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_63a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_63a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_63a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_63a.c	2025-05-05 11:26:03.424359837 +0800
@@ -32,7 +32,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_63b_badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_63b_goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_63b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_63b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_63b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_63b.c	2025-05-05 11:26:03.420359750 +0800
@@ -25,7 +25,7 @@
 {
     int * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -37,7 +37,7 @@
 {
     int * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_64a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_64a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_64a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_64a.c	2025-05-05 11:26:03.397359248 +0800
@@ -32,7 +32,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_64b_badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_64b_goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_64b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_64b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_64b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_64b.c	2025-05-05 11:26:03.327357722 +0800
@@ -28,7 +28,7 @@
     /* dereference dataPtr into data */
     int * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -43,7 +43,7 @@
     /* dereference dataPtr into data */
     int * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_01.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_01.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_01.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_01.c	2025-05-05 11:26:03.435360077 +0800
@@ -29,9 +29,9 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -48,7 +48,7 @@
     if (data == NULL) {exit(-1);}
     /* FIX: Do NOT free data in the source - the bad sink frees data */
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     /* do nothing */
     /* FIX: Don't attempt to free the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_02.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_02.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_02.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_02.c	2025-05-05 11:26:03.406359445 +0800
@@ -31,12 +31,12 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(1)
     {
@@ -111,7 +111,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -130,7 +130,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_03.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_03.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_03.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_03.c	2025-05-05 11:26:03.326357700 +0800
@@ -31,12 +31,12 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(5==5)
     {
@@ -111,7 +111,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -130,7 +130,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_04.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_04.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_04.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_04.c	2025-05-05 11:26:03.409359510 +0800
@@ -37,12 +37,12 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -61,7 +61,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -117,7 +117,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -136,7 +136,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_05.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_05.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_05.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_05.c	2025-05-05 11:26:03.416359663 +0800
@@ -37,12 +37,12 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -61,7 +61,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(staticTrue)
     {
@@ -117,7 +117,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -136,7 +136,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_06.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_06.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_06.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_06.c	2025-05-05 11:26:03.441360208 +0800
@@ -36,12 +36,12 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -60,7 +60,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -135,7 +135,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_07.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_07.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_07.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_07.c	2025-05-05 11:26:03.331357809 +0800
@@ -36,12 +36,12 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -60,7 +60,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(staticFive==5)
     {
@@ -116,7 +116,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -135,7 +135,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_08.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_08.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_08.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_08.c	2025-05-05 11:26:03.445360295 +0800
@@ -44,12 +44,12 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -68,7 +68,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(staticReturnsTrue())
     {
@@ -124,7 +124,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -143,7 +143,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_09.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_09.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_09.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_09.c	2025-05-05 11:26:03.416359663 +0800
@@ -31,12 +31,12 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -111,7 +111,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -130,7 +130,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_10.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_10.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_10.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_10.c	2025-05-05 11:26:03.338357962 +0800
@@ -31,12 +31,12 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(globalTrue)
     {
@@ -111,7 +111,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_11.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_11.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_11.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_11.c	2025-05-05 11:26:03.326357700 +0800
@@ -31,12 +31,12 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(globalReturnsFalse())
     {
@@ -81,7 +81,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(globalReturnsTrue())
     {
@@ -111,7 +111,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_12.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_12.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_12.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_12.c	2025-05-05 11:26:03.433360033 +0800
@@ -31,7 +31,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     else
     {
@@ -69,14 +69,14 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     else
     {
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -115,12 +115,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_13.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_13.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_13.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_13.c	2025-05-05 11:26:03.430359968 +0800
@@ -31,12 +31,12 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -81,7 +81,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -111,7 +111,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -130,7 +130,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_14.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_14.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_14.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_14.c	2025-05-05 11:26:03.328357744 +0800
@@ -31,12 +31,12 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(globalFive!=5)
     {
@@ -81,7 +81,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     if(globalFive==5)
     {
@@ -111,7 +111,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_15.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_15.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_15.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_15.c	2025-05-05 11:26:03.330357787 +0800
@@ -32,7 +32,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -43,7 +43,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -101,7 +101,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -144,7 +144,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -175,7 +175,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_16.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_16.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_16.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_16.c	2025-05-05 11:26:03.446360317 +0800
@@ -31,13 +31,13 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
         break;
     }
 }
@@ -57,7 +57,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
         break;
     }
     while(1)
@@ -85,7 +85,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_17.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_17.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_17.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_17.c	2025-05-05 11:26:03.430359968 +0800
@@ -32,12 +32,12 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -57,7 +57,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
     for(k = 0; k < 1; k++)
     {
@@ -83,7 +83,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_18.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_18.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_18.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_18.c	2025-05-05 11:26:03.412359575 +0800
@@ -31,11 +31,11 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     goto sink;
 sink:
     /* do nothing */
@@ -75,7 +75,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 void CWE415_Double_Free__malloc_free_int64_t_18_good()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_21.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_21.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_21.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_21.c	2025-05-05 11:26:03.335357896 +0800
@@ -29,7 +29,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -41,7 +41,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -79,7 +79,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2BStatic)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_22a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_22a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_22a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_22a.c	2025-05-05 11:26:03.441360208 +0800
@@ -34,7 +34,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_22_badGlobal = 1; /* true */
     CWE415_Double_Free__malloc_free_int64_t_22_badSink(data);
 }
@@ -59,7 +59,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_22_goodB2G1Global = 0; /* false */
     CWE415_Double_Free__malloc_free_int64_t_22_goodB2G1Sink(data);
 }
@@ -75,7 +75,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_22_goodB2G2Global = 1; /* true */
     CWE415_Double_Free__malloc_free_int64_t_22_goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_22b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_22b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_22b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_22b.c	2025-05-05 11:26:03.437360121 +0800
@@ -29,7 +29,7 @@
     if(CWE415_Double_Free__malloc_free_int64_t_22_badGlobal)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -75,7 +75,7 @@
     if(CWE415_Double_Free__malloc_free_int64_t_22_goodG2BGlobal)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_31.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_31.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_31.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_31.c	2025-05-05 11:26:03.340358005 +0800
@@ -29,12 +29,12 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     {
         int64_t * dataCopy = data;
         int64_t * data = dataCopy;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -55,7 +55,7 @@
         int64_t * dataCopy = data;
         int64_t * data = dataCopy;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -68,7 +68,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     {
         int64_t * dataCopy = data;
         int64_t * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_32.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_32.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_32.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_32.c	2025-05-05 11:26:03.335357896 +0800
@@ -33,13 +33,13 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
         *dataPtr1 = data;
     }
     {
         int64_t * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -65,7 +65,7 @@
     {
         int64_t * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -82,7 +82,7 @@
         data = (int64_t *)malloc(100*sizeof(int64_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_int64(data, has_free_int64);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_33.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_33.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_33.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_33.cpp	2025-05-05 11:26:03.395359205 +0800
@@ -33,11 +33,11 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     {
         int64_t * data = dataRef;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -58,7 +58,7 @@
     {
         int64_t * data = dataRef;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -72,7 +72,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     {
         int64_t * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_34.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_34.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_34.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_34.c	2025-05-05 11:26:03.337357940 +0800
@@ -36,12 +36,12 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     myUnion.unionFirst = data;
     {
         int64_t * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -63,7 +63,7 @@
     {
         int64_t * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_int64(data, has_free_int64);
     }
 }
 
@@ -77,7 +77,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     myUnion.unionFirst = data;
     {
         int64_t * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_41.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_41.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_41.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_41.c	2025-05-05 11:26:03.414359619 +0800
@@ -24,7 +24,7 @@
 static void badSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 void CWE415_Double_Free__malloc_free_int64_t_41_bad()
@@ -35,7 +35,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     badSink(data);
 }
 
@@ -47,7 +47,7 @@
 static void goodG2BSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_42.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_42.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_42.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_42.c	2025-05-05 11:26:03.428359924 +0800
@@ -26,7 +26,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     return data;
 }
 
@@ -37,7 +37,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -60,7 +60,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_43.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_43.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_43.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_43.cpp	2025-05-05 11:26:03.426359881 +0800
@@ -29,7 +29,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -70,7 +70,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_44.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_44.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_44.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_44.c	2025-05-05 11:26:03.333357853 +0800
@@ -24,7 +24,7 @@
 static void badSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 void CWE415_Double_Free__malloc_free_int64_t_44_bad()
@@ -37,7 +37,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -50,7 +50,7 @@
 static void goodG2BSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_45.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_45.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_45.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_45.c	2025-05-05 11:26:03.334357874 +0800
@@ -29,7 +29,7 @@
 {
     int64_t * data = CWE415_Double_Free__malloc_free_int64_t_45_badData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 void CWE415_Double_Free__malloc_free_int64_t_45_bad()
@@ -40,7 +40,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_45_badData = data;
     badSink();
 }
@@ -54,7 +54,7 @@
 {
     int64_t * data = CWE415_Double_Free__malloc_free_int64_t_45_goodG2BData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_45_goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_51a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_51a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_51a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_51a.c	2025-05-05 11:26:03.329357765 +0800
@@ -32,7 +32,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_51b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_51b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_51b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_51b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_51b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_51b.c	2025-05-05 11:26:03.395359205 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_int64_t_51b_badSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_int64_t_51b_goodG2BSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_52a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_52a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_52a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_52a.c	2025-05-05 11:26:03.328357744 +0800
@@ -32,7 +32,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_52b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_52b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_52c.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_52c.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_52c.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_52c.c	2025-05-05 11:26:03.415359641 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_int64_t_52c_badSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_int64_t_52c_goodG2BSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_53a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_53a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_53a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_53a.c	2025-05-05 11:26:03.421359772 +0800
@@ -32,7 +32,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_53b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_53b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_53d.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_53d.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_53d.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_53d.c	2025-05-05 11:26:03.334357874 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_int64_t_53d_badSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_int64_t_53d_goodG2BSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_54a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_54a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_54a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_54a.c	2025-05-05 11:26:03.425359859 +0800
@@ -32,7 +32,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_54b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_54b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_54e.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_54e.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_54e.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_54e.c	2025-05-05 11:26:03.443360252 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_int64_t_54e_badSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_int64_t_54e_goodG2BSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_61a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_61a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_61a.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_61a.c	2025-05-05 11:26:03.443360252 +0800
@@ -31,7 +31,7 @@
     data = NULL;
     data = CWE415_Double_Free__malloc_free_int64_t_61b_badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -48,7 +48,7 @@
     data = NULL;
     data = CWE415_Double_Free__malloc_free_int64_t_61b_goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_61b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_61b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_61b.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_61b.c	2025-05-05 11:26:03.417359684 +0800
@@ -26,7 +26,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     return data;
 }
 
@@ -49,7 +49,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_62a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_62a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_62a.cpp	2025-05-05 11:26:03.434360055 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_62b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_62b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_62b.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_62b.cpp	2025-05-05 11:26:03.407359466 +0800
@@ -29,7 +29,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -50,7 +50,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_63a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_63a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_63a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_63a.c	2025-05-05 11:26:03.432360012 +0800
@@ -32,7 +32,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_63b_badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_63b_goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_63b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_63b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_63b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_63b.c	2025-05-05 11:26:03.424359837 +0800
@@ -25,7 +25,7 @@
 {
     int64_t * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -37,7 +37,7 @@
 {
     int64_t * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_64a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_64a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_64a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_64a.c	2025-05-05 11:26:03.329357765 +0800
@@ -32,7 +32,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_64b_badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_64b_goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_64b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_64b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_64b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_64b.c	2025-05-05 11:26:03.340358005 +0800
@@ -28,7 +28,7 @@
     /* dereference dataPtr into data */
     int64_t * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -43,7 +43,7 @@
     /* dereference dataPtr into data */
     int64_t * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_65a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_65a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_65a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_65a.c	2025-05-05 11:26:03.322357613 +0800
@@ -34,7 +34,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_65b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_65b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_65b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_65b.c	2025-05-05 11:26:03.444360273 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_int64_t_65b_badSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_int64_t_65b_goodG2BSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_66a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_66a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_66a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_66a.c	2025-05-05 11:26:03.421359772 +0800
@@ -33,7 +33,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     /* put data in array */
     dataArray[2] = data;
     CWE415_Double_Free__malloc_free_int64_t_66b_badSink(dataArray);
@@ -71,7 +71,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     dataArray[2] = data;
     CWE415_Double_Free__malloc_free_int64_t_66b_goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_66b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_66b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_66b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_66b.c	2025-05-05 11:26:03.396359226 +0800
@@ -26,7 +26,7 @@
     /* copy data out of dataArray */
     int64_t * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 {
     int64_t * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_67a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_67a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_67a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_67a.c	2025-05-05 11:26:03.401359336 +0800
@@ -38,7 +38,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     myStruct.structFirst = data;
     CWE415_Double_Free__malloc_free_int64_t_67b_badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     myStruct.structFirst = data;
     CWE415_Double_Free__malloc_free_int64_t_67b_goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_67b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_67b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_67b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_67b.c	2025-05-05 11:26:03.434360055 +0800
@@ -30,7 +30,7 @@
 {
     int64_t * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -42,7 +42,7 @@
 {
     int64_t * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_68a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_68a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_68a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_68a.c	2025-05-05 11:26:03.435360077 +0800
@@ -36,7 +36,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_68_badData = data;
     CWE415_Double_Free__malloc_free_int64_t_68b_badSink();
 }
@@ -71,7 +71,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_68_goodB2GData = data;
     CWE415_Double_Free__malloc_free_int64_t_68b_goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_68b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_68b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_68b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_68b.c	2025-05-05 11:26:03.441360208 +0800
@@ -29,7 +29,7 @@
 {
     int64_t * data = CWE415_Double_Free__malloc_free_int64_t_68_badData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     int64_t * data = CWE415_Double_Free__malloc_free_int64_t_68_goodG2BData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_72a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_72a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_72a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_72a.cpp	2025-05-05 11:26:03.420359750 +0800
@@ -39,7 +39,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -82,7 +82,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_72b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_72b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_72b.cpp	2025-05-05 11:26:03.426359881 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     int64_t * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int64_t * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_73a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_73a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_73a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_73a.cpp	2025-05-05 11:26:03.323357635 +0800
@@ -39,7 +39,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -82,7 +82,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_73b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_73b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_73b.cpp	2025-05-05 11:26:03.407359466 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     int64_t * data = dataList.back();
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int64_t * data = dataList.back();
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_74a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_74a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_74a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_74a.cpp	2025-05-05 11:26:03.405359423 +0800
@@ -39,7 +39,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -82,7 +82,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_74b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_74b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_74b.cpp	2025-05-05 11:26:03.322357613 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     int64_t * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int64_t * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_81a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_81a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_81a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_81a.cpp	2025-05-05 11:26:03.422359794 +0800
@@ -31,7 +31,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     const CWE415_Double_Free__malloc_free_int64_t_81_base& baseObject = CWE415_Double_Free__malloc_free_int64_t_81_bad();
     baseObject.action(data);
 }
@@ -62,7 +62,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     const CWE415_Double_Free__malloc_free_int64_t_81_base& baseObject = CWE415_Double_Free__malloc_free_int64_t_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_81_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_81_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_81_bad.cpp	2025-05-05 11:26:03.412359575 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_int64_t_81_bad::action(int64_t * data) const
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_81_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_81_goodG2B.cpp	2025-05-05 11:26:03.396359226 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_int64_t_81_goodG2B::action(int64_t * data) const
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_82a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_82a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_82a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_82a.cpp	2025-05-05 11:26:03.331357809 +0800
@@ -31,7 +31,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_82_base* baseObject = new CWE415_Double_Free__malloc_free_int64_t_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -64,7 +64,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
     CWE415_Double_Free__malloc_free_int64_t_82_base* baseObject = new CWE415_Double_Free__malloc_free_int64_t_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_82_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_82_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_82_bad.cpp	2025-05-05 11:26:03.417359684 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_int64_t_82_bad::action(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_82_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_82_goodG2B.cpp	2025-05-05 11:26:03.431359990 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_int64_t_82_goodG2B::action(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_83_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_83_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_83_bad.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_83_bad.cpp	2025-05-05 11:26:03.413359597 +0800
@@ -27,13 +27,13 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 CWE415_Double_Free__malloc_free_int64_t_83_bad::~CWE415_Double_Free__malloc_free_int64_t_83_bad()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_83_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_83_goodB2G.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_83_goodB2G.cpp	2025-05-05 11:26:03.328357744 +0800
@@ -27,7 +27,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 CWE415_Double_Free__malloc_free_int64_t_83_goodB2G::~CWE415_Double_Free__malloc_free_int64_t_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_83_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_83_goodG2B.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_83_goodG2B.cpp	2025-05-05 11:26:03.430359968 +0800
@@ -32,7 +32,7 @@
 CWE415_Double_Free__malloc_free_int64_t_83_goodG2B::~CWE415_Double_Free__malloc_free_int64_t_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_84_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_84_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_84_bad.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_84_bad.cpp	2025-05-05 11:26:03.334357874 +0800
@@ -27,13 +27,13 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 CWE415_Double_Free__malloc_free_int64_t_84_bad::~CWE415_Double_Free__malloc_free_int64_t_84_bad()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_84_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_84_goodB2G.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_84_goodB2G.cpp	2025-05-05 11:26:03.333357853 +0800
@@ -27,7 +27,7 @@
     data = (int64_t *)malloc(100*sizeof(int64_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 
 CWE415_Double_Free__malloc_free_int64_t_84_goodB2G::~CWE415_Double_Free__malloc_free_int64_t_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_84_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_84_goodG2B.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int64_t_84_goodG2B.cpp	2025-05-05 11:26:03.422359794 +0800
@@ -32,7 +32,7 @@
 CWE415_Double_Free__malloc_free_int64_t_84_goodG2B::~CWE415_Double_Free__malloc_free_int64_t_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int64(data, has_free_int64);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_65a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_65a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_65a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_65a.c	2025-05-05 11:26:03.428359924 +0800
@@ -34,7 +34,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_65b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_65b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_65b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_65b.c	2025-05-05 11:26:03.425359859 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_int_65b_badSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_int_65b_goodG2BSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_66a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_66a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_66a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_66a.c	2025-05-05 11:26:03.409359510 +0800
@@ -33,7 +33,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     /* put data in array */
     dataArray[2] = data;
     CWE415_Double_Free__malloc_free_int_66b_badSink(dataArray);
@@ -71,7 +71,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     dataArray[2] = data;
     CWE415_Double_Free__malloc_free_int_66b_goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_66b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_66b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_66b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_66b.c	2025-05-05 11:26:03.339357984 +0800
@@ -26,7 +26,7 @@
     /* copy data out of dataArray */
     int * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 {
     int * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_67a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_67a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_67a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_67a.c	2025-05-05 11:26:03.403359379 +0800
@@ -38,7 +38,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     myStruct.structFirst = data;
     CWE415_Double_Free__malloc_free_int_67b_badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     myStruct.structFirst = data;
     CWE415_Double_Free__malloc_free_int_67b_goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_67b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_67b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_67b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_67b.c	2025-05-05 11:26:03.415359641 +0800
@@ -30,7 +30,7 @@
 {
     int * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -42,7 +42,7 @@
 {
     int * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_68a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_68a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_68a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_68a.c	2025-05-05 11:26:03.440360186 +0800
@@ -36,7 +36,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_68_badData = data;
     CWE415_Double_Free__malloc_free_int_68b_badSink();
 }
@@ -71,7 +71,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_68_goodB2GData = data;
     CWE415_Double_Free__malloc_free_int_68b_goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_68b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_68b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_68b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_68b.c	2025-05-05 11:26:03.337357940 +0800
@@ -29,7 +29,7 @@
 {
     int * data = CWE415_Double_Free__malloc_free_int_68_badData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     int * data = CWE415_Double_Free__malloc_free_int_68_goodG2BData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_72a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_72a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_72a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_72a.cpp	2025-05-05 11:26:03.327357722 +0800
@@ -39,7 +39,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -82,7 +82,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_72b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_72b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_72b.cpp	2025-05-05 11:26:03.328357744 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     int * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_73a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_73a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_73a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_73a.cpp	2025-05-05 11:26:03.405359423 +0800
@@ -39,7 +39,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -82,7 +82,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_73b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_73b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_73b.cpp	2025-05-05 11:26:03.333357853 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     int * data = dataList.back();
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int * data = dataList.back();
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_74a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_74a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_74a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_74a.cpp	2025-05-05 11:26:03.414359619 +0800
@@ -39,7 +39,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -82,7 +82,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_74b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_74b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_74b.cpp	2025-05-05 11:26:03.420359750 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     int * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_81a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_81a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_81a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_81a.cpp	2025-05-05 11:26:03.415359641 +0800
@@ -31,7 +31,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     const CWE415_Double_Free__malloc_free_int_81_base& baseObject = CWE415_Double_Free__malloc_free_int_81_bad();
     baseObject.action(data);
 }
@@ -62,7 +62,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     const CWE415_Double_Free__malloc_free_int_81_base& baseObject = CWE415_Double_Free__malloc_free_int_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_81_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_81_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_81_bad.cpp	2025-05-05 11:26:03.401359336 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_int_81_bad::action(int * data) const
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_81_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_81_goodG2B.cpp	2025-05-05 11:26:03.431359990 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_int_81_goodG2B::action(int * data) const
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_82a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_82a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_82a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_82a.cpp	2025-05-05 11:26:03.409359510 +0800
@@ -31,7 +31,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_82_base* baseObject = new CWE415_Double_Free__malloc_free_int_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -64,7 +64,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
     CWE415_Double_Free__malloc_free_int_82_base* baseObject = new CWE415_Double_Free__malloc_free_int_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_82_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_82_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_82_bad.cpp	2025-05-05 11:26:03.406359445 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_int_82_bad::action(int * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_82_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_82_goodG2B.cpp	2025-05-05 11:26:03.439360164 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_int_82_goodG2B::action(int * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_83_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_83_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_83_bad.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_83_bad.cpp	2025-05-05 11:26:03.415359641 +0800
@@ -27,13 +27,13 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 CWE415_Double_Free__malloc_free_int_83_bad::~CWE415_Double_Free__malloc_free_int_83_bad()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_83_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_83_goodB2G.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_83_goodB2G.cpp	2025-05-05 11:26:03.438360142 +0800
@@ -27,7 +27,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 CWE415_Double_Free__malloc_free_int_83_goodB2G::~CWE415_Double_Free__malloc_free_int_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_83_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_83_goodG2B.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_83_goodG2B.cpp	2025-05-05 11:26:03.336357918 +0800
@@ -32,7 +32,7 @@
 CWE415_Double_Free__malloc_free_int_83_goodG2B::~CWE415_Double_Free__malloc_free_int_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_84_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_84_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_84_bad.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_84_bad.cpp	2025-05-05 11:26:03.329357765 +0800
@@ -27,13 +27,13 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 CWE415_Double_Free__malloc_free_int_84_bad::~CWE415_Double_Free__malloc_free_int_84_bad()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_84_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_84_goodB2G.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_84_goodB2G.cpp	2025-05-05 11:26:03.398359270 +0800
@@ -27,7 +27,7 @@
     data = (int *)malloc(100*sizeof(int));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_int(data, has_free_int);
 }
 
 CWE415_Double_Free__malloc_free_int_84_goodB2G::~CWE415_Double_Free__malloc_free_int_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_84_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_84_goodG2B.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_int_84_goodG2B.cpp	2025-05-05 11:26:03.403359379 +0800
@@ -32,7 +32,7 @@
 CWE415_Double_Free__malloc_free_int_84_goodG2B::~CWE415_Double_Free__malloc_free_int_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_int(data, has_free_int);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_01.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_01.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_01.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_01.c	2025-05-05 11:26:03.419359728 +0800
@@ -29,9 +29,9 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -48,7 +48,7 @@
     if (data == NULL) {exit(-1);}
     /* FIX: Do NOT free data in the source - the bad sink frees data */
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     /* do nothing */
     /* FIX: Don't attempt to free the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_02.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_02.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_02.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_02.c	2025-05-05 11:26:03.329357765 +0800
@@ -31,12 +31,12 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(1)
     {
@@ -111,7 +111,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -130,7 +130,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_03.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_03.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_03.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_03.c	2025-05-05 11:26:03.340358005 +0800
@@ -31,12 +31,12 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(5==5)
     {
@@ -111,7 +111,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -130,7 +130,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_04.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_04.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_04.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_04.c	2025-05-05 11:26:03.423359815 +0800
@@ -37,12 +37,12 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -61,7 +61,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -117,7 +117,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -136,7 +136,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_05.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_05.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_05.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_05.c	2025-05-05 11:26:03.404359401 +0800
@@ -37,12 +37,12 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -61,7 +61,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(staticTrue)
     {
@@ -117,7 +117,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -136,7 +136,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_06.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_06.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_06.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_06.c	2025-05-05 11:26:03.423359815 +0800
@@ -36,12 +36,12 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -60,7 +60,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -135,7 +135,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_07.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_07.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_07.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_07.c	2025-05-05 11:26:03.416359663 +0800
@@ -36,12 +36,12 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -60,7 +60,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(staticFive==5)
     {
@@ -116,7 +116,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -135,7 +135,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_08.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_08.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_08.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_08.c	2025-05-05 11:26:03.321357591 +0800
@@ -44,12 +44,12 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -68,7 +68,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(staticReturnsTrue())
     {
@@ -124,7 +124,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -143,7 +143,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_09.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_09.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_09.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_09.c	2025-05-05 11:26:03.440360186 +0800
@@ -31,12 +31,12 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -111,7 +111,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -130,7 +130,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_10.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_10.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_10.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_10.c	2025-05-05 11:26:03.416359663 +0800
@@ -31,12 +31,12 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(globalTrue)
     {
@@ -111,7 +111,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_11.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_11.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_11.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_11.c	2025-05-05 11:26:03.328357744 +0800
@@ -31,12 +31,12 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(globalReturnsFalse())
     {
@@ -81,7 +81,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(globalReturnsTrue())
     {
@@ -111,7 +111,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_12.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_12.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_12.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_12.c	2025-05-05 11:26:03.408359488 +0800
@@ -31,7 +31,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
     else
     {
@@ -69,14 +69,14 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     else
     {
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -115,12 +115,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_13.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_13.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_13.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_13.c	2025-05-05 11:26:03.340358005 +0800
@@ -31,12 +31,12 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -81,7 +81,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -111,7 +111,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -130,7 +130,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_14.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_14.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_14.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_14.c	2025-05-05 11:26:03.337357940 +0800
@@ -31,12 +31,12 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(globalFive!=5)
     {
@@ -81,7 +81,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     if(globalFive==5)
     {
@@ -111,7 +111,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_15.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_15.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_15.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_15.c	2025-05-05 11:26:03.397359248 +0800
@@ -32,7 +32,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -43,7 +43,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -101,7 +101,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -144,7 +144,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -175,7 +175,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_16.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_16.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_16.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_16.c	2025-05-05 11:26:03.393359161 +0800
@@ -31,13 +31,13 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
         break;
     }
 }
@@ -57,7 +57,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
         break;
     }
     while(1)
@@ -85,7 +85,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_17.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_17.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_17.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_17.c	2025-05-05 11:26:03.414359619 +0800
@@ -32,12 +32,12 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -57,7 +57,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
     }
     for(k = 0; k < 1; k++)
     {
@@ -83,7 +83,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_18.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_18.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_18.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_18.c	2025-05-05 11:26:03.436360099 +0800
@@ -31,11 +31,11 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     goto sink;
 sink:
     /* do nothing */
@@ -75,7 +75,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 void CWE415_Double_Free__malloc_free_long_18_good()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_21.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_21.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_21.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_21.c	2025-05-05 11:26:03.333357853 +0800
@@ -29,7 +29,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -41,7 +41,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -79,7 +79,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2BStatic)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_22a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_22a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_22a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_22a.c	2025-05-05 11:26:03.446360317 +0800
@@ -34,7 +34,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_22_badGlobal = 1; /* true */
     CWE415_Double_Free__malloc_free_long_22_badSink(data);
 }
@@ -59,7 +59,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_22_goodB2G1Global = 0; /* false */
     CWE415_Double_Free__malloc_free_long_22_goodB2G1Sink(data);
 }
@@ -75,7 +75,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_22_goodB2G2Global = 1; /* true */
     CWE415_Double_Free__malloc_free_long_22_goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_22b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_22b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_22b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_22b.c	2025-05-05 11:26:03.402359357 +0800
@@ -29,7 +29,7 @@
     if(CWE415_Double_Free__malloc_free_long_22_badGlobal)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -75,7 +75,7 @@
     if(CWE415_Double_Free__malloc_free_long_22_goodG2BGlobal)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_31.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_31.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_31.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_31.c	2025-05-05 11:26:03.398359270 +0800
@@ -29,12 +29,12 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     {
         long * dataCopy = data;
         long * data = dataCopy;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -55,7 +55,7 @@
         long * dataCopy = data;
         long * data = dataCopy;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -68,7 +68,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     {
         long * dataCopy = data;
         long * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_32.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_32.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_32.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_32.c	2025-05-05 11:26:03.401359336 +0800
@@ -33,13 +33,13 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
         *dataPtr1 = data;
     }
     {
         long * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -65,7 +65,7 @@
     {
         long * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -82,7 +82,7 @@
         data = (long *)malloc(100*sizeof(long));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_long(data, has_free_long);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_33.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_33.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_33.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_33.cpp	2025-05-05 11:26:03.409359510 +0800
@@ -33,11 +33,11 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     {
         long * data = dataRef;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -58,7 +58,7 @@
     {
         long * data = dataRef;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -72,7 +72,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     {
         long * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_34.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_34.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_34.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_34.c	2025-05-05 11:26:03.423359815 +0800
@@ -36,12 +36,12 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     myUnion.unionFirst = data;
     {
         long * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -63,7 +63,7 @@
     {
         long * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_long(data, has_free_long);
     }
 }
 
@@ -77,7 +77,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     myUnion.unionFirst = data;
     {
         long * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_41.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_41.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_41.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_41.c	2025-05-05 11:26:03.325357678 +0800
@@ -24,7 +24,7 @@
 static void badSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 void CWE415_Double_Free__malloc_free_long_41_bad()
@@ -35,7 +35,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     badSink(data);
 }
 
@@ -47,7 +47,7 @@
 static void goodG2BSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_42.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_42.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_42.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_42.c	2025-05-05 11:26:03.321357591 +0800
@@ -26,7 +26,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     return data;
 }
 
@@ -37,7 +37,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -60,7 +60,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_43.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_43.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_43.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_43.cpp	2025-05-05 11:26:03.337357940 +0800
@@ -29,7 +29,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -70,7 +70,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_44.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_44.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_44.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_44.c	2025-05-05 11:26:03.337357940 +0800
@@ -24,7 +24,7 @@
 static void badSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 void CWE415_Double_Free__malloc_free_long_44_bad()
@@ -37,7 +37,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -50,7 +50,7 @@
 static void goodG2BSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_45.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_45.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_45.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_45.c	2025-05-05 11:26:03.442360229 +0800
@@ -29,7 +29,7 @@
 {
     long * data = CWE415_Double_Free__malloc_free_long_45_badData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 void CWE415_Double_Free__malloc_free_long_45_bad()
@@ -40,7 +40,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_45_badData = data;
     badSink();
 }
@@ -54,7 +54,7 @@
 {
     long * data = CWE415_Double_Free__malloc_free_long_45_goodG2BData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_45_goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_51a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_51a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_51a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_51a.c	2025-05-05 11:26:03.335357896 +0800
@@ -32,7 +32,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_51b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_51b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_51b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_51b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_51b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_51b.c	2025-05-05 11:26:03.322357613 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_long_51b_badSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_long_51b_goodG2BSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_52a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_52a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_52a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_52a.c	2025-05-05 11:26:03.325357678 +0800
@@ -32,7 +32,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_52b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_52b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_52c.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_52c.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_52c.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_52c.c	2025-05-05 11:26:03.335357896 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_long_52c_badSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_long_52c_goodG2BSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_53a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_53a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_53a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_53a.c	2025-05-05 11:26:03.321357591 +0800
@@ -32,7 +32,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_53b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_53b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_53d.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_53d.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_53d.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_53d.c	2025-05-05 11:26:03.336357918 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_long_53d_badSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_long_53d_goodG2BSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_54a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_54a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_54a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_54a.c	2025-05-05 11:26:03.441360208 +0800
@@ -32,7 +32,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_54b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_54b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_54e.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_54e.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_54e.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_54e.c	2025-05-05 11:26:03.394359183 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_long_54e_badSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_long_54e_goodG2BSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_61a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_61a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_61a.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_61a.c	2025-05-05 11:26:03.336357918 +0800
@@ -31,7 +31,7 @@
     data = NULL;
     data = CWE415_Double_Free__malloc_free_long_61b_badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -48,7 +48,7 @@
     data = NULL;
     data = CWE415_Double_Free__malloc_free_long_61b_goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_61b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_61b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_61b.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_61b.c	2025-05-05 11:26:03.432360012 +0800
@@ -26,7 +26,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     return data;
 }
 
@@ -49,7 +49,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_62a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_62a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_62a.cpp	2025-05-05 11:26:03.394359183 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_62b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_62b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_62b.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_62b.cpp	2025-05-05 11:26:03.322357613 +0800
@@ -29,7 +29,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -50,7 +50,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_63a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_63a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_63a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_63a.c	2025-05-05 11:26:03.432360012 +0800
@@ -32,7 +32,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_63b_badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_63b_goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_63b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_63b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_63b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_63b.c	2025-05-05 11:26:03.324357656 +0800
@@ -25,7 +25,7 @@
 {
     long * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -37,7 +37,7 @@
 {
     long * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_64a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_64a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_64a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_64a.c	2025-05-05 11:26:03.444360273 +0800
@@ -32,7 +32,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_64b_badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_64b_goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_64b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_64b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_64b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_64b.c	2025-05-05 11:26:03.423359815 +0800
@@ -28,7 +28,7 @@
     /* dereference dataPtr into data */
     long * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -43,7 +43,7 @@
     /* dereference dataPtr into data */
     long * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_65a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_65a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_65a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_65a.c	2025-05-05 11:26:03.446360317 +0800
@@ -34,7 +34,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_65b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_65b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_65b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_65b.c	2025-05-05 11:26:03.420359750 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_long_65b_badSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_long_65b_goodG2BSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_66a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_66a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_66a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_66a.c	2025-05-05 11:26:03.398359270 +0800
@@ -33,7 +33,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     /* put data in array */
     dataArray[2] = data;
     CWE415_Double_Free__malloc_free_long_66b_badSink(dataArray);
@@ -71,7 +71,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     dataArray[2] = data;
     CWE415_Double_Free__malloc_free_long_66b_goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_66b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_66b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_66b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_66b.c	2025-05-05 11:26:03.408359488 +0800
@@ -26,7 +26,7 @@
     /* copy data out of dataArray */
     long * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 {
     long * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_67a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_67a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_67a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_67a.c	2025-05-05 11:26:03.428359924 +0800
@@ -38,7 +38,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     myStruct.structFirst = data;
     CWE415_Double_Free__malloc_free_long_67b_badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     myStruct.structFirst = data;
     CWE415_Double_Free__malloc_free_long_67b_goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_67b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_67b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_67b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_67b.c	2025-05-05 11:26:03.411359554 +0800
@@ -30,7 +30,7 @@
 {
     long * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -42,7 +42,7 @@
 {
     long * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_68a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_68a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_68a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_68a.c	2025-05-05 11:26:03.400359314 +0800
@@ -36,7 +36,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_68_badData = data;
     CWE415_Double_Free__malloc_free_long_68b_badSink();
 }
@@ -71,7 +71,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_68_goodB2GData = data;
     CWE415_Double_Free__malloc_free_long_68b_goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_68b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_68b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_68b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_68b.c	2025-05-05 11:26:03.413359597 +0800
@@ -29,7 +29,7 @@
 {
     long * data = CWE415_Double_Free__malloc_free_long_68_badData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     long * data = CWE415_Double_Free__malloc_free_long_68_goodG2BData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_72a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_72a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_72a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_72a.cpp	2025-05-05 11:26:03.403359379 +0800
@@ -39,7 +39,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -82,7 +82,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_72b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_72b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_72b.cpp	2025-05-05 11:26:03.404359401 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     long * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     long * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_73a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_73a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_73a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_73a.cpp	2025-05-05 11:26:03.425359859 +0800
@@ -39,7 +39,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -82,7 +82,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_73b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_73b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_73b.cpp	2025-05-05 11:26:03.333357853 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     long * data = dataList.back();
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     long * data = dataList.back();
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_74a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_74a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_74a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_74a.cpp	2025-05-05 11:26:03.401359336 +0800
@@ -39,7 +39,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -82,7 +82,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_74b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_74b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_74b.cpp	2025-05-05 11:26:03.414359619 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     long * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     long * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_81a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_81a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_81a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_81a.cpp	2025-05-05 11:26:03.419359728 +0800
@@ -31,7 +31,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     const CWE415_Double_Free__malloc_free_long_81_base& baseObject = CWE415_Double_Free__malloc_free_long_81_bad();
     baseObject.action(data);
 }
@@ -62,7 +62,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     const CWE415_Double_Free__malloc_free_long_81_base& baseObject = CWE415_Double_Free__malloc_free_long_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_81_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_81_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_81_bad.cpp	2025-05-05 11:26:03.446360317 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_long_81_bad::action(long * data) const
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_81_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_81_goodG2B.cpp	2025-05-05 11:26:03.407359466 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_long_81_goodG2B::action(long * data) const
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_82a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_82a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_82a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_82a.cpp	2025-05-05 11:26:03.437360121 +0800
@@ -31,7 +31,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_82_base* baseObject = new CWE415_Double_Free__malloc_free_long_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -64,7 +64,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
     CWE415_Double_Free__malloc_free_long_82_base* baseObject = new CWE415_Double_Free__malloc_free_long_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_82_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_82_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_82_bad.cpp	2025-05-05 11:26:03.435360077 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_long_82_bad::action(long * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_82_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_82_goodG2B.cpp	2025-05-05 11:26:03.322357613 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_long_82_goodG2B::action(long * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_83_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_83_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_83_bad.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_83_bad.cpp	2025-05-05 11:26:03.410359532 +0800
@@ -27,13 +27,13 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 CWE415_Double_Free__malloc_free_long_83_bad::~CWE415_Double_Free__malloc_free_long_83_bad()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_83_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_83_goodB2G.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_83_goodB2G.cpp	2025-05-05 11:26:03.418359706 +0800
@@ -27,7 +27,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 CWE415_Double_Free__malloc_free_long_83_goodB2G::~CWE415_Double_Free__malloc_free_long_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_83_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_83_goodG2B.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_83_goodG2B.cpp	2025-05-05 11:26:03.439360164 +0800
@@ -32,7 +32,7 @@
 CWE415_Double_Free__malloc_free_long_83_goodG2B::~CWE415_Double_Free__malloc_free_long_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_84_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_84_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_84_bad.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_84_bad.cpp	2025-05-05 11:26:03.434360055 +0800
@@ -27,13 +27,13 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 CWE415_Double_Free__malloc_free_long_84_bad::~CWE415_Double_Free__malloc_free_long_84_bad()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_84_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_84_goodB2G.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_84_goodB2G.cpp	2025-05-05 11:26:03.393359161 +0800
@@ -27,7 +27,7 @@
     data = (long *)malloc(100*sizeof(long));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_long(data, has_free_long);
 }
 
 CWE415_Double_Free__malloc_free_long_84_goodB2G::~CWE415_Double_Free__malloc_free_long_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_84_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_84_goodG2B.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_long_84_goodG2B.cpp	2025-05-05 11:26:03.422359794 +0800
@@ -32,7 +32,7 @@
 CWE415_Double_Free__malloc_free_long_84_goodG2B::~CWE415_Double_Free__malloc_free_long_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_long(data, has_free_long);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_01.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_01.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_01.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_01.c	2025-05-05 11:26:03.321357591 +0800
@@ -29,9 +29,9 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -48,7 +48,7 @@
     if (data == NULL) {exit(-1);}
     /* FIX: Do NOT free data in the source - the bad sink frees data */
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     /* do nothing */
     /* FIX: Don't attempt to free the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_02.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_02.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_02.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_02.c	2025-05-05 11:26:03.329357765 +0800
@@ -31,12 +31,12 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(1)
     {
@@ -111,7 +111,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -130,7 +130,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_03.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_03.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_03.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_03.c	2025-05-05 11:26:03.393359161 +0800
@@ -31,12 +31,12 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(5==5)
     {
@@ -111,7 +111,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -130,7 +130,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_04.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_04.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_04.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_04.c	2025-05-05 11:26:03.445360295 +0800
@@ -37,12 +37,12 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -61,7 +61,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -117,7 +117,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -136,7 +136,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_05.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_05.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_05.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_05.c	2025-05-05 11:26:03.426359881 +0800
@@ -37,12 +37,12 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -61,7 +61,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(staticTrue)
     {
@@ -117,7 +117,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -136,7 +136,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_06.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_06.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_06.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_06.c	2025-05-05 11:26:03.336357918 +0800
@@ -36,12 +36,12 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -60,7 +60,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -135,7 +135,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_07.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_07.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_07.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_07.c	2025-05-05 11:26:03.332357831 +0800
@@ -36,12 +36,12 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -60,7 +60,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(staticFive==5)
     {
@@ -116,7 +116,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -135,7 +135,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_08.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_08.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_08.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_08.c	2025-05-05 11:26:03.400359314 +0800
@@ -44,12 +44,12 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -68,7 +68,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(staticReturnsTrue())
     {
@@ -124,7 +124,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -143,7 +143,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_09.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_09.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_09.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_09.c	2025-05-05 11:26:03.412359575 +0800
@@ -31,12 +31,12 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -111,7 +111,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -130,7 +130,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_10.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_10.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_10.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_10.c	2025-05-05 11:26:03.401359336 +0800
@@ -31,12 +31,12 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(globalTrue)
     {
@@ -111,7 +111,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_11.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_11.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_11.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_11.c	2025-05-05 11:26:03.423359815 +0800
@@ -31,12 +31,12 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(globalReturnsFalse())
     {
@@ -81,7 +81,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(globalReturnsTrue())
     {
@@ -111,7 +111,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_12.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_12.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_12.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_12.c	2025-05-05 11:26:03.445360295 +0800
@@ -31,7 +31,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     else
     {
@@ -69,14 +69,14 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     else
     {
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -115,12 +115,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_13.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_13.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_13.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_13.c	2025-05-05 11:26:03.435360077 +0800
@@ -31,12 +31,12 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -81,7 +81,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -111,7 +111,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -130,7 +130,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_14.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_14.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_14.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_14.c	2025-05-05 11:26:03.400359314 +0800
@@ -31,12 +31,12 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(globalFive!=5)
     {
@@ -81,7 +81,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     if(globalFive==5)
     {
@@ -111,7 +111,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_15.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_15.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_15.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_15.c	2025-05-05 11:26:03.322357613 +0800
@@ -32,7 +32,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -43,7 +43,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -101,7 +101,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -144,7 +144,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -175,7 +175,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_16.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_16.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_16.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_16.c	2025-05-05 11:26:03.405359423 +0800
@@ -31,13 +31,13 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
         break;
     }
 }
@@ -57,7 +57,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
         break;
     }
     while(1)
@@ -85,7 +85,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_17.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_17.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_17.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_17.c	2025-05-05 11:26:03.427359902 +0800
@@ -32,12 +32,12 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -57,7 +57,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
     for(k = 0; k < 1; k++)
     {
@@ -83,7 +83,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_18.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_18.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_18.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_18.c	2025-05-05 11:26:03.339357984 +0800
@@ -31,11 +31,11 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     goto sink;
 sink:
     /* do nothing */
@@ -75,7 +75,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 void CWE415_Double_Free__malloc_free_struct_18_good()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_21.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_21.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_21.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_21.c	2025-05-05 11:26:03.404359401 +0800
@@ -29,7 +29,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -41,7 +41,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -79,7 +79,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2BStatic)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_22a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_22a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_22a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_22a.c	2025-05-05 11:26:03.404359401 +0800
@@ -34,7 +34,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_22_badGlobal = 1; /* true */
     CWE415_Double_Free__malloc_free_struct_22_badSink(data);
 }
@@ -59,7 +59,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_22_goodB2G1Global = 0; /* false */
     CWE415_Double_Free__malloc_free_struct_22_goodB2G1Sink(data);
 }
@@ -75,7 +75,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_22_goodB2G2Global = 1; /* true */
     CWE415_Double_Free__malloc_free_struct_22_goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_22b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_22b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_22b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_22b.c	2025-05-05 11:26:03.413359597 +0800
@@ -29,7 +29,7 @@
     if(CWE415_Double_Free__malloc_free_struct_22_badGlobal)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -75,7 +75,7 @@
     if(CWE415_Double_Free__malloc_free_struct_22_goodG2BGlobal)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_31.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_31.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_31.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_31.c	2025-05-05 11:26:03.419359728 +0800
@@ -29,12 +29,12 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     {
         twoIntsStruct * dataCopy = data;
         twoIntsStruct * data = dataCopy;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -55,7 +55,7 @@
         twoIntsStruct * dataCopy = data;
         twoIntsStruct * data = dataCopy;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -68,7 +68,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     {
         twoIntsStruct * dataCopy = data;
         twoIntsStruct * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_32.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_32.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_32.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_32.c	2025-05-05 11:26:03.397359248 +0800
@@ -33,13 +33,13 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
         *dataPtr1 = data;
     }
     {
         twoIntsStruct * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -65,7 +65,7 @@
     {
         twoIntsStruct * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -82,7 +82,7 @@
         data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_struct(data, has_free_struct);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_33.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_33.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_33.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_33.cpp	2025-05-05 11:26:03.326357700 +0800
@@ -33,11 +33,11 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     {
         twoIntsStruct * data = dataRef;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -58,7 +58,7 @@
     {
         twoIntsStruct * data = dataRef;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -72,7 +72,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     {
         twoIntsStruct * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_34.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_34.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_34.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_34.c	2025-05-05 11:26:03.432360012 +0800
@@ -36,12 +36,12 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     myUnion.unionFirst = data;
     {
         twoIntsStruct * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -63,7 +63,7 @@
     {
         twoIntsStruct * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_struct(data, has_free_struct);
     }
 }
 
@@ -77,7 +77,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     myUnion.unionFirst = data;
     {
         twoIntsStruct * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_41.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_41.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_41.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_41.c	2025-05-05 11:26:03.338357962 +0800
@@ -24,7 +24,7 @@
 static void badSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 void CWE415_Double_Free__malloc_free_struct_41_bad()
@@ -35,7 +35,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     badSink(data);
 }
 
@@ -47,7 +47,7 @@
 static void goodG2BSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_42.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_42.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_42.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_42.c	2025-05-05 11:26:03.435360077 +0800
@@ -26,7 +26,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     return data;
 }
 
@@ -37,7 +37,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -60,7 +60,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_43.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_43.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_43.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_43.cpp	2025-05-05 11:26:03.400359314 +0800
@@ -29,7 +29,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -70,7 +70,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_44.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_44.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_44.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_44.c	2025-05-05 11:26:03.414359619 +0800
@@ -24,7 +24,7 @@
 static void badSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 void CWE415_Double_Free__malloc_free_struct_44_bad()
@@ -37,7 +37,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -50,7 +50,7 @@
 static void goodG2BSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_45.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_45.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_45.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_45.c	2025-05-05 11:26:03.423359815 +0800
@@ -29,7 +29,7 @@
 {
     twoIntsStruct * data = CWE415_Double_Free__malloc_free_struct_45_badData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 void CWE415_Double_Free__malloc_free_struct_45_bad()
@@ -40,7 +40,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_45_badData = data;
     badSink();
 }
@@ -54,7 +54,7 @@
 {
     twoIntsStruct * data = CWE415_Double_Free__malloc_free_struct_45_goodG2BData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_45_goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_51a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_51a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_51a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_51a.c	2025-05-05 11:26:03.393359161 +0800
@@ -32,7 +32,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_51b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_51b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_51b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_51b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_51b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_51b.c	2025-05-05 11:26:03.406359445 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_struct_51b_badSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_struct_51b_goodG2BSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_52a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_52a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_52a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_52a.c	2025-05-05 11:26:03.438360142 +0800
@@ -32,7 +32,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_52b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_52b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_52c.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_52c.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_52c.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_52c.c	2025-05-05 11:26:03.407359466 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_struct_52c_badSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_struct_52c_goodG2BSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_53a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_53a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_53a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_53a.c	2025-05-05 11:26:03.331357809 +0800
@@ -32,7 +32,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_53b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_53b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_53d.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_53d.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_53d.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_53d.c	2025-05-05 11:26:03.443360252 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_struct_53d_badSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_struct_53d_goodG2BSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_54a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_54a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_54a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_54a.c	2025-05-05 11:26:03.410359532 +0800
@@ -32,7 +32,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_54b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_54b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_54e.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_54e.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_54e.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_54e.c	2025-05-05 11:26:03.425359859 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_struct_54e_badSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_struct_54e_goodG2BSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_61a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_61a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_61a.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_61a.c	2025-05-05 11:26:03.401359336 +0800
@@ -31,7 +31,7 @@
     data = NULL;
     data = CWE415_Double_Free__malloc_free_struct_61b_badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -48,7 +48,7 @@
     data = NULL;
     data = CWE415_Double_Free__malloc_free_struct_61b_goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_61b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_61b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_61b.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_61b.c	2025-05-05 11:26:03.406359445 +0800
@@ -26,7 +26,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     return data;
 }
 
@@ -49,7 +49,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_62a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_62a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_62a.cpp	2025-05-05 11:26:03.338357962 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_62b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_62b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_62b.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_62b.cpp	2025-05-05 11:26:03.423359815 +0800
@@ -29,7 +29,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -50,7 +50,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_63a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_63a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_63a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_63a.c	2025-05-05 11:26:03.339357984 +0800
@@ -32,7 +32,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_63b_badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_63b_goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_63b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_63b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_63b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_63b.c	2025-05-05 11:26:03.437360121 +0800
@@ -25,7 +25,7 @@
 {
     twoIntsStruct * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -37,7 +37,7 @@
 {
     twoIntsStruct * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_64a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_64a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_64a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_64a.c	2025-05-05 11:26:03.416359663 +0800
@@ -32,7 +32,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_64b_badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_64b_goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_64b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_64b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_64b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_64b.c	2025-05-05 11:26:03.407359466 +0800
@@ -28,7 +28,7 @@
     /* dereference dataPtr into data */
     twoIntsStruct * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -43,7 +43,7 @@
     /* dereference dataPtr into data */
     twoIntsStruct * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_65a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_65a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_65a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_65a.c	2025-05-05 11:26:03.427359902 +0800
@@ -34,7 +34,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_65b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_65b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_65b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_65b.c	2025-05-05 11:26:03.406359445 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_struct_65b_badSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_struct_65b_goodG2BSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_66a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_66a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_66a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_66a.c	2025-05-05 11:26:03.400359314 +0800
@@ -33,7 +33,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     /* put data in array */
     dataArray[2] = data;
     CWE415_Double_Free__malloc_free_struct_66b_badSink(dataArray);
@@ -71,7 +71,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     dataArray[2] = data;
     CWE415_Double_Free__malloc_free_struct_66b_goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_66b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_66b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_66b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_66b.c	2025-05-05 11:26:03.407359466 +0800
@@ -26,7 +26,7 @@
     /* copy data out of dataArray */
     twoIntsStruct * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 {
     twoIntsStruct * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_67a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_67a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_67a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_67a.c	2025-05-05 11:26:03.429359946 +0800
@@ -38,7 +38,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     myStruct.structFirst = data;
     CWE415_Double_Free__malloc_free_struct_67b_badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     myStruct.structFirst = data;
     CWE415_Double_Free__malloc_free_struct_67b_goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_67b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_67b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_67b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_67b.c	2025-05-05 11:26:03.425359859 +0800
@@ -30,7 +30,7 @@
 {
     twoIntsStruct * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -42,7 +42,7 @@
 {
     twoIntsStruct * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_68a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_68a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_68a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_68a.c	2025-05-05 11:26:03.443360252 +0800
@@ -36,7 +36,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_68_badData = data;
     CWE415_Double_Free__malloc_free_struct_68b_badSink();
 }
@@ -71,7 +71,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_68_goodB2GData = data;
     CWE415_Double_Free__malloc_free_struct_68b_goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_68b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_68b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_68b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_68b.c	2025-05-05 11:26:03.430359968 +0800
@@ -29,7 +29,7 @@
 {
     twoIntsStruct * data = CWE415_Double_Free__malloc_free_struct_68_badData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     twoIntsStruct * data = CWE415_Double_Free__malloc_free_struct_68_goodG2BData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_72a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_72a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_72a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_72a.cpp	2025-05-05 11:26:03.417359684 +0800
@@ -39,7 +39,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -82,7 +82,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_72b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_72b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_72b.cpp	2025-05-05 11:26:03.436360099 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     twoIntsStruct * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     twoIntsStruct * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_73a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_73a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_73a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_73a.cpp	2025-05-05 11:26:03.430359968 +0800
@@ -39,7 +39,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -82,7 +82,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_73b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_73b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_73b.cpp	2025-05-05 11:26:03.395359205 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     twoIntsStruct * data = dataList.back();
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     twoIntsStruct * data = dataList.back();
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_74a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_74a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_74a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_74a.cpp	2025-05-05 11:26:03.434360055 +0800
@@ -39,7 +39,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -82,7 +82,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_74b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_74b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_74b.cpp	2025-05-05 11:26:03.445360295 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     twoIntsStruct * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     twoIntsStruct * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_81a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_81a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_81a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_81a.cpp	2025-05-05 11:26:03.416359663 +0800
@@ -31,7 +31,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     const CWE415_Double_Free__malloc_free_struct_81_base& baseObject = CWE415_Double_Free__malloc_free_struct_81_bad();
     baseObject.action(data);
 }
@@ -62,7 +62,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     const CWE415_Double_Free__malloc_free_struct_81_base& baseObject = CWE415_Double_Free__malloc_free_struct_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_81_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_81_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_81_bad.cpp	2025-05-05 11:26:03.422359794 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_struct_81_bad::action(twoIntsStruct * data) const
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_81_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_81_goodG2B.cpp	2025-05-05 11:26:03.339357984 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_struct_81_goodG2B::action(twoIntsStruct * data) const
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_82a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_82a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_82a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_82a.cpp	2025-05-05 11:26:03.406359445 +0800
@@ -31,7 +31,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_82_base* baseObject = new CWE415_Double_Free__malloc_free_struct_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -64,7 +64,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
     CWE415_Double_Free__malloc_free_struct_82_base* baseObject = new CWE415_Double_Free__malloc_free_struct_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_82_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_82_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_82_bad.cpp	2025-05-05 11:26:03.444360273 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_struct_82_bad::action(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_82_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_82_goodG2B.cpp	2025-05-05 11:26:03.446360317 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_struct_82_goodG2B::action(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_83_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_83_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_83_bad.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_83_bad.cpp	2025-05-05 11:26:03.402359357 +0800
@@ -27,13 +27,13 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 CWE415_Double_Free__malloc_free_struct_83_bad::~CWE415_Double_Free__malloc_free_struct_83_bad()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_83_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_83_goodB2G.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_83_goodB2G.cpp	2025-05-05 11:26:03.441360208 +0800
@@ -27,7 +27,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 CWE415_Double_Free__malloc_free_struct_83_goodB2G::~CWE415_Double_Free__malloc_free_struct_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_83_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_83_goodG2B.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_83_goodG2B.cpp	2025-05-05 11:26:03.440360186 +0800
@@ -32,7 +32,7 @@
 CWE415_Double_Free__malloc_free_struct_83_goodG2B::~CWE415_Double_Free__malloc_free_struct_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_84_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_84_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_84_bad.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_84_bad.cpp	2025-05-05 11:26:03.396359226 +0800
@@ -27,13 +27,13 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 CWE415_Double_Free__malloc_free_struct_84_bad::~CWE415_Double_Free__malloc_free_struct_84_bad()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_84_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_84_goodB2G.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_84_goodB2G.cpp	2025-05-05 11:26:03.418359706 +0800
@@ -27,7 +27,7 @@
     data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 
 CWE415_Double_Free__malloc_free_struct_84_goodB2G::~CWE415_Double_Free__malloc_free_struct_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_84_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_84_goodG2B.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_struct_84_goodG2B.cpp	2025-05-05 11:26:03.436360099 +0800
@@ -32,7 +32,7 @@
 CWE415_Double_Free__malloc_free_struct_84_goodG2B::~CWE415_Double_Free__malloc_free_struct_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_struct(data, has_free_struct);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_01.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_01.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_01.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_01.c	2025-05-05 11:26:03.437360121 +0800
@@ -29,9 +29,9 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -48,7 +48,7 @@
     if (data == NULL) {exit(-1);}
     /* FIX: Do NOT free data in the source - the bad sink frees data */
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     /* do nothing */
     /* FIX: Don't attempt to free the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_02.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_02.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_02.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_02.c	2025-05-05 11:26:03.340358005 +0800
@@ -31,12 +31,12 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(1)
     {
@@ -111,7 +111,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -130,7 +130,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_03.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_03.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_03.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_03.c	2025-05-05 11:26:03.432360012 +0800
@@ -31,12 +31,12 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(5==5)
     {
@@ -111,7 +111,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -130,7 +130,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_04.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_04.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_04.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_04.c	2025-05-05 11:26:03.431359990 +0800
@@ -37,12 +37,12 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -61,7 +61,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -117,7 +117,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -136,7 +136,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_05.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_05.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_05.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_05.c	2025-05-05 11:26:03.330357787 +0800
@@ -37,12 +37,12 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -61,7 +61,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(staticTrue)
     {
@@ -117,7 +117,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -136,7 +136,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_06.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_06.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_06.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_06.c	2025-05-05 11:26:03.411359554 +0800
@@ -36,12 +36,12 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -60,7 +60,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -135,7 +135,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_07.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_07.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_07.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_07.c	2025-05-05 11:26:03.401359336 +0800
@@ -36,12 +36,12 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -60,7 +60,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(staticFive==5)
     {
@@ -116,7 +116,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -135,7 +135,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_08.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_08.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_08.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_08.c	2025-05-05 11:26:03.399359292 +0800
@@ -44,12 +44,12 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -68,7 +68,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(staticReturnsTrue())
     {
@@ -124,7 +124,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -143,7 +143,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_09.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_09.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_09.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_09.c	2025-05-05 11:26:03.404359401 +0800
@@ -31,12 +31,12 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -111,7 +111,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -130,7 +130,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_10.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_10.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_10.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_10.c	2025-05-05 11:26:03.336357918 +0800
@@ -31,12 +31,12 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(globalTrue)
     {
@@ -111,7 +111,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_11.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_11.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_11.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_11.c	2025-05-05 11:26:03.395359205 +0800
@@ -31,12 +31,12 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(globalReturnsFalse())
     {
@@ -81,7 +81,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(globalReturnsTrue())
     {
@@ -111,7 +111,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_12.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_12.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_12.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_12.c	2025-05-05 11:26:03.425359859 +0800
@@ -31,7 +31,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     else
     {
@@ -69,14 +69,14 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     else
     {
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -115,12 +115,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_13.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_13.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_13.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_13.c	2025-05-05 11:26:03.436360099 +0800
@@ -31,12 +31,12 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -81,7 +81,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -111,7 +111,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -130,7 +130,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_14.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_14.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_14.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_14.c	2025-05-05 11:26:03.398359270 +0800
@@ -31,12 +31,12 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -55,7 +55,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(globalFive!=5)
     {
@@ -81,7 +81,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     if(globalFive==5)
     {
@@ -111,7 +111,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -130,7 +130,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_15.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_15.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_15.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_15.c	2025-05-05 11:26:03.330357787 +0800
@@ -32,7 +32,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -43,7 +43,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -101,7 +101,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -144,7 +144,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -175,7 +175,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_16.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_16.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_16.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_16.c	2025-05-05 11:26:03.428359924 +0800
@@ -31,13 +31,13 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
         break;
     }
 }
@@ -57,7 +57,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
         break;
     }
     while(1)
@@ -85,7 +85,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_17.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_17.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_17.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_17.c	2025-05-05 11:26:03.442360229 +0800
@@ -32,12 +32,12 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -57,7 +57,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
     for(k = 0; k < 1; k++)
     {
@@ -83,7 +83,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_18.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_18.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_18.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_18.c	2025-05-05 11:26:03.326357700 +0800
@@ -31,11 +31,11 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     goto sink;
 sink:
     /* do nothing */
@@ -75,7 +75,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 void CWE415_Double_Free__malloc_free_wchar_t_18_good()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_21.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_21.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_21.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_21.c	2025-05-05 11:26:03.422359794 +0800
@@ -29,7 +29,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -41,7 +41,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -79,7 +79,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2BStatic)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_22a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_22a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_22a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_22a.c	2025-05-05 11:26:03.427359902 +0800
@@ -34,7 +34,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_22_badGlobal = 1; /* true */
     CWE415_Double_Free__malloc_free_wchar_t_22_badSink(data);
 }
@@ -59,7 +59,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_22_goodB2G1Global = 0; /* false */
     CWE415_Double_Free__malloc_free_wchar_t_22_goodB2G1Sink(data);
 }
@@ -75,7 +75,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_22_goodB2G2Global = 1; /* true */
     CWE415_Double_Free__malloc_free_wchar_t_22_goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_22b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_22b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_22b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_22b.c	2025-05-05 11:26:03.445360295 +0800
@@ -29,7 +29,7 @@
     if(CWE415_Double_Free__malloc_free_wchar_t_22_badGlobal)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -75,7 +75,7 @@
     if(CWE415_Double_Free__malloc_free_wchar_t_22_goodG2BGlobal)
     {
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_31.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_31.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_31.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_31.c	2025-05-05 11:26:03.331357809 +0800
@@ -29,12 +29,12 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     {
         wchar_t * dataCopy = data;
         wchar_t * data = dataCopy;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -55,7 +55,7 @@
         wchar_t * dataCopy = data;
         wchar_t * data = dataCopy;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -68,7 +68,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     {
         wchar_t * dataCopy = data;
         wchar_t * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_32.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_32.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_32.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_32.c	2025-05-05 11:26:03.438360142 +0800
@@ -33,13 +33,13 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
         *dataPtr1 = data;
     }
     {
         wchar_t * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -65,7 +65,7 @@
     {
         wchar_t * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -82,7 +82,7 @@
         data = (wchar_t *)malloc(100*sizeof(wchar_t));
         if (data == NULL) {exit(-1);}
         /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-        free(data);
+        callback_wchar(data, has_free_wchar);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_33.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_33.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_33.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_33.cpp	2025-05-05 11:26:03.414359619 +0800
@@ -33,11 +33,11 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     {
         wchar_t * data = dataRef;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -58,7 +58,7 @@
     {
         wchar_t * data = dataRef;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -72,7 +72,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     {
         wchar_t * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_34.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_34.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_34.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_34.c	2025-05-05 11:26:03.428359924 +0800
@@ -36,12 +36,12 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     myUnion.unionFirst = data;
     {
         wchar_t * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -63,7 +63,7 @@
     {
         wchar_t * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly freeing memory twice */
-        free(data);
+        callback_wchar(data, has_free_wchar);
     }
 }
 
@@ -77,7 +77,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     myUnion.unionFirst = data;
     {
         wchar_t * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_41.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_41.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_41.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_41.c	2025-05-05 11:26:03.400359314 +0800
@@ -24,7 +24,7 @@
 static void badSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 void CWE415_Double_Free__malloc_free_wchar_t_41_bad()
@@ -35,7 +35,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     badSink(data);
 }
 
@@ -47,7 +47,7 @@
 static void goodG2BSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_42.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_42.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_42.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_42.c	2025-05-05 11:26:03.419359728 +0800
@@ -26,7 +26,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     return data;
 }
 
@@ -37,7 +37,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -60,7 +60,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_43.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_43.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_43.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_43.cpp	2025-05-05 11:26:03.445360295 +0800
@@ -29,7 +29,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -70,7 +70,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_44.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_44.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_44.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_44.c	2025-05-05 11:26:03.321357591 +0800
@@ -24,7 +24,7 @@
 static void badSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 void CWE415_Double_Free__malloc_free_wchar_t_44_bad()
@@ -37,7 +37,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -50,7 +50,7 @@
 static void goodG2BSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_45.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_45.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_45.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_45.c	2025-05-05 11:26:03.442360229 +0800
@@ -29,7 +29,7 @@
 {
     wchar_t * data = CWE415_Double_Free__malloc_free_wchar_t_45_badData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 void CWE415_Double_Free__malloc_free_wchar_t_45_bad()
@@ -40,7 +40,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_45_badData = data;
     badSink();
 }
@@ -54,7 +54,7 @@
 {
     wchar_t * data = CWE415_Double_Free__malloc_free_wchar_t_45_goodG2BData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_45_goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_51a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_51a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_51a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_51a.c	2025-05-05 11:26:03.396359226 +0800
@@ -32,7 +32,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_51b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_51b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_51b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_51b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_51b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_51b.c	2025-05-05 11:26:03.410359532 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_wchar_t_51b_badSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_wchar_t_51b_goodG2BSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_52a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_52a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_52a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_52a.c	2025-05-05 11:26:03.410359532 +0800
@@ -32,7 +32,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_52b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_52b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_52c.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_52c.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_52c.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_52c.c	2025-05-05 11:26:03.403359379 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_wchar_t_52c_badSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_wchar_t_52c_goodG2BSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_53a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_53a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_53a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_53a.c	2025-05-05 11:26:03.417359684 +0800
@@ -32,7 +32,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_53b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_53b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_53d.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_53d.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_53d.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_53d.c	2025-05-05 11:26:03.444360273 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_wchar_t_53d_badSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_wchar_t_53d_goodG2BSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_54a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_54a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_54a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_54a.c	2025-05-05 11:26:03.340358005 +0800
@@ -32,7 +32,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_54b_badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_54b_goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_54e.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_54e.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_54e.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_54e.c	2025-05-05 11:26:03.394359183 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_wchar_t_54e_badSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_wchar_t_54e_goodG2BSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_61a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_61a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_61a.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_61a.c	2025-05-05 11:26:03.325357678 +0800
@@ -31,7 +31,7 @@
     data = NULL;
     data = CWE415_Double_Free__malloc_free_wchar_t_61b_badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -48,7 +48,7 @@
     data = NULL;
     data = CWE415_Double_Free__malloc_free_wchar_t_61b_goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_61b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_61b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_61b.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_61b.c	2025-05-05 11:26:03.335357896 +0800
@@ -26,7 +26,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     return data;
 }
 
@@ -49,7 +49,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_62a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_62a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_62a.cpp	2025-05-05 11:26:03.422359794 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_62b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_62b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_62b.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_62b.cpp	2025-05-05 11:26:03.328357744 +0800
@@ -29,7 +29,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -50,7 +50,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_63a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_63a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_63a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_63a.c	2025-05-05 11:26:03.324357656 +0800
@@ -32,7 +32,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_63b_badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_63b_goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_63b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_63b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_63b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_63b.c	2025-05-05 11:26:03.402359357 +0800
@@ -25,7 +25,7 @@
 {
     wchar_t * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -37,7 +37,7 @@
 {
     wchar_t * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_64a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_64a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_64a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_64a.c	2025-05-05 11:26:03.324357656 +0800
@@ -32,7 +32,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_64b_badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_64b_goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_64b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_64b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_64b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_64b.c	2025-05-05 11:26:03.324357656 +0800
@@ -28,7 +28,7 @@
     /* dereference dataPtr into data */
     wchar_t * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -43,7 +43,7 @@
     /* dereference dataPtr into data */
     wchar_t * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_65a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_65a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_65a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_65a.c	2025-05-05 11:26:03.444360273 +0800
@@ -34,7 +34,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_65b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_65b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_65b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_65b.c	2025-05-05 11:26:03.418359706 +0800
@@ -24,7 +24,7 @@
 void CWE415_Double_Free__malloc_free_wchar_t_65b_badSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -35,7 +35,7 @@
 void CWE415_Double_Free__malloc_free_wchar_t_65b_goodG2BSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_66a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_66a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_66a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_66a.c	2025-05-05 11:26:03.420359750 +0800
@@ -33,7 +33,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     /* put data in array */
     dataArray[2] = data;
     CWE415_Double_Free__malloc_free_wchar_t_66b_badSink(dataArray);
@@ -71,7 +71,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     dataArray[2] = data;
     CWE415_Double_Free__malloc_free_wchar_t_66b_goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_66b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_66b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_66b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_66b.c	2025-05-05 11:26:03.396359226 +0800
@@ -26,7 +26,7 @@
     /* copy data out of dataArray */
     wchar_t * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 {
     wchar_t * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_67a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_67a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_67a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_67a.c	2025-05-05 11:26:03.323357635 +0800
@@ -38,7 +38,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     myStruct.structFirst = data;
     CWE415_Double_Free__malloc_free_wchar_t_67b_badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     myStruct.structFirst = data;
     CWE415_Double_Free__malloc_free_wchar_t_67b_goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_67b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_67b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_67b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_67b.c	2025-05-05 11:26:03.442360229 +0800
@@ -30,7 +30,7 @@
 {
     wchar_t * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -42,7 +42,7 @@
 {
     wchar_t * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_68a.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_68a.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_68a.c	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_68a.c	2025-05-05 11:26:03.401359336 +0800
@@ -36,7 +36,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_68_badData = data;
     CWE415_Double_Free__malloc_free_wchar_t_68b_badSink();
 }
@@ -71,7 +71,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_68_goodB2GData = data;
     CWE415_Double_Free__malloc_free_wchar_t_68b_goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_68b.c refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_68b.c
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_68b.c	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_68b.c	2025-05-05 11:26:03.445360295 +0800
@@ -29,7 +29,7 @@
 {
     wchar_t * data = CWE415_Double_Free__malloc_free_wchar_t_68_badData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     wchar_t * data = CWE415_Double_Free__malloc_free_wchar_t_68_goodG2BData;
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_72a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_72a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_72a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_72a.cpp	2025-05-05 11:26:03.415359641 +0800
@@ -39,7 +39,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -82,7 +82,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_72b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_72b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_72b.cpp	2025-05-05 11:26:03.440360186 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     wchar_t * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     wchar_t * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_73a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_73a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_73a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_73a.cpp	2025-05-05 11:26:03.323357635 +0800
@@ -39,7 +39,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -82,7 +82,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_73b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_73b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_73b.cpp	2025-05-05 11:26:03.425359859 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     wchar_t * data = dataList.back();
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     wchar_t * data = dataList.back();
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_74a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_74a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_74a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_74a.cpp	2025-05-05 11:26:03.330357787 +0800
@@ -39,7 +39,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -82,7 +82,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_74b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_74b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_74b.cpp	2025-05-05 11:26:03.340358005 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     wchar_t * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     wchar_t * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_81a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_81a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_81a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_81a.cpp	2025-05-05 11:26:03.322357613 +0800
@@ -31,7 +31,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     const CWE415_Double_Free__malloc_free_wchar_t_81_base& baseObject = CWE415_Double_Free__malloc_free_wchar_t_81_bad();
     baseObject.action(data);
 }
@@ -62,7 +62,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     const CWE415_Double_Free__malloc_free_wchar_t_81_base& baseObject = CWE415_Double_Free__malloc_free_wchar_t_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_81_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_81_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_81_bad.cpp	2025-05-05 11:26:03.332357831 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_wchar_t_81_bad::action(wchar_t * data) const
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_81_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_81_goodG2B.cpp	2025-05-05 11:26:03.433360033 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_wchar_t_81_goodG2B::action(wchar_t * data) const
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_82a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_82a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_82a.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_82a.cpp	2025-05-05 11:26:03.423359815 +0800
@@ -31,7 +31,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_82_base* baseObject = new CWE415_Double_Free__malloc_free_wchar_t_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -64,7 +64,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
     CWE415_Double_Free__malloc_free_wchar_t_82_base* baseObject = new CWE415_Double_Free__malloc_free_wchar_t_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_82_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_82_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_82_bad.cpp	2025-05-05 11:26:03.439360164 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_wchar_t_82_bad::action(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_82_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_82_goodG2B.cpp	2025-05-05 11:26:03.325357678 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__malloc_free_wchar_t_82_goodG2B::action(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_83_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_83_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_83_bad.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_83_bad.cpp	2025-05-05 11:26:03.441360208 +0800
@@ -27,13 +27,13 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 CWE415_Double_Free__malloc_free_wchar_t_83_bad::~CWE415_Double_Free__malloc_free_wchar_t_83_bad()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_83_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_83_goodB2G.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_83_goodB2G.cpp	2025-05-05 11:26:03.436360099 +0800
@@ -27,7 +27,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 CWE415_Double_Free__malloc_free_wchar_t_83_goodB2G::~CWE415_Double_Free__malloc_free_wchar_t_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_83_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_83_goodG2B.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_83_goodG2B.cpp	2025-05-05 11:26:03.340358005 +0800
@@ -32,7 +32,7 @@
 CWE415_Double_Free__malloc_free_wchar_t_83_goodG2B::~CWE415_Double_Free__malloc_free_wchar_t_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_84_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_84_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_84_bad.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_84_bad.cpp	2025-05-05 11:26:03.425359859 +0800
@@ -27,13 +27,13 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 CWE415_Double_Free__malloc_free_wchar_t_84_bad::~CWE415_Double_Free__malloc_free_wchar_t_84_bad()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_84_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_84_goodB2G.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_84_goodB2G.cpp	2025-05-05 11:26:03.321357591 +0800
@@ -27,7 +27,7 @@
     data = (wchar_t *)malloc(100*sizeof(wchar_t));
     if (data == NULL) {exit(-1);}
     /* POTENTIAL FLAW: Free data in the source - the bad sink frees data as well */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 
 CWE415_Double_Free__malloc_free_wchar_t_84_goodB2G::~CWE415_Double_Free__malloc_free_wchar_t_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_84_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_84_goodG2B.cpp	2017-08-12 03:38:30.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__malloc_free_wchar_t_84_goodG2B.cpp	2025-05-05 11:26:03.403359379 +0800
@@ -32,7 +32,7 @@
 CWE415_Double_Free__malloc_free_wchar_t_84_goodG2B::~CWE415_Double_Free__malloc_free_wchar_t_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly freeing memory twice */
-    free(data);
+    callback_wchar(data, has_free_wchar);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_01.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_01.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_01.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_01.cpp	2025-05-05 11:26:03.339357984 +0800
@@ -31,9 +31,9 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -49,7 +49,7 @@
     data = new char[100];
     /* FIX: Do NOT delete the array data in the source - the bad sink deletes the array data */
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     /* do nothing */
     /* FIX: Don't attempt to delete the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_02.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_02.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_02.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_02.cpp	2025-05-05 11:26:03.438360142 +0800
@@ -33,12 +33,12 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(1)
     {
@@ -110,7 +110,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -128,7 +128,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_03.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_03.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_03.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_03.cpp	2025-05-05 11:26:03.413359597 +0800
@@ -33,12 +33,12 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(5==5)
     {
@@ -110,7 +110,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -128,7 +128,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_04.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_04.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_04.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_04.cpp	2025-05-05 11:26:03.403359379 +0800
@@ -39,12 +39,12 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -134,7 +134,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_05.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_05.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_05.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_05.cpp	2025-05-05 11:26:03.427359902 +0800
@@ -39,12 +39,12 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(staticTrue)
     {
@@ -116,7 +116,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -134,7 +134,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_06.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_06.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_06.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_06.cpp	2025-05-05 11:26:03.430359968 +0800
@@ -38,12 +38,12 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -115,7 +115,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -133,7 +133,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_07.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_07.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_07.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_07.cpp	2025-05-05 11:26:03.418359706 +0800
@@ -38,12 +38,12 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(staticFive==5)
     {
@@ -115,7 +115,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -133,7 +133,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_08.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_08.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_08.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_08.cpp	2025-05-05 11:26:03.426359881 +0800
@@ -46,12 +46,12 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -69,7 +69,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(staticReturnsTrue())
     {
@@ -123,7 +123,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -141,7 +141,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_09.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_09.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_09.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_09.cpp	2025-05-05 11:26:03.324357656 +0800
@@ -33,12 +33,12 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -110,7 +110,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -128,7 +128,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_10.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_10.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_10.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_10.cpp	2025-05-05 11:26:03.393359161 +0800
@@ -33,12 +33,12 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(globalTrue)
     {
@@ -110,7 +110,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -128,7 +128,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_11.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_11.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_11.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_11.cpp	2025-05-05 11:26:03.420359750 +0800
@@ -32,12 +32,12 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(globalReturnsFalse())
     {
@@ -80,7 +80,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(globalReturnsTrue())
     {
@@ -109,7 +109,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_12.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_12.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_12.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_12.cpp	2025-05-05 11:26:03.421359772 +0800
@@ -32,7 +32,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     else
     {
@@ -68,13 +68,13 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     else
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -111,12 +111,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_13.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_13.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_13.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_13.cpp	2025-05-05 11:26:03.420359750 +0800
@@ -32,12 +32,12 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -109,7 +109,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -127,7 +127,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_14.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_14.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_14.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_14.cpp	2025-05-05 11:26:03.435360077 +0800
@@ -32,12 +32,12 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(globalFive!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     if(globalFive==5)
     {
@@ -109,7 +109,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_15.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_15.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_15.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_15.cpp	2025-05-05 11:26:03.443360252 +0800
@@ -33,7 +33,7 @@
     case 6:
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -44,7 +44,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
     case 6:
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -100,7 +100,7 @@
     case 6:
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -142,7 +142,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -172,7 +172,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_16.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_16.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_16.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_16.cpp	2025-05-05 11:26:03.414359619 +0800
@@ -32,13 +32,13 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
         break;
     }
 }
@@ -57,7 +57,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
         break;
     }
     while(1)
@@ -84,7 +84,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_17.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_17.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_17.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_17.cpp	2025-05-05 11:26:03.434360055 +0800
@@ -33,12 +33,12 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -57,7 +57,7 @@
     {
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
     for(k = 0; k < 1; k++)
     {
@@ -82,7 +82,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_18.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_18.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_18.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_18.cpp	2025-05-05 11:26:03.436360099 +0800
@@ -32,11 +32,11 @@
 source:
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
 source:
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     goto sink;
 sink:
     /* do nothing */
@@ -74,7 +74,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 void good()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_21.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_21.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_21.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_21.cpp	2025-05-05 11:26:03.329357765 +0800
@@ -32,7 +32,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -43,7 +43,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -80,7 +80,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2bStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_22a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_22a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_22a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_22a.cpp	2025-05-05 11:26:03.419359728 +0800
@@ -37,7 +37,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     badGlobal = 1; /* true */
     badSink(data);
 }
@@ -62,7 +62,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     goodB2G1Global = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -77,7 +77,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     goodB2G2Global = 1; /* true */
     goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_22b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_22b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_22b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_22b.cpp	2025-05-05 11:26:03.419359728 +0800
@@ -33,7 +33,7 @@
     if(badGlobal)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -80,7 +80,7 @@
     if(goodG2B1Global)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_31.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_31.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_31.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_31.cpp	2025-05-05 11:26:03.422359794 +0800
@@ -31,12 +31,12 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     {
         char * dataCopy = data;
         char * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -56,7 +56,7 @@
         char * dataCopy = data;
         char * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -68,7 +68,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     {
         char * dataCopy = data;
         char * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_32.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_32.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_32.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_32.cpp	2025-05-05 11:26:03.439360164 +0800
@@ -35,13 +35,13 @@
         char * data = *dataPtr1;
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
         *dataPtr1 = data;
     }
     {
         char * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -66,7 +66,7 @@
     {
         char * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -82,7 +82,7 @@
         char * data = *dataPtr1;
         data = new char[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_33.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_33.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_33.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_33.cpp	2025-05-05 11:26:03.433360033 +0800
@@ -32,11 +32,11 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     {
         char * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         char * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -69,7 +69,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     {
         char * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_34.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_34.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_34.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_34.cpp	2025-05-05 11:26:03.397359248 +0800
@@ -38,12 +38,12 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     myUnion.unionFirst = data;
     {
         char * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -64,7 +64,7 @@
     {
         char * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_char(data, has_free_array_char);
     }
 }
 
@@ -77,7 +77,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     myUnion.unionFirst = data;
     {
         char * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_41.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_41.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_41.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_41.cpp	2025-05-05 11:26:03.403359379 +0800
@@ -27,7 +27,7 @@
 static void badSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 void bad()
@@ -37,7 +37,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     badSink(data);
 }
 
@@ -49,7 +49,7 @@
 static void goodG2BSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_42.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_42.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_42.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_42.cpp	2025-05-05 11:26:03.418359706 +0800
@@ -28,7 +28,7 @@
 {
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     return data;
 }
 
@@ -39,7 +39,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
 {
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_43.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_43.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_43.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_43.cpp	2025-05-05 11:26:03.424359837 +0800
@@ -28,7 +28,7 @@
 {
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 void bad()
@@ -38,7 +38,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -59,7 +59,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -67,7 +67,7 @@
 {
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_44.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_44.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_44.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_44.cpp	2025-05-05 11:26:03.408359488 +0800
@@ -27,7 +27,7 @@
 static void badSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -52,7 +52,7 @@
 static void goodG2BSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_45.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_45.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_45.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_45.cpp	2025-05-05 11:26:03.429359946 +0800
@@ -32,7 +32,7 @@
 {
     char * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 void bad()
@@ -42,7 +42,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     badData = data;
     badSink();
 }
@@ -56,7 +56,7 @@
 {
     char * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_51a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_51a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_51a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_51a.cpp	2025-05-05 11:26:03.437360121 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_51b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_51b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_51b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_51b.cpp	2025-05-05 11:26:03.323357635 +0800
@@ -27,7 +27,7 @@
 void badSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_52a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_52a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_52a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_52a.cpp	2025-05-05 11:26:03.420359750 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_52c.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_52c.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_52c.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_52c.cpp	2025-05-05 11:26:03.394359183 +0800
@@ -27,7 +27,7 @@
 void badSink_c(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_c(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_53a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_53a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_53a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_53a.cpp	2025-05-05 11:26:03.408359488 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_53d.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_53d.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_53d.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_53d.cpp	2025-05-05 11:26:03.327357722 +0800
@@ -27,7 +27,7 @@
 void badSink_d(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_d(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_54a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_54a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_54a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_54a.cpp	2025-05-05 11:26:03.433360033 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_54e.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_54e.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_54e.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_54e.cpp	2025-05-05 11:26:03.324357656 +0800
@@ -27,7 +27,7 @@
 void badSink_e(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_e(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_61a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_61a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_61a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_61a.cpp	2025-05-05 11:26:03.439360164 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_61b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_61b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_61b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_61b.cpp	2025-05-05 11:26:03.405359423 +0800
@@ -28,7 +28,7 @@
 {
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     return data;
 }
 
@@ -49,7 +49,7 @@
 {
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_62a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_62a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_62a.cpp	2025-05-05 11:26:03.412359575 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_62b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_62b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_62b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_62b.cpp	2025-05-05 11:26:03.400359314 +0800
@@ -28,7 +28,7 @@
 {
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -47,7 +47,7 @@
 {
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_63a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_63a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_63a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_63a.cpp	2025-05-05 11:26:03.407359466 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_63b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_63b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_63b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_63b.cpp	2025-05-05 11:26:03.396359226 +0800
@@ -28,7 +28,7 @@
 {
     char * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -40,7 +40,7 @@
 {
     char * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_64a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_64a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_64a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_64a.cpp	2025-05-05 11:26:03.438360142 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_64b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_64b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_64b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_64b.cpp	2025-05-05 11:26:03.394359183 +0800
@@ -31,7 +31,7 @@
     /* dereference dataPtr into data */
     char * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -46,7 +46,7 @@
     /* dereference dataPtr into data */
     char * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_65a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_65a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_65a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_65a.cpp	2025-05-05 11:26:03.323357635 +0800
@@ -36,7 +36,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_65b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_65b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_65b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_65b.cpp	2025-05-05 11:26:03.337357940 +0800
@@ -27,7 +27,7 @@
 void badSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_66a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_66a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_66a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_66a.cpp	2025-05-05 11:26:03.400359314 +0800
@@ -35,7 +35,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     /* put data in array */
     dataArray[2] = data;
     badSink(dataArray);
@@ -71,7 +71,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     dataArray[2] = data;
     goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_66b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_66b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_66b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_66b.cpp	2025-05-05 11:26:03.322357613 +0800
@@ -29,7 +29,7 @@
     /* copy data out of dataArray */
     char * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     char * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_67a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_67a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_67a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_67a.cpp	2025-05-05 11:26:03.438360142 +0800
@@ -40,7 +40,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     myStruct.structFirst = data;
     badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     myStruct.structFirst = data;
     goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_67b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_67b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_67b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_67b.cpp	2025-05-05 11:26:03.395359205 +0800
@@ -33,7 +33,7 @@
 {
     char * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -45,7 +45,7 @@
 {
     char * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_68a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_68a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_68a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_68a.cpp	2025-05-05 11:26:03.408359488 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     badData = data;
     badSink();
 }
@@ -71,7 +71,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_68b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_68b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_68b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_68b.cpp	2025-05-05 11:26:03.333357853 +0800
@@ -32,7 +32,7 @@
 {
     char * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     char * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_72a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_72a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_72a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_72a.cpp	2025-05-05 11:26:03.438360142 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_72b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_72b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_72b.cpp	2025-05-05 11:26:03.420359750 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     char * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     char * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_73a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_73a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_73a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_73a.cpp	2025-05-05 11:26:03.411359554 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_73b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_73b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_73b.cpp	2025-05-05 11:26:03.403359379 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     char * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     char * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_74a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_74a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_74a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_74a.cpp	2025-05-05 11:26:03.436360099 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -79,7 +79,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_74b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_74b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_74b.cpp	2025-05-05 11:26:03.338357962 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     char * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     char * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_81a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_81a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_81a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_81a.cpp	2025-05-05 11:26:03.429359946 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     const CWE415_Double_Free__new_delete_array_char_81_base& o = CWE415_Double_Free__new_delete_array_char_81_bad();
     o.action(data);
 }
@@ -59,7 +59,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     const CWE415_Double_Free__new_delete_array_char_81_base& baseObject = CWE415_Double_Free__new_delete_array_char_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_81_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_81_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_81_bad.cpp	2025-05-05 11:26:03.437360121 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_char_81_bad::action(char * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_81_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_81_goodG2B.cpp	2025-05-05 11:26:03.421359772 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_char_81_goodG2B::action(char * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_82a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_82a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_82a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_82a.cpp	2025-05-05 11:26:03.331357809 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     CWE415_Double_Free__new_delete_array_char_82_base* baseObject = new CWE415_Double_Free__new_delete_array_char_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -61,7 +61,7 @@
     data = NULL;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
     CWE415_Double_Free__new_delete_array_char_82_base* baseObject = new CWE415_Double_Free__new_delete_array_char_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_82_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_82_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_82_bad.cpp	2025-05-05 11:26:03.320357569 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_char_82_bad::action(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_82_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_82_goodG2B.cpp	2025-05-05 11:26:03.325357678 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_char_82_goodG2B::action(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_83_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_83_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_83_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_83_bad.cpp	2025-05-05 11:26:03.329357765 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 CWE415_Double_Free__new_delete_array_char_83_bad::~CWE415_Double_Free__new_delete_array_char_83_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_83_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_83_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_83_goodB2G.cpp	2025-05-05 11:26:03.438360142 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 CWE415_Double_Free__new_delete_array_char_83_goodB2G::~CWE415_Double_Free__new_delete_array_char_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_83_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_83_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_83_goodG2B.cpp	2025-05-05 11:26:03.440360186 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_array_char_83_goodG2B::~CWE415_Double_Free__new_delete_array_char_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_84_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_84_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_84_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_84_bad.cpp	2025-05-05 11:26:03.407359466 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 CWE415_Double_Free__new_delete_array_char_84_bad::~CWE415_Double_Free__new_delete_array_char_84_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_84_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_84_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_84_goodB2G.cpp	2025-05-05 11:26:03.326357700 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new char[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 
 CWE415_Double_Free__new_delete_array_char_84_goodB2G::~CWE415_Double_Free__new_delete_array_char_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_84_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_84_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_char_84_goodG2B.cpp	2025-05-05 11:26:03.431359990 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_array_char_84_goodG2B::~CWE415_Double_Free__new_delete_array_char_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_char(data, has_free_array_char);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_01.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_01.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_01.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_01.cpp	2025-05-05 11:26:03.332357831 +0800
@@ -31,9 +31,9 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -49,7 +49,7 @@
     data = new TwoIntsClass[100];
     /* FIX: Do NOT delete the array data in the source - the bad sink deletes the array data */
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     /* do nothing */
     /* FIX: Don't attempt to delete the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_02.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_02.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_02.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_02.cpp	2025-05-05 11:26:03.334357874 +0800
@@ -33,12 +33,12 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(1)
     {
@@ -110,7 +110,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -128,7 +128,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_03.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_03.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_03.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_03.cpp	2025-05-05 11:26:03.418359706 +0800
@@ -33,12 +33,12 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(5==5)
     {
@@ -110,7 +110,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -128,7 +128,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_04.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_04.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_04.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_04.cpp	2025-05-05 11:26:03.428359924 +0800
@@ -39,12 +39,12 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -134,7 +134,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_05.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_05.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_05.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_05.cpp	2025-05-05 11:26:03.403359379 +0800
@@ -39,12 +39,12 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(staticTrue)
     {
@@ -116,7 +116,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -134,7 +134,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_06.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_06.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_06.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_06.cpp	2025-05-05 11:26:03.394359183 +0800
@@ -38,12 +38,12 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -115,7 +115,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -133,7 +133,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_07.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_07.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_07.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_07.cpp	2025-05-05 11:26:03.392359139 +0800
@@ -38,12 +38,12 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(staticFive==5)
     {
@@ -115,7 +115,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -133,7 +133,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_08.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_08.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_08.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_08.cpp	2025-05-05 11:26:03.441360208 +0800
@@ -46,12 +46,12 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -69,7 +69,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(staticReturnsTrue())
     {
@@ -123,7 +123,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -141,7 +141,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_09.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_09.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_09.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_09.cpp	2025-05-05 11:26:03.427359902 +0800
@@ -33,12 +33,12 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -110,7 +110,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -128,7 +128,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_10.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_10.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_10.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_10.cpp	2025-05-05 11:26:03.443360252 +0800
@@ -33,12 +33,12 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(globalTrue)
     {
@@ -110,7 +110,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -128,7 +128,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_11.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_11.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_11.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_11.cpp	2025-05-05 11:26:03.411359554 +0800
@@ -32,12 +32,12 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(globalReturnsFalse())
     {
@@ -80,7 +80,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(globalReturnsTrue())
     {
@@ -109,7 +109,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_12.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_12.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_12.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_12.cpp	2025-05-05 11:26:03.398359270 +0800
@@ -32,7 +32,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     else
     {
@@ -68,13 +68,13 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     else
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -111,12 +111,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_13.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_13.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_13.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_13.cpp	2025-05-05 11:26:03.327357722 +0800
@@ -32,12 +32,12 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -109,7 +109,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -127,7 +127,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_14.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_14.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_14.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_14.cpp	2025-05-05 11:26:03.410359532 +0800
@@ -32,12 +32,12 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(globalFive!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     if(globalFive==5)
     {
@@ -109,7 +109,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_15.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_15.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_15.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_15.cpp	2025-05-05 11:26:03.426359881 +0800
@@ -33,7 +33,7 @@
     case 6:
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -44,7 +44,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
     case 6:
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -100,7 +100,7 @@
     case 6:
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -142,7 +142,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -172,7 +172,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_16.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_16.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_16.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_16.cpp	2025-05-05 11:26:03.397359248 +0800
@@ -32,13 +32,13 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
         break;
     }
 }
@@ -57,7 +57,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
         break;
     }
     while(1)
@@ -84,7 +84,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_17.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_17.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_17.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_17.cpp	2025-05-05 11:26:03.415359641 +0800
@@ -33,12 +33,12 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -57,7 +57,7 @@
     {
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
     for(k = 0; k < 1; k++)
     {
@@ -82,7 +82,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_18.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_18.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_18.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_18.cpp	2025-05-05 11:26:03.426359881 +0800
@@ -32,11 +32,11 @@
 source:
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
 source:
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     goto sink;
 sink:
     /* do nothing */
@@ -74,7 +74,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 void good()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_21.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_21.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_21.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_21.cpp	2025-05-05 11:26:03.421359772 +0800
@@ -32,7 +32,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -43,7 +43,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -80,7 +80,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2bStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_22a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_22a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_22a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_22a.cpp	2025-05-05 11:26:03.417359684 +0800
@@ -37,7 +37,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     badGlobal = 1; /* true */
     badSink(data);
 }
@@ -62,7 +62,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     goodB2G1Global = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -77,7 +77,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     goodB2G2Global = 1; /* true */
     goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_22b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_22b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_22b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_22b.cpp	2025-05-05 11:26:03.327357722 +0800
@@ -33,7 +33,7 @@
     if(badGlobal)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -80,7 +80,7 @@
     if(goodG2B1Global)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_31.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_31.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_31.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_31.cpp	2025-05-05 11:26:03.438360142 +0800
@@ -31,12 +31,12 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     {
         TwoIntsClass * dataCopy = data;
         TwoIntsClass * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -56,7 +56,7 @@
         TwoIntsClass * dataCopy = data;
         TwoIntsClass * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -68,7 +68,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     {
         TwoIntsClass * dataCopy = data;
         TwoIntsClass * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_32.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_32.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_32.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_32.cpp	2025-05-05 11:26:03.425359859 +0800
@@ -35,13 +35,13 @@
         TwoIntsClass * data = *dataPtr1;
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
         *dataPtr1 = data;
     }
     {
         TwoIntsClass * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -66,7 +66,7 @@
     {
         TwoIntsClass * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -82,7 +82,7 @@
         TwoIntsClass * data = *dataPtr1;
         data = new TwoIntsClass[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_33.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_33.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_33.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_33.cpp	2025-05-05 11:26:03.402359357 +0800
@@ -32,11 +32,11 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     {
         TwoIntsClass * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         TwoIntsClass * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -69,7 +69,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     {
         TwoIntsClass * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_34.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_34.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_34.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_34.cpp	2025-05-05 11:26:03.430359968 +0800
@@ -38,12 +38,12 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     myUnion.unionFirst = data;
     {
         TwoIntsClass * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -64,7 +64,7 @@
     {
         TwoIntsClass * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_class(data, has_free_array_class);
     }
 }
 
@@ -77,7 +77,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     myUnion.unionFirst = data;
     {
         TwoIntsClass * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_41.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_41.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_41.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_41.cpp	2025-05-05 11:26:03.440360186 +0800
@@ -27,7 +27,7 @@
 static void badSink(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 void bad()
@@ -37,7 +37,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     badSink(data);
 }
 
@@ -49,7 +49,7 @@
 static void goodG2BSink(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_42.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_42.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_42.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_42.cpp	2025-05-05 11:26:03.330357787 +0800
@@ -28,7 +28,7 @@
 {
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     return data;
 }
 
@@ -39,7 +39,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
 {
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_43.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_43.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_43.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_43.cpp	2025-05-05 11:26:03.409359510 +0800
@@ -28,7 +28,7 @@
 {
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 void bad()
@@ -38,7 +38,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -59,7 +59,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -67,7 +67,7 @@
 {
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_44.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_44.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_44.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_44.cpp	2025-05-05 11:26:03.432360012 +0800
@@ -27,7 +27,7 @@
 static void badSink(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -52,7 +52,7 @@
 static void goodG2BSink(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_45.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_45.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_45.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_45.cpp	2025-05-05 11:26:03.399359292 +0800
@@ -32,7 +32,7 @@
 {
     TwoIntsClass * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 void bad()
@@ -42,7 +42,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     badData = data;
     badSink();
 }
@@ -56,7 +56,7 @@
 {
     TwoIntsClass * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_51a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_51a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_51a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_51a.cpp	2025-05-05 11:26:03.399359292 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_51b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_51b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_51b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_51b.cpp	2025-05-05 11:26:03.398359270 +0800
@@ -27,7 +27,7 @@
 void badSink(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_52a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_52a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_52a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_52a.cpp	2025-05-05 11:26:03.405359423 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_52c.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_52c.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_52c.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_52c.cpp	2025-05-05 11:26:03.338357962 +0800
@@ -27,7 +27,7 @@
 void badSink_c(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_c(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_53a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_53a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_53a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_53a.cpp	2025-05-05 11:26:03.325357678 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_53d.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_53d.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_53d.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_53d.cpp	2025-05-05 11:26:03.416359663 +0800
@@ -27,7 +27,7 @@
 void badSink_d(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_d(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_54a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_54a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_54a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_54a.cpp	2025-05-05 11:26:03.410359532 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_54e.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_54e.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_54e.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_54e.cpp	2025-05-05 11:26:03.445360295 +0800
@@ -27,7 +27,7 @@
 void badSink_e(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_e(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_61a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_61a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_61a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_61a.cpp	2025-05-05 11:26:03.409359510 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_61b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_61b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_61b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_61b.cpp	2025-05-05 11:26:03.424359837 +0800
@@ -28,7 +28,7 @@
 {
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     return data;
 }
 
@@ -49,7 +49,7 @@
 {
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_62a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_62a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_62a.cpp	2025-05-05 11:26:03.412359575 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_62b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_62b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_62b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_62b.cpp	2025-05-05 11:26:03.339357984 +0800
@@ -28,7 +28,7 @@
 {
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -47,7 +47,7 @@
 {
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_63a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_63a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_63a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_63a.cpp	2025-05-05 11:26:03.399359292 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_63b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_63b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_63b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_63b.cpp	2025-05-05 11:26:03.426359881 +0800
@@ -28,7 +28,7 @@
 {
     TwoIntsClass * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -40,7 +40,7 @@
 {
     TwoIntsClass * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_64a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_64a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_64a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_64a.cpp	2025-05-05 11:26:03.405359423 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_64b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_64b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_64b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_64b.cpp	2025-05-05 11:26:03.420359750 +0800
@@ -31,7 +31,7 @@
     /* dereference dataPtr into data */
     TwoIntsClass * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -46,7 +46,7 @@
     /* dereference dataPtr into data */
     TwoIntsClass * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_65a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_65a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_65a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_65a.cpp	2025-05-05 11:26:03.417359684 +0800
@@ -36,7 +36,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_65b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_65b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_65b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_65b.cpp	2025-05-05 11:26:03.399359292 +0800
@@ -27,7 +27,7 @@
 void badSink(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_66a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_66a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_66a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_66a.cpp	2025-05-05 11:26:03.422359794 +0800
@@ -35,7 +35,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     /* put data in array */
     dataArray[2] = data;
     badSink(dataArray);
@@ -71,7 +71,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     dataArray[2] = data;
     goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_66b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_66b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_66b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_66b.cpp	2025-05-05 11:26:03.401359336 +0800
@@ -29,7 +29,7 @@
     /* copy data out of dataArray */
     TwoIntsClass * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     TwoIntsClass * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_67a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_67a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_67a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_67a.cpp	2025-05-05 11:26:03.425359859 +0800
@@ -40,7 +40,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     myStruct.structFirst = data;
     badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     myStruct.structFirst = data;
     goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_67b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_67b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_67b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_67b.cpp	2025-05-05 11:26:03.432360012 +0800
@@ -33,7 +33,7 @@
 {
     TwoIntsClass * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -45,7 +45,7 @@
 {
     TwoIntsClass * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_68a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_68a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_68a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_68a.cpp	2025-05-05 11:26:03.417359684 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     badData = data;
     badSink();
 }
@@ -71,7 +71,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_68b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_68b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_68b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_68b.cpp	2025-05-05 11:26:03.444360273 +0800
@@ -32,7 +32,7 @@
 {
     TwoIntsClass * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     TwoIntsClass * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_72a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_72a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_72a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_72a.cpp	2025-05-05 11:26:03.398359270 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_72b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_72b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_72b.cpp	2025-05-05 11:26:03.443360252 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     TwoIntsClass * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     TwoIntsClass * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_73a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_73a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_73a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_73a.cpp	2025-05-05 11:26:03.410359532 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_73b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_73b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_73b.cpp	2025-05-05 11:26:03.413359597 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     TwoIntsClass * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     TwoIntsClass * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_74a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_74a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_74a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_74a.cpp	2025-05-05 11:26:03.424359837 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -79,7 +79,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_74b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_74b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_74b.cpp	2025-05-05 11:26:03.422359794 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     TwoIntsClass * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     TwoIntsClass * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_81a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_81a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_81a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_81a.cpp	2025-05-05 11:26:03.335357896 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     const CWE415_Double_Free__new_delete_array_class_81_base& o = CWE415_Double_Free__new_delete_array_class_81_bad();
     o.action(data);
 }
@@ -59,7 +59,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     const CWE415_Double_Free__new_delete_array_class_81_base& baseObject = CWE415_Double_Free__new_delete_array_class_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_81_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_81_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_81_bad.cpp	2025-05-05 11:26:03.425359859 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_class_81_bad::action(TwoIntsClass * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_81_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_81_goodG2B.cpp	2025-05-05 11:26:03.402359357 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_class_81_goodG2B::action(TwoIntsClass * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_82a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_82a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_82a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_82a.cpp	2025-05-05 11:26:03.429359946 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     CWE415_Double_Free__new_delete_array_class_82_base* baseObject = new CWE415_Double_Free__new_delete_array_class_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -61,7 +61,7 @@
     data = NULL;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
     CWE415_Double_Free__new_delete_array_class_82_base* baseObject = new CWE415_Double_Free__new_delete_array_class_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_82_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_82_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_82_bad.cpp	2025-05-05 11:26:03.409359510 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_class_82_bad::action(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_82_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_82_goodG2B.cpp	2025-05-05 11:26:03.328357744 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_class_82_goodG2B::action(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_83_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_83_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_83_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_83_bad.cpp	2025-05-05 11:26:03.416359663 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 CWE415_Double_Free__new_delete_array_class_83_bad::~CWE415_Double_Free__new_delete_array_class_83_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_83_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_83_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_83_goodB2G.cpp	2025-05-05 11:26:03.323357635 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 CWE415_Double_Free__new_delete_array_class_83_goodB2G::~CWE415_Double_Free__new_delete_array_class_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_83_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_83_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_83_goodG2B.cpp	2025-05-05 11:26:03.327357722 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_array_class_83_goodG2B::~CWE415_Double_Free__new_delete_array_class_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_84_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_84_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_84_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_84_bad.cpp	2025-05-05 11:26:03.339357984 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 CWE415_Double_Free__new_delete_array_class_84_bad::~CWE415_Double_Free__new_delete_array_class_84_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_84_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_84_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_84_goodB2G.cpp	2025-05-05 11:26:03.323357635 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new TwoIntsClass[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 
 CWE415_Double_Free__new_delete_array_class_84_goodB2G::~CWE415_Double_Free__new_delete_array_class_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_84_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_84_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_class_84_goodG2B.cpp	2025-05-05 11:26:03.329357765 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_array_class_84_goodG2B::~CWE415_Double_Free__new_delete_array_class_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_class(data, has_free_array_class);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_01.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_01.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_01.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_01.cpp	2025-05-05 11:26:03.439360164 +0800
@@ -31,9 +31,9 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -49,7 +49,7 @@
     data = new int[100];
     /* FIX: Do NOT delete the array data in the source - the bad sink deletes the array data */
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     /* do nothing */
     /* FIX: Don't attempt to delete the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_02.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_02.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_02.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_02.cpp	2025-05-05 11:26:03.428359924 +0800
@@ -33,12 +33,12 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(1)
     {
@@ -110,7 +110,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -128,7 +128,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_03.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_03.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_03.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_03.cpp	2025-05-05 11:26:03.429359946 +0800
@@ -33,12 +33,12 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(5==5)
     {
@@ -110,7 +110,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -128,7 +128,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_04.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_04.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_04.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_04.cpp	2025-05-05 11:26:03.444360273 +0800
@@ -39,12 +39,12 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -134,7 +134,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_05.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_05.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_05.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_05.cpp	2025-05-05 11:26:03.322357613 +0800
@@ -39,12 +39,12 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(staticTrue)
     {
@@ -116,7 +116,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -134,7 +134,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_06.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_06.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_06.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_06.cpp	2025-05-05 11:26:03.432360012 +0800
@@ -38,12 +38,12 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -115,7 +115,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -133,7 +133,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_07.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_07.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_07.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_07.cpp	2025-05-05 11:26:03.436360099 +0800
@@ -38,12 +38,12 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(staticFive==5)
     {
@@ -115,7 +115,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -133,7 +133,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_08.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_08.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_08.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_08.cpp	2025-05-05 11:26:03.415359641 +0800
@@ -46,12 +46,12 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -69,7 +69,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(staticReturnsTrue())
     {
@@ -123,7 +123,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -141,7 +141,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_09.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_09.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_09.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_09.cpp	2025-05-05 11:26:03.404359401 +0800
@@ -33,12 +33,12 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -110,7 +110,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -128,7 +128,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_10.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_10.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_10.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_10.cpp	2025-05-05 11:26:03.442360229 +0800
@@ -33,12 +33,12 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(globalTrue)
     {
@@ -110,7 +110,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -128,7 +128,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_11.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_11.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_11.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_11.cpp	2025-05-05 11:26:03.437360121 +0800
@@ -32,12 +32,12 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(globalReturnsFalse())
     {
@@ -80,7 +80,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(globalReturnsTrue())
     {
@@ -109,7 +109,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_12.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_12.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_12.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_12.cpp	2025-05-05 11:26:03.337357940 +0800
@@ -32,7 +32,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     else
     {
@@ -68,13 +68,13 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     else
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -111,12 +111,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_13.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_13.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_13.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_13.cpp	2025-05-05 11:26:03.410359532 +0800
@@ -32,12 +32,12 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -109,7 +109,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -127,7 +127,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_14.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_14.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_14.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_14.cpp	2025-05-05 11:26:03.446360317 +0800
@@ -32,12 +32,12 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(globalFive!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     if(globalFive==5)
     {
@@ -109,7 +109,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_15.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_15.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_15.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_15.cpp	2025-05-05 11:26:03.332357831 +0800
@@ -33,7 +33,7 @@
     case 6:
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -44,7 +44,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
     case 6:
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -100,7 +100,7 @@
     case 6:
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -142,7 +142,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -172,7 +172,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_16.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_16.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_16.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_16.cpp	2025-05-05 11:26:03.404359401 +0800
@@ -32,13 +32,13 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
         break;
     }
 }
@@ -57,7 +57,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
         break;
     }
     while(1)
@@ -84,7 +84,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_17.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_17.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_17.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_17.cpp	2025-05-05 11:26:03.331357809 +0800
@@ -33,12 +33,12 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -57,7 +57,7 @@
     {
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
     for(k = 0; k < 1; k++)
     {
@@ -82,7 +82,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_18.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_18.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_18.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_18.cpp	2025-05-05 11:26:03.434360055 +0800
@@ -32,11 +32,11 @@
 source:
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
 source:
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     goto sink;
 sink:
     /* do nothing */
@@ -74,7 +74,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 void good()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_21.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_21.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_21.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_21.cpp	2025-05-05 11:26:03.414359619 +0800
@@ -32,7 +32,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -43,7 +43,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -80,7 +80,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2bStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_22a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_22a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_22a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_22a.cpp	2025-05-05 11:26:03.445360295 +0800
@@ -37,7 +37,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     badGlobal = 1; /* true */
     badSink(data);
 }
@@ -62,7 +62,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     goodB2G1Global = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -77,7 +77,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     goodB2G2Global = 1; /* true */
     goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_22b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_22b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_22b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_22b.cpp	2025-05-05 11:26:03.338357962 +0800
@@ -33,7 +33,7 @@
     if(badGlobal)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -80,7 +80,7 @@
     if(goodG2B1Global)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_31.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_31.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_31.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_31.cpp	2025-05-05 11:26:03.424359837 +0800
@@ -31,12 +31,12 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     {
         int * dataCopy = data;
         int * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -56,7 +56,7 @@
         int * dataCopy = data;
         int * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -68,7 +68,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     {
         int * dataCopy = data;
         int * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_32.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_32.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_32.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_32.cpp	2025-05-05 11:26:03.323357635 +0800
@@ -35,13 +35,13 @@
         int * data = *dataPtr1;
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
         *dataPtr1 = data;
     }
     {
         int * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -66,7 +66,7 @@
     {
         int * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -82,7 +82,7 @@
         int * data = *dataPtr1;
         data = new int[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_33.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_33.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_33.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_33.cpp	2025-05-05 11:26:03.445360295 +0800
@@ -32,11 +32,11 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     {
         int * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         int * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -69,7 +69,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     {
         int * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_34.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_34.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_34.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_34.cpp	2025-05-05 11:26:03.329357765 +0800
@@ -38,12 +38,12 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     myUnion.unionFirst = data;
     {
         int * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -64,7 +64,7 @@
     {
         int * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int(data, has_free_array_int);
     }
 }
 
@@ -77,7 +77,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     myUnion.unionFirst = data;
     {
         int * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_41.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_41.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_41.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_41.cpp	2025-05-05 11:26:03.335357896 +0800
@@ -27,7 +27,7 @@
 static void badSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 void bad()
@@ -37,7 +37,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     badSink(data);
 }
 
@@ -49,7 +49,7 @@
 static void goodG2BSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_42.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_42.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_42.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_42.cpp	2025-05-05 11:26:03.334357874 +0800
@@ -28,7 +28,7 @@
 {
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     return data;
 }
 
@@ -39,7 +39,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
 {
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_43.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_43.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_43.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_43.cpp	2025-05-05 11:26:03.335357896 +0800
@@ -28,7 +28,7 @@
 {
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 void bad()
@@ -38,7 +38,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -59,7 +59,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -67,7 +67,7 @@
 {
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_44.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_44.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_44.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_44.cpp	2025-05-05 11:26:03.419359728 +0800
@@ -27,7 +27,7 @@
 static void badSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -52,7 +52,7 @@
 static void goodG2BSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_45.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_45.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_45.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_45.cpp	2025-05-05 11:26:03.397359248 +0800
@@ -32,7 +32,7 @@
 {
     int * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 void bad()
@@ -42,7 +42,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     badData = data;
     badSink();
 }
@@ -56,7 +56,7 @@
 {
     int * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_51a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_51a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_51a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_51a.cpp	2025-05-05 11:26:03.436360099 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_51b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_51b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_51b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_51b.cpp	2025-05-05 11:26:03.415359641 +0800
@@ -27,7 +27,7 @@
 void badSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_52a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_52a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_52a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_52a.cpp	2025-05-05 11:26:03.324357656 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_52c.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_52c.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_52c.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_52c.cpp	2025-05-05 11:26:03.437360121 +0800
@@ -27,7 +27,7 @@
 void badSink_c(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_c(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_53a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_53a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_53a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_53a.cpp	2025-05-05 11:26:03.440360186 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_53d.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_53d.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_53d.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_53d.cpp	2025-05-05 11:26:03.400359314 +0800
@@ -27,7 +27,7 @@
 void badSink_d(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_d(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_54a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_54a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_54a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_54a.cpp	2025-05-05 11:26:03.406359445 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_54e.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_54e.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_54e.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_54e.cpp	2025-05-05 11:26:03.439360164 +0800
@@ -27,7 +27,7 @@
 void badSink_e(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_e(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_61a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_61a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_61a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_61a.cpp	2025-05-05 11:26:03.395359205 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_61b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_61b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_61b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_61b.cpp	2025-05-05 11:26:03.432360012 +0800
@@ -28,7 +28,7 @@
 {
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     return data;
 }
 
@@ -49,7 +49,7 @@
 {
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_62a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_62a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_62a.cpp	2025-05-05 11:26:03.325357678 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_62b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_62b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_62b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_62b.cpp	2025-05-05 11:26:03.432360012 +0800
@@ -28,7 +28,7 @@
 {
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -47,7 +47,7 @@
 {
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_63a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_63a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_63a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_63a.cpp	2025-05-05 11:26:03.434360055 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_63b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_63b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_63b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_63b.cpp	2025-05-05 11:26:03.394359183 +0800
@@ -28,7 +28,7 @@
 {
     int * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -40,7 +40,7 @@
 {
     int * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_64a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_64a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_64a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_64a.cpp	2025-05-05 11:26:03.413359597 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_64b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_64b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_64b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_64b.cpp	2025-05-05 11:26:03.400359314 +0800
@@ -31,7 +31,7 @@
     /* dereference dataPtr into data */
     int * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -46,7 +46,7 @@
     /* dereference dataPtr into data */
     int * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_01.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_01.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_01.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_01.cpp	2025-05-05 11:26:03.326357700 +0800
@@ -31,9 +31,9 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -49,7 +49,7 @@
     data = new int64_t[100];
     /* FIX: Do NOT delete the array data in the source - the bad sink deletes the array data */
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     /* do nothing */
     /* FIX: Don't attempt to delete the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_02.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_02.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_02.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_02.cpp	2025-05-05 11:26:03.421359772 +0800
@@ -33,12 +33,12 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(1)
     {
@@ -110,7 +110,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -128,7 +128,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_03.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_03.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_03.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_03.cpp	2025-05-05 11:26:03.405359423 +0800
@@ -33,12 +33,12 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(5==5)
     {
@@ -110,7 +110,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -128,7 +128,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_04.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_04.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_04.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_04.cpp	2025-05-05 11:26:03.435360077 +0800
@@ -39,12 +39,12 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -134,7 +134,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_05.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_05.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_05.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_05.cpp	2025-05-05 11:26:03.327357722 +0800
@@ -39,12 +39,12 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(staticTrue)
     {
@@ -116,7 +116,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -134,7 +134,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_06.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_06.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_06.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_06.cpp	2025-05-05 11:26:03.429359946 +0800
@@ -38,12 +38,12 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -115,7 +115,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -133,7 +133,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_07.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_07.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_07.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_07.cpp	2025-05-05 11:26:03.325357678 +0800
@@ -38,12 +38,12 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(staticFive==5)
     {
@@ -115,7 +115,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -133,7 +133,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_08.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_08.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_08.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_08.cpp	2025-05-05 11:26:03.331357809 +0800
@@ -46,12 +46,12 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -69,7 +69,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(staticReturnsTrue())
     {
@@ -123,7 +123,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -141,7 +141,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_09.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_09.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_09.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_09.cpp	2025-05-05 11:26:03.396359226 +0800
@@ -33,12 +33,12 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -110,7 +110,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -128,7 +128,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_10.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_10.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_10.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_10.cpp	2025-05-05 11:26:03.425359859 +0800
@@ -33,12 +33,12 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(globalTrue)
     {
@@ -110,7 +110,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -128,7 +128,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_11.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_11.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_11.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_11.cpp	2025-05-05 11:26:03.404359401 +0800
@@ -32,12 +32,12 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(globalReturnsFalse())
     {
@@ -80,7 +80,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(globalReturnsTrue())
     {
@@ -109,7 +109,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_12.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_12.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_12.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_12.cpp	2025-05-05 11:26:03.408359488 +0800
@@ -32,7 +32,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     else
     {
@@ -68,13 +68,13 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     else
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -111,12 +111,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_13.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_13.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_13.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_13.cpp	2025-05-05 11:26:03.324357656 +0800
@@ -32,12 +32,12 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -109,7 +109,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -127,7 +127,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_14.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_14.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_14.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_14.cpp	2025-05-05 11:26:03.444360273 +0800
@@ -32,12 +32,12 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(globalFive!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     if(globalFive==5)
     {
@@ -109,7 +109,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_15.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_15.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_15.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_15.cpp	2025-05-05 11:26:03.442360229 +0800
@@ -33,7 +33,7 @@
     case 6:
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -44,7 +44,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
     case 6:
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -100,7 +100,7 @@
     case 6:
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -142,7 +142,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -172,7 +172,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_16.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_16.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_16.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_16.cpp	2025-05-05 11:26:03.404359401 +0800
@@ -32,13 +32,13 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
         break;
     }
 }
@@ -57,7 +57,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
         break;
     }
     while(1)
@@ -84,7 +84,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_17.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_17.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_17.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_17.cpp	2025-05-05 11:26:03.414359619 +0800
@@ -33,12 +33,12 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -57,7 +57,7 @@
     {
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
     for(k = 0; k < 1; k++)
     {
@@ -82,7 +82,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_18.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_18.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_18.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_18.cpp	2025-05-05 11:26:03.327357722 +0800
@@ -32,11 +32,11 @@
 source:
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
 source:
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     goto sink;
 sink:
     /* do nothing */
@@ -74,7 +74,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 void good()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_21.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_21.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_21.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_21.cpp	2025-05-05 11:26:03.423359815 +0800
@@ -32,7 +32,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -43,7 +43,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -80,7 +80,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2bStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_22a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_22a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_22a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_22a.cpp	2025-05-05 11:26:03.424359837 +0800
@@ -37,7 +37,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     badGlobal = 1; /* true */
     badSink(data);
 }
@@ -62,7 +62,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     goodB2G1Global = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -77,7 +77,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     goodB2G2Global = 1; /* true */
     goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_22b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_22b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_22b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_22b.cpp	2025-05-05 11:26:03.326357700 +0800
@@ -33,7 +33,7 @@
     if(badGlobal)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -80,7 +80,7 @@
     if(goodG2B1Global)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_31.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_31.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_31.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_31.cpp	2025-05-05 11:26:03.416359663 +0800
@@ -31,12 +31,12 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     {
         int64_t * dataCopy = data;
         int64_t * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -56,7 +56,7 @@
         int64_t * dataCopy = data;
         int64_t * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -68,7 +68,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     {
         int64_t * dataCopy = data;
         int64_t * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_32.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_32.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_32.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_32.cpp	2025-05-05 11:26:03.424359837 +0800
@@ -35,13 +35,13 @@
         int64_t * data = *dataPtr1;
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
         *dataPtr1 = data;
     }
     {
         int64_t * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -66,7 +66,7 @@
     {
         int64_t * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -82,7 +82,7 @@
         int64_t * data = *dataPtr1;
         data = new int64_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_33.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_33.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_33.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_33.cpp	2025-05-05 11:26:03.443360252 +0800
@@ -32,11 +32,11 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     {
         int64_t * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         int64_t * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -69,7 +69,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     {
         int64_t * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_34.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_34.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_34.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_34.cpp	2025-05-05 11:26:03.428359924 +0800
@@ -38,12 +38,12 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     myUnion.unionFirst = data;
     {
         int64_t * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -64,7 +64,7 @@
     {
         int64_t * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_int64(data, has_free_array_int64);
     }
 }
 
@@ -77,7 +77,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     myUnion.unionFirst = data;
     {
         int64_t * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_41.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_41.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_41.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_41.cpp	2025-05-05 11:26:03.408359488 +0800
@@ -27,7 +27,7 @@
 static void badSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 void bad()
@@ -37,7 +37,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     badSink(data);
 }
 
@@ -49,7 +49,7 @@
 static void goodG2BSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_42.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_42.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_42.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_42.cpp	2025-05-05 11:26:03.424359837 +0800
@@ -28,7 +28,7 @@
 {
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     return data;
 }
 
@@ -39,7 +39,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
 {
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_43.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_43.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_43.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_43.cpp	2025-05-05 11:26:03.338357962 +0800
@@ -28,7 +28,7 @@
 {
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 void bad()
@@ -38,7 +38,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -59,7 +59,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -67,7 +67,7 @@
 {
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_44.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_44.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_44.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_44.cpp	2025-05-05 11:26:03.398359270 +0800
@@ -27,7 +27,7 @@
 static void badSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -52,7 +52,7 @@
 static void goodG2BSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_45.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_45.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_45.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_45.cpp	2025-05-05 11:26:03.442360229 +0800
@@ -32,7 +32,7 @@
 {
     int64_t * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 void bad()
@@ -42,7 +42,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     badData = data;
     badSink();
 }
@@ -56,7 +56,7 @@
 {
     int64_t * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_51a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_51a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_51a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_51a.cpp	2025-05-05 11:26:03.432360012 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_51b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_51b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_51b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_51b.cpp	2025-05-05 11:26:03.338357962 +0800
@@ -27,7 +27,7 @@
 void badSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_52a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_52a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_52a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_52a.cpp	2025-05-05 11:26:03.442360229 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_52c.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_52c.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_52c.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_52c.cpp	2025-05-05 11:26:03.427359902 +0800
@@ -27,7 +27,7 @@
 void badSink_c(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_c(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_53a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_53a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_53a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_53a.cpp	2025-05-05 11:26:03.400359314 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_53d.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_53d.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_53d.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_53d.cpp	2025-05-05 11:26:03.405359423 +0800
@@ -27,7 +27,7 @@
 void badSink_d(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_d(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_54a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_54a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_54a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_54a.cpp	2025-05-05 11:26:03.418359706 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_54e.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_54e.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_54e.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_54e.cpp	2025-05-05 11:26:03.402359357 +0800
@@ -27,7 +27,7 @@
 void badSink_e(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_e(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_61a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_61a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_61a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_61a.cpp	2025-05-05 11:26:03.422359794 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_61b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_61b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_61b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_61b.cpp	2025-05-05 11:26:03.339357984 +0800
@@ -28,7 +28,7 @@
 {
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     return data;
 }
 
@@ -49,7 +49,7 @@
 {
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_62a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_62a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_62a.cpp	2025-05-05 11:26:03.336357918 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_62b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_62b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_62b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_62b.cpp	2025-05-05 11:26:03.395359205 +0800
@@ -28,7 +28,7 @@
 {
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -47,7 +47,7 @@
 {
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_63a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_63a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_63a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_63a.cpp	2025-05-05 11:26:03.423359815 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_63b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_63b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_63b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_63b.cpp	2025-05-05 11:26:03.430359968 +0800
@@ -28,7 +28,7 @@
 {
     int64_t * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -40,7 +40,7 @@
 {
     int64_t * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_64a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_64a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_64a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_64a.cpp	2025-05-05 11:26:03.411359554 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_64b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_64b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_64b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_64b.cpp	2025-05-05 11:26:03.336357918 +0800
@@ -31,7 +31,7 @@
     /* dereference dataPtr into data */
     int64_t * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -46,7 +46,7 @@
     /* dereference dataPtr into data */
     int64_t * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_65a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_65a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_65a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_65a.cpp	2025-05-05 11:26:03.396359226 +0800
@@ -36,7 +36,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_65b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_65b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_65b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_65b.cpp	2025-05-05 11:26:03.443360252 +0800
@@ -27,7 +27,7 @@
 void badSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_66a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_66a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_66a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_66a.cpp	2025-05-05 11:26:03.322357613 +0800
@@ -35,7 +35,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     /* put data in array */
     dataArray[2] = data;
     badSink(dataArray);
@@ -71,7 +71,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     dataArray[2] = data;
     goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_66b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_66b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_66b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_66b.cpp	2025-05-05 11:26:03.340358005 +0800
@@ -29,7 +29,7 @@
     /* copy data out of dataArray */
     int64_t * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     int64_t * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_67a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_67a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_67a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_67a.cpp	2025-05-05 11:26:03.419359728 +0800
@@ -40,7 +40,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     myStruct.structFirst = data;
     badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     myStruct.structFirst = data;
     goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_67b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_67b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_67b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_67b.cpp	2025-05-05 11:26:03.331357809 +0800
@@ -33,7 +33,7 @@
 {
     int64_t * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -45,7 +45,7 @@
 {
     int64_t * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_68a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_68a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_68a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_68a.cpp	2025-05-05 11:26:03.429359946 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     badData = data;
     badSink();
 }
@@ -71,7 +71,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_68b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_68b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_68b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_68b.cpp	2025-05-05 11:26:03.393359161 +0800
@@ -32,7 +32,7 @@
 {
     int64_t * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int64_t * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_72a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_72a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_72a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_72a.cpp	2025-05-05 11:26:03.422359794 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_72b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_72b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_72b.cpp	2025-05-05 11:26:03.434360055 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     int64_t * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int64_t * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_73a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_73a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_73a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_73a.cpp	2025-05-05 11:26:03.431359990 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_73b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_73b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_73b.cpp	2025-05-05 11:26:03.402359357 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     int64_t * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int64_t * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_74a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_74a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_74a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_74a.cpp	2025-05-05 11:26:03.336357918 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -79,7 +79,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_74b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_74b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_74b.cpp	2025-05-05 11:26:03.440360186 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     int64_t * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int64_t * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_81a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_81a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_81a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_81a.cpp	2025-05-05 11:26:03.340358005 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     const CWE415_Double_Free__new_delete_array_int64_t_81_base& o = CWE415_Double_Free__new_delete_array_int64_t_81_bad();
     o.action(data);
 }
@@ -59,7 +59,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     const CWE415_Double_Free__new_delete_array_int64_t_81_base& baseObject = CWE415_Double_Free__new_delete_array_int64_t_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_81_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_81_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_81_bad.cpp	2025-05-05 11:26:03.419359728 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_int64_t_81_bad::action(int64_t * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_81_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_81_goodG2B.cpp	2025-05-05 11:26:03.327357722 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_int64_t_81_goodG2B::action(int64_t * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_82a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_82a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_82a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_82a.cpp	2025-05-05 11:26:03.338357962 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     CWE415_Double_Free__new_delete_array_int64_t_82_base* baseObject = new CWE415_Double_Free__new_delete_array_int64_t_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -61,7 +61,7 @@
     data = NULL;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
     CWE415_Double_Free__new_delete_array_int64_t_82_base* baseObject = new CWE415_Double_Free__new_delete_array_int64_t_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_82_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_82_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_82_bad.cpp	2025-05-05 11:26:03.400359314 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_int64_t_82_bad::action(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_82_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_82_goodG2B.cpp	2025-05-05 11:26:03.404359401 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_int64_t_82_goodG2B::action(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_83_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_83_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_83_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_83_bad.cpp	2025-05-05 11:26:03.329357765 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 CWE415_Double_Free__new_delete_array_int64_t_83_bad::~CWE415_Double_Free__new_delete_array_int64_t_83_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_83_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_83_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_83_goodB2G.cpp	2025-05-05 11:26:03.399359292 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 CWE415_Double_Free__new_delete_array_int64_t_83_goodB2G::~CWE415_Double_Free__new_delete_array_int64_t_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_83_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_83_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_83_goodG2B.cpp	2025-05-05 11:26:03.439360164 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_array_int64_t_83_goodG2B::~CWE415_Double_Free__new_delete_array_int64_t_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_84_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_84_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_84_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_84_bad.cpp	2025-05-05 11:26:03.437360121 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 CWE415_Double_Free__new_delete_array_int64_t_84_bad::~CWE415_Double_Free__new_delete_array_int64_t_84_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_84_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_84_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_84_goodB2G.cpp	2025-05-05 11:26:03.395359205 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new int64_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 
 CWE415_Double_Free__new_delete_array_int64_t_84_goodB2G::~CWE415_Double_Free__new_delete_array_int64_t_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_84_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_84_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int64_t_84_goodG2B.cpp	2025-05-05 11:26:03.407359466 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_array_int64_t_84_goodG2B::~CWE415_Double_Free__new_delete_array_int64_t_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int64(data, has_free_array_int64);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_65a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_65a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_65a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_65a.cpp	2025-05-05 11:26:03.437360121 +0800
@@ -36,7 +36,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_65b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_65b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_65b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_65b.cpp	2025-05-05 11:26:03.397359248 +0800
@@ -27,7 +27,7 @@
 void badSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_66a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_66a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_66a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_66a.cpp	2025-05-05 11:26:03.399359292 +0800
@@ -35,7 +35,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     /* put data in array */
     dataArray[2] = data;
     badSink(dataArray);
@@ -71,7 +71,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     dataArray[2] = data;
     goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_66b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_66b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_66b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_66b.cpp	2025-05-05 11:26:03.447360339 +0800
@@ -29,7 +29,7 @@
     /* copy data out of dataArray */
     int * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     int * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_67a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_67a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_67a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_67a.cpp	2025-05-05 11:26:03.336357918 +0800
@@ -40,7 +40,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     myStruct.structFirst = data;
     badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     myStruct.structFirst = data;
     goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_67b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_67b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_67b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_67b.cpp	2025-05-05 11:26:03.427359902 +0800
@@ -33,7 +33,7 @@
 {
     int * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -45,7 +45,7 @@
 {
     int * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_68a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_68a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_68a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_68a.cpp	2025-05-05 11:26:03.418359706 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     badData = data;
     badSink();
 }
@@ -71,7 +71,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_68b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_68b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_68b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_68b.cpp	2025-05-05 11:26:03.330357787 +0800
@@ -32,7 +32,7 @@
 {
     int * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_72a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_72a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_72a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_72a.cpp	2025-05-05 11:26:03.337357940 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_72b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_72b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_72b.cpp	2025-05-05 11:26:03.421359772 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     int * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_73a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_73a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_73a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_73a.cpp	2025-05-05 11:26:03.394359183 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_73b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_73b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_73b.cpp	2025-05-05 11:26:03.429359946 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     int * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_74a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_74a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_74a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_74a.cpp	2025-05-05 11:26:03.325357678 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -79,7 +79,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_74b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_74b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_74b.cpp	2025-05-05 11:26:03.329357765 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     int * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_81a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_81a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_81a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_81a.cpp	2025-05-05 11:26:03.328357744 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     const CWE415_Double_Free__new_delete_array_int_81_base& o = CWE415_Double_Free__new_delete_array_int_81_bad();
     o.action(data);
 }
@@ -59,7 +59,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     const CWE415_Double_Free__new_delete_array_int_81_base& baseObject = CWE415_Double_Free__new_delete_array_int_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_81_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_81_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_81_bad.cpp	2025-05-05 11:26:03.321357591 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_int_81_bad::action(int * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_81_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_81_goodG2B.cpp	2025-05-05 11:26:03.414359619 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_int_81_goodG2B::action(int * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_82a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_82a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_82a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_82a.cpp	2025-05-05 11:26:03.339357984 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     CWE415_Double_Free__new_delete_array_int_82_base* baseObject = new CWE415_Double_Free__new_delete_array_int_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -61,7 +61,7 @@
     data = NULL;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
     CWE415_Double_Free__new_delete_array_int_82_base* baseObject = new CWE415_Double_Free__new_delete_array_int_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_82_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_82_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_82_bad.cpp	2025-05-05 11:26:03.436360099 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_int_82_bad::action(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_82_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_82_goodG2B.cpp	2025-05-05 11:26:03.393359161 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_int_82_goodG2B::action(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_83_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_83_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_83_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_83_bad.cpp	2025-05-05 11:26:03.428359924 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 CWE415_Double_Free__new_delete_array_int_83_bad::~CWE415_Double_Free__new_delete_array_int_83_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_83_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_83_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_83_goodB2G.cpp	2025-05-05 11:26:03.410359532 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 CWE415_Double_Free__new_delete_array_int_83_goodB2G::~CWE415_Double_Free__new_delete_array_int_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_83_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_83_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_83_goodG2B.cpp	2025-05-05 11:26:03.440360186 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_array_int_83_goodG2B::~CWE415_Double_Free__new_delete_array_int_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_84_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_84_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_84_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_84_bad.cpp	2025-05-05 11:26:03.334357874 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 CWE415_Double_Free__new_delete_array_int_84_bad::~CWE415_Double_Free__new_delete_array_int_84_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_84_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_84_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_84_goodB2G.cpp	2025-05-05 11:26:03.334357874 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new int[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 
 CWE415_Double_Free__new_delete_array_int_84_goodB2G::~CWE415_Double_Free__new_delete_array_int_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_84_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_84_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_int_84_goodG2B.cpp	2025-05-05 11:26:03.435360077 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_array_int_84_goodG2B::~CWE415_Double_Free__new_delete_array_int_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_int(data, has_free_array_int);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_01.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_01.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_01.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_01.cpp	2025-05-05 11:26:03.440360186 +0800
@@ -31,9 +31,9 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -49,7 +49,7 @@
     data = new long[100];
     /* FIX: Do NOT delete the array data in the source - the bad sink deletes the array data */
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     /* do nothing */
     /* FIX: Don't attempt to delete the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_02.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_02.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_02.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_02.cpp	2025-05-05 11:26:03.335357896 +0800
@@ -33,12 +33,12 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(1)
     {
@@ -110,7 +110,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -128,7 +128,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_03.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_03.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_03.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_03.cpp	2025-05-05 11:26:03.393359161 +0800
@@ -33,12 +33,12 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(5==5)
     {
@@ -110,7 +110,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -128,7 +128,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_04.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_04.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_04.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_04.cpp	2025-05-05 11:26:03.419359728 +0800
@@ -39,12 +39,12 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -134,7 +134,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_05.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_05.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_05.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_05.cpp	2025-05-05 11:26:03.334357874 +0800
@@ -39,12 +39,12 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(staticTrue)
     {
@@ -116,7 +116,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -134,7 +134,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_06.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_06.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_06.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_06.cpp	2025-05-05 11:26:03.402359357 +0800
@@ -38,12 +38,12 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -115,7 +115,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -133,7 +133,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_07.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_07.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_07.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_07.cpp	2025-05-05 11:26:03.328357744 +0800
@@ -38,12 +38,12 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(staticFive==5)
     {
@@ -115,7 +115,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -133,7 +133,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_08.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_08.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_08.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_08.cpp	2025-05-05 11:26:03.433360033 +0800
@@ -46,12 +46,12 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -69,7 +69,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(staticReturnsTrue())
     {
@@ -123,7 +123,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -141,7 +141,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_09.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_09.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_09.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_09.cpp	2025-05-05 11:26:03.424359837 +0800
@@ -33,12 +33,12 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -110,7 +110,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -128,7 +128,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_10.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_10.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_10.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_10.cpp	2025-05-05 11:26:03.403359379 +0800
@@ -33,12 +33,12 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(globalTrue)
     {
@@ -110,7 +110,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -128,7 +128,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_11.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_11.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_11.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_11.cpp	2025-05-05 11:26:03.415359641 +0800
@@ -32,12 +32,12 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(globalReturnsFalse())
     {
@@ -80,7 +80,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(globalReturnsTrue())
     {
@@ -109,7 +109,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_12.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_12.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_12.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_12.cpp	2025-05-05 11:26:03.438360142 +0800
@@ -32,7 +32,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     else
     {
@@ -68,13 +68,13 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     else
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -111,12 +111,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_13.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_13.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_13.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_13.cpp	2025-05-05 11:26:03.337357940 +0800
@@ -32,12 +32,12 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -109,7 +109,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -127,7 +127,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_14.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_14.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_14.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_14.cpp	2025-05-05 11:26:03.431359990 +0800
@@ -32,12 +32,12 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(globalFive!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     if(globalFive==5)
     {
@@ -109,7 +109,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_15.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_15.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_15.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_15.cpp	2025-05-05 11:26:03.338357962 +0800
@@ -33,7 +33,7 @@
     case 6:
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -44,7 +44,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
     case 6:
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -100,7 +100,7 @@
     case 6:
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -142,7 +142,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -172,7 +172,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_16.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_16.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_16.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_16.cpp	2025-05-05 11:26:03.436360099 +0800
@@ -32,13 +32,13 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
         break;
     }
 }
@@ -57,7 +57,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
         break;
     }
     while(1)
@@ -84,7 +84,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_17.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_17.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_17.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_17.cpp	2025-05-05 11:26:03.425359859 +0800
@@ -33,12 +33,12 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -57,7 +57,7 @@
     {
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
     for(k = 0; k < 1; k++)
     {
@@ -82,7 +82,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_18.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_18.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_18.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_18.cpp	2025-05-05 11:26:03.336357918 +0800
@@ -32,11 +32,11 @@
 source:
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
 source:
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     goto sink;
 sink:
     /* do nothing */
@@ -74,7 +74,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 void good()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_21.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_21.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_21.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_21.cpp	2025-05-05 11:26:03.399359292 +0800
@@ -32,7 +32,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -43,7 +43,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -80,7 +80,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2bStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_22a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_22a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_22a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_22a.cpp	2025-05-05 11:26:03.325357678 +0800
@@ -37,7 +37,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     badGlobal = 1; /* true */
     badSink(data);
 }
@@ -62,7 +62,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     goodB2G1Global = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -77,7 +77,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     goodB2G2Global = 1; /* true */
     goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_22b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_22b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_22b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_22b.cpp	2025-05-05 11:26:03.399359292 +0800
@@ -33,7 +33,7 @@
     if(badGlobal)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -80,7 +80,7 @@
     if(goodG2B1Global)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_31.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_31.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_31.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_31.cpp	2025-05-05 11:26:03.427359902 +0800
@@ -31,12 +31,12 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     {
         long * dataCopy = data;
         long * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -56,7 +56,7 @@
         long * dataCopy = data;
         long * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -68,7 +68,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     {
         long * dataCopy = data;
         long * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_32.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_32.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_32.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_32.cpp	2025-05-05 11:26:03.424359837 +0800
@@ -35,13 +35,13 @@
         long * data = *dataPtr1;
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
         *dataPtr1 = data;
     }
     {
         long * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -66,7 +66,7 @@
     {
         long * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -82,7 +82,7 @@
         long * data = *dataPtr1;
         data = new long[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_33.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_33.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_33.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_33.cpp	2025-05-05 11:26:03.332357831 +0800
@@ -32,11 +32,11 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     {
         long * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         long * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -69,7 +69,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     {
         long * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_34.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_34.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_34.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_34.cpp	2025-05-05 11:26:03.328357744 +0800
@@ -38,12 +38,12 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     myUnion.unionFirst = data;
     {
         long * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -64,7 +64,7 @@
     {
         long * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_long(data, has_free_array_long);
     }
 }
 
@@ -77,7 +77,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     myUnion.unionFirst = data;
     {
         long * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_41.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_41.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_41.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_41.cpp	2025-05-05 11:26:03.321357591 +0800
@@ -27,7 +27,7 @@
 static void badSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 void bad()
@@ -37,7 +37,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     badSink(data);
 }
 
@@ -49,7 +49,7 @@
 static void goodG2BSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_42.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_42.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_42.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_42.cpp	2025-05-05 11:26:03.442360229 +0800
@@ -28,7 +28,7 @@
 {
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     return data;
 }
 
@@ -39,7 +39,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
 {
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_43.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_43.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_43.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_43.cpp	2025-05-05 11:26:03.396359226 +0800
@@ -28,7 +28,7 @@
 {
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 void bad()
@@ -38,7 +38,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -59,7 +59,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -67,7 +67,7 @@
 {
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_44.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_44.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_44.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_44.cpp	2025-05-05 11:26:03.427359902 +0800
@@ -27,7 +27,7 @@
 static void badSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -52,7 +52,7 @@
 static void goodG2BSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_45.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_45.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_45.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_45.cpp	2025-05-05 11:26:03.444360273 +0800
@@ -32,7 +32,7 @@
 {
     long * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 void bad()
@@ -42,7 +42,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     badData = data;
     badSink();
 }
@@ -56,7 +56,7 @@
 {
     long * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_51a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_51a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_51a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_51a.cpp	2025-05-05 11:26:03.427359902 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_51b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_51b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_51b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_51b.cpp	2025-05-05 11:26:03.417359684 +0800
@@ -27,7 +27,7 @@
 void badSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_52a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_52a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_52a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_52a.cpp	2025-05-05 11:26:03.325357678 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_52c.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_52c.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_52c.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_52c.cpp	2025-05-05 11:26:03.404359401 +0800
@@ -27,7 +27,7 @@
 void badSink_c(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_c(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_53a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_53a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_53a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_53a.cpp	2025-05-05 11:26:03.326357700 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_53d.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_53d.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_53d.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_53d.cpp	2025-05-05 11:26:03.398359270 +0800
@@ -27,7 +27,7 @@
 void badSink_d(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_d(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_54a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_54a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_54a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_54a.cpp	2025-05-05 11:26:03.414359619 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_54e.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_54e.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_54e.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_54e.cpp	2025-05-05 11:26:03.437360121 +0800
@@ -27,7 +27,7 @@
 void badSink_e(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_e(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_61a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_61a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_61a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_61a.cpp	2025-05-05 11:26:03.405359423 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_61b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_61b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_61b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_61b.cpp	2025-05-05 11:26:03.409359510 +0800
@@ -28,7 +28,7 @@
 {
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     return data;
 }
 
@@ -49,7 +49,7 @@
 {
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_62a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_62a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_62a.cpp	2025-05-05 11:26:03.322357613 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_62b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_62b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_62b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_62b.cpp	2025-05-05 11:26:03.409359510 +0800
@@ -28,7 +28,7 @@
 {
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -47,7 +47,7 @@
 {
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_63a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_63a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_63a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_63a.cpp	2025-05-05 11:26:03.328357744 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_63b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_63b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_63b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_63b.cpp	2025-05-05 11:26:03.403359379 +0800
@@ -28,7 +28,7 @@
 {
     long * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -40,7 +40,7 @@
 {
     long * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_64a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_64a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_64a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_64a.cpp	2025-05-05 11:26:03.393359161 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_64b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_64b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_64b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_64b.cpp	2025-05-05 11:26:03.399359292 +0800
@@ -31,7 +31,7 @@
     /* dereference dataPtr into data */
     long * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -46,7 +46,7 @@
     /* dereference dataPtr into data */
     long * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_65a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_65a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_65a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_65a.cpp	2025-05-05 11:26:03.339357984 +0800
@@ -36,7 +36,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_65b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_65b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_65b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_65b.cpp	2025-05-05 11:26:03.413359597 +0800
@@ -27,7 +27,7 @@
 void badSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_66a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_66a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_66a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_66a.cpp	2025-05-05 11:26:03.396359226 +0800
@@ -35,7 +35,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     /* put data in array */
     dataArray[2] = data;
     badSink(dataArray);
@@ -71,7 +71,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     dataArray[2] = data;
     goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_66b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_66b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_66b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_66b.cpp	2025-05-05 11:26:03.412359575 +0800
@@ -29,7 +29,7 @@
     /* copy data out of dataArray */
     long * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     long * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_67a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_67a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_67a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_67a.cpp	2025-05-05 11:26:03.446360317 +0800
@@ -40,7 +40,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     myStruct.structFirst = data;
     badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     myStruct.structFirst = data;
     goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_67b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_67b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_67b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_67b.cpp	2025-05-05 11:26:03.326357700 +0800
@@ -33,7 +33,7 @@
 {
     long * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -45,7 +45,7 @@
 {
     long * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_68a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_68a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_68a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_68a.cpp	2025-05-05 11:26:03.433360033 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     badData = data;
     badSink();
 }
@@ -71,7 +71,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_68b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_68b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_68b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_68b.cpp	2025-05-05 11:26:03.431359990 +0800
@@ -32,7 +32,7 @@
 {
     long * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     long * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_72a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_72a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_72a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_72a.cpp	2025-05-05 11:26:03.426359881 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_72b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_72b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_72b.cpp	2025-05-05 11:26:03.433360033 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     long * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     long * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_73a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_73a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_73a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_73a.cpp	2025-05-05 11:26:03.408359488 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_73b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_73b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_73b.cpp	2025-05-05 11:26:03.426359881 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     long * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     long * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_74a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_74a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_74a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_74a.cpp	2025-05-05 11:26:03.419359728 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -79,7 +79,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_74b.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_74b.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_74b.cpp	2025-05-05 11:26:03.432360012 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     long * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     long * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_81a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_81a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_81a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_81a.cpp	2025-05-05 11:26:03.332357831 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     const CWE415_Double_Free__new_delete_array_long_81_base& o = CWE415_Double_Free__new_delete_array_long_81_bad();
     o.action(data);
 }
@@ -59,7 +59,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     const CWE415_Double_Free__new_delete_array_long_81_base& baseObject = CWE415_Double_Free__new_delete_array_long_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_81_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_81_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_81_bad.cpp	2025-05-05 11:26:03.333357853 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_long_81_bad::action(long * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_81_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_81_goodG2B.cpp	2025-05-05 11:26:03.328357744 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_long_81_goodG2B::action(long * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_82a.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_82a.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_82a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_82a.cpp	2025-05-05 11:26:03.406359445 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     CWE415_Double_Free__new_delete_array_long_82_base* baseObject = new CWE415_Double_Free__new_delete_array_long_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -61,7 +61,7 @@
     data = NULL;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
     CWE415_Double_Free__new_delete_array_long_82_base* baseObject = new CWE415_Double_Free__new_delete_array_long_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_82_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_82_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_82_bad.cpp	2025-05-05 11:26:03.430359968 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_long_82_bad::action(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_82_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_82_goodG2B.cpp	2025-05-05 11:26:03.324357656 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_long_82_goodG2B::action(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_83_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_83_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_83_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_83_bad.cpp	2025-05-05 11:26:03.435360077 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 CWE415_Double_Free__new_delete_array_long_83_bad::~CWE415_Double_Free__new_delete_array_long_83_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_83_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_83_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_83_goodB2G.cpp	2025-05-05 11:26:03.406359445 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 CWE415_Double_Free__new_delete_array_long_83_goodB2G::~CWE415_Double_Free__new_delete_array_long_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_83_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_83_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_83_goodG2B.cpp	2025-05-05 11:26:03.408359488 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_array_long_83_goodG2B::~CWE415_Double_Free__new_delete_array_long_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_84_bad.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_84_bad.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_84_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_84_bad.cpp	2025-05-05 11:26:03.442360229 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 CWE415_Double_Free__new_delete_array_long_84_bad::~CWE415_Double_Free__new_delete_array_long_84_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_84_goodB2G.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_84_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_84_goodB2G.cpp	2025-05-05 11:26:03.339357984 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new long[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 
 CWE415_Double_Free__new_delete_array_long_84_goodB2G::~CWE415_Double_Free__new_delete_array_long_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_84_goodG2B.cpp refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_84_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s01/CWE415_Double_Free__new_delete_array_long_84_goodG2B.cpp	2025-05-05 11:26:03.337357940 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_array_long_84_goodG2B::~CWE415_Double_Free__new_delete_array_long_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_long(data, has_free_array_long);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_01.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_01.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_01.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_01.cpp	2025-05-05 11:26:03.448360360 +0800
@@ -31,9 +31,9 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -49,7 +49,7 @@
     data = new twoIntsStruct[100];
     /* FIX: Do NOT delete the array data in the source - the bad sink deletes the array data */
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     /* do nothing */
     /* FIX: Don't attempt to delete the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_02.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_02.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_02.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_02.cpp	2025-05-05 11:26:03.594363544 +0800
@@ -33,12 +33,12 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(1)
     {
@@ -110,7 +110,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -128,7 +128,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_03.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_03.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_03.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_03.cpp	2025-05-05 11:26:03.622364155 +0800
@@ -33,12 +33,12 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(5==5)
     {
@@ -110,7 +110,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -128,7 +128,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_04.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_04.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_04.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_04.cpp	2025-05-05 11:26:03.607363828 +0800
@@ -39,12 +39,12 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -134,7 +134,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_05.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_05.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_05.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_05.cpp	2025-05-05 11:26:03.598363632 +0800
@@ -39,12 +39,12 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(staticTrue)
     {
@@ -116,7 +116,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -134,7 +134,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_06.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_06.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_06.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_06.cpp	2025-05-05 11:26:03.618364068 +0800
@@ -38,12 +38,12 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -115,7 +115,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -133,7 +133,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_07.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_07.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_07.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_07.cpp	2025-05-05 11:26:03.626364242 +0800
@@ -38,12 +38,12 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(staticFive==5)
     {
@@ -115,7 +115,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -133,7 +133,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_08.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_08.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_08.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_08.cpp	2025-05-05 11:26:03.620364111 +0800
@@ -46,12 +46,12 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -69,7 +69,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(staticReturnsTrue())
     {
@@ -123,7 +123,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -141,7 +141,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_09.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_09.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_09.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_09.cpp	2025-05-05 11:26:03.628364286 +0800
@@ -33,12 +33,12 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -110,7 +110,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -128,7 +128,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_10.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_10.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_10.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_10.cpp	2025-05-05 11:26:03.450360404 +0800
@@ -33,12 +33,12 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(globalTrue)
     {
@@ -110,7 +110,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -128,7 +128,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_11.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_11.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_11.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_11.cpp	2025-05-05 11:26:03.615364002 +0800
@@ -32,12 +32,12 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(globalReturnsFalse())
     {
@@ -80,7 +80,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(globalReturnsTrue())
     {
@@ -109,7 +109,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_12.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_12.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_12.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_12.cpp	2025-05-05 11:26:03.582363283 +0800
@@ -32,7 +32,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     else
     {
@@ -68,13 +68,13 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     else
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -111,12 +111,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_13.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_13.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_13.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_13.cpp	2025-05-05 11:26:03.604363762 +0800
@@ -32,12 +32,12 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -109,7 +109,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -127,7 +127,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_14.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_14.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_14.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_14.cpp	2025-05-05 11:26:03.639364526 +0800
@@ -32,12 +32,12 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(globalFive!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     if(globalFive==5)
     {
@@ -109,7 +109,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_15.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_15.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_15.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_15.cpp	2025-05-05 11:26:03.624364199 +0800
@@ -33,7 +33,7 @@
     case 6:
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -44,7 +44,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
     case 6:
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -100,7 +100,7 @@
     case 6:
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -142,7 +142,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -172,7 +172,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_16.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_16.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_16.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_16.cpp	2025-05-05 11:26:03.598363632 +0800
@@ -32,13 +32,13 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
         break;
     }
 }
@@ -57,7 +57,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
         break;
     }
     while(1)
@@ -84,7 +84,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_17.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_17.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_17.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_17.cpp	2025-05-05 11:26:03.592363501 +0800
@@ -33,12 +33,12 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -57,7 +57,7 @@
     {
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
     for(k = 0; k < 1; k++)
     {
@@ -82,7 +82,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_18.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_18.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_18.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_18.cpp	2025-05-05 11:26:03.607363828 +0800
@@ -32,11 +32,11 @@
 source:
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
 source:
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     goto sink;
 sink:
     /* do nothing */
@@ -74,7 +74,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 void good()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_21.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_21.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_21.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_21.cpp	2025-05-05 11:26:03.612363937 +0800
@@ -32,7 +32,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -43,7 +43,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -80,7 +80,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2bStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_22a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_22a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_22a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_22a.cpp	2025-05-05 11:26:03.628364286 +0800
@@ -37,7 +37,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     badGlobal = 1; /* true */
     badSink(data);
 }
@@ -62,7 +62,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     goodB2G1Global = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -77,7 +77,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     goodB2G2Global = 1; /* true */
     goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_22b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_22b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_22b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_22b.cpp	2025-05-05 11:26:03.594363544 +0800
@@ -33,7 +33,7 @@
     if(badGlobal)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -80,7 +80,7 @@
     if(goodG2B1Global)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_31.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_31.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_31.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_31.cpp	2025-05-05 11:26:03.636364460 +0800
@@ -31,12 +31,12 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     {
         twoIntsStruct * dataCopy = data;
         twoIntsStruct * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -56,7 +56,7 @@
         twoIntsStruct * dataCopy = data;
         twoIntsStruct * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -68,7 +68,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     {
         twoIntsStruct * dataCopy = data;
         twoIntsStruct * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_32.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_32.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_32.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_32.cpp	2025-05-05 11:26:03.601363697 +0800
@@ -35,13 +35,13 @@
         twoIntsStruct * data = *dataPtr1;
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
         *dataPtr1 = data;
     }
     {
         twoIntsStruct * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -66,7 +66,7 @@
     {
         twoIntsStruct * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -82,7 +82,7 @@
         twoIntsStruct * data = *dataPtr1;
         data = new twoIntsStruct[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_33.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_33.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_33.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_33.cpp	2025-05-05 11:26:03.588363414 +0800
@@ -32,11 +32,11 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     {
         twoIntsStruct * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         twoIntsStruct * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -69,7 +69,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     {
         twoIntsStruct * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_34.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_34.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_34.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_34.cpp	2025-05-05 11:26:03.603363741 +0800
@@ -38,12 +38,12 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     myUnion.unionFirst = data;
     {
         twoIntsStruct * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -64,7 +64,7 @@
     {
         twoIntsStruct * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_struct(data, has_free_array_struct);
     }
 }
 
@@ -77,7 +77,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     myUnion.unionFirst = data;
     {
         twoIntsStruct * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_41.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_41.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_41.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_41.cpp	2025-05-05 11:26:03.583363304 +0800
@@ -27,7 +27,7 @@
 static void badSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 void bad()
@@ -37,7 +37,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     badSink(data);
 }
 
@@ -49,7 +49,7 @@
 static void goodG2BSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_42.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_42.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_42.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_42.cpp	2025-05-05 11:26:03.617364046 +0800
@@ -28,7 +28,7 @@
 {
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     return data;
 }
 
@@ -39,7 +39,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
 {
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_43.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_43.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_43.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_43.cpp	2025-05-05 11:26:03.580363239 +0800
@@ -28,7 +28,7 @@
 {
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 void bad()
@@ -38,7 +38,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -59,7 +59,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -67,7 +67,7 @@
 {
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_44.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_44.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_44.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_44.cpp	2025-05-05 11:26:03.619364090 +0800
@@ -27,7 +27,7 @@
 static void badSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -52,7 +52,7 @@
 static void goodG2BSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_45.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_45.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_45.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_45.cpp	2025-05-05 11:26:03.585363348 +0800
@@ -32,7 +32,7 @@
 {
     twoIntsStruct * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 void bad()
@@ -42,7 +42,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     badData = data;
     badSink();
 }
@@ -56,7 +56,7 @@
 {
     twoIntsStruct * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_51a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_51a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_51a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_51a.cpp	2025-05-05 11:26:03.600363675 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_51b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_51b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_51b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_51b.cpp	2025-05-05 11:26:03.614363980 +0800
@@ -27,7 +27,7 @@
 void badSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_52a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_52a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_52a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_52a.cpp	2025-05-05 11:26:03.633364395 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_52c.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_52c.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_52c.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_52c.cpp	2025-05-05 11:26:03.581363261 +0800
@@ -27,7 +27,7 @@
 void badSink_c(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_c(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_53a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_53a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_53a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_53a.cpp	2025-05-05 11:26:03.598363632 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_53d.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_53d.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_53d.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_53d.cpp	2025-05-05 11:26:03.590363457 +0800
@@ -27,7 +27,7 @@
 void badSink_d(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_d(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_54a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_54a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_54a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_54a.cpp	2025-05-05 11:26:03.628364286 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_54e.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_54e.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_54e.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_54e.cpp	2025-05-05 11:26:03.639364526 +0800
@@ -27,7 +27,7 @@
 void badSink_e(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_e(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_61a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_61a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_61a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_61a.cpp	2025-05-05 11:26:03.625364220 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_61b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_61b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_61b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_61b.cpp	2025-05-05 11:26:03.586363370 +0800
@@ -28,7 +28,7 @@
 {
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     return data;
 }
 
@@ -49,7 +49,7 @@
 {
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_62a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_62a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_62a.cpp	2025-05-05 11:26:03.628364286 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_62b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_62b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_62b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_62b.cpp	2025-05-05 11:26:03.637364482 +0800
@@ -28,7 +28,7 @@
 {
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -47,7 +47,7 @@
 {
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_63a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_63a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_63a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_63a.cpp	2025-05-05 11:26:03.600363675 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_63b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_63b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_63b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_63b.cpp	2025-05-05 11:26:03.625364220 +0800
@@ -28,7 +28,7 @@
 {
     twoIntsStruct * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -40,7 +40,7 @@
 {
     twoIntsStruct * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_64a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_64a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_64a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_64a.cpp	2025-05-05 11:26:03.609363872 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_64b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_64b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_64b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_64b.cpp	2025-05-05 11:26:03.449360382 +0800
@@ -31,7 +31,7 @@
     /* dereference dataPtr into data */
     twoIntsStruct * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -46,7 +46,7 @@
     /* dereference dataPtr into data */
     twoIntsStruct * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_65a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_65a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_65a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_65a.cpp	2025-05-05 11:26:03.615364002 +0800
@@ -36,7 +36,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_65b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_65b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_65b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_65b.cpp	2025-05-05 11:26:03.633364395 +0800
@@ -27,7 +27,7 @@
 void badSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_66a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_66a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_66a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_66a.cpp	2025-05-05 11:26:03.581363261 +0800
@@ -35,7 +35,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     /* put data in array */
     dataArray[2] = data;
     badSink(dataArray);
@@ -71,7 +71,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     dataArray[2] = data;
     goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_66b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_66b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_66b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_66b.cpp	2025-05-05 11:26:03.590363457 +0800
@@ -29,7 +29,7 @@
     /* copy data out of dataArray */
     twoIntsStruct * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     twoIntsStruct * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_67a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_67a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_67a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_67a.cpp	2025-05-05 11:26:03.450360404 +0800
@@ -40,7 +40,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     myStruct.structFirst = data;
     badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     myStruct.structFirst = data;
     goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_67b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_67b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_67b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_67b.cpp	2025-05-05 11:26:03.616364024 +0800
@@ -33,7 +33,7 @@
 {
     twoIntsStruct * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -45,7 +45,7 @@
 {
     twoIntsStruct * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_68a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_68a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_68a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_68a.cpp	2025-05-05 11:26:03.632364373 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     badData = data;
     badSink();
 }
@@ -71,7 +71,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_68b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_68b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_68b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_68b.cpp	2025-05-05 11:26:03.623364177 +0800
@@ -32,7 +32,7 @@
 {
     twoIntsStruct * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     twoIntsStruct * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_72a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_72a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_72a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_72a.cpp	2025-05-05 11:26:03.623364177 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_72b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_72b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_72b.cpp	2025-05-05 11:26:03.583363304 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     twoIntsStruct * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     twoIntsStruct * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_73a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_73a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_73a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_73a.cpp	2025-05-05 11:26:03.612363937 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_73b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_73b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_73b.cpp	2025-05-05 11:26:03.623364177 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     twoIntsStruct * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     twoIntsStruct * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_74a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_74a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_74a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_74a.cpp	2025-05-05 11:26:03.605363784 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -79,7 +79,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_74b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_74b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_74b.cpp	2025-05-05 11:26:03.620364111 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     twoIntsStruct * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     twoIntsStruct * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_81a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_81a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_81a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_81a.cpp	2025-05-05 11:26:03.602363719 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     const CWE415_Double_Free__new_delete_array_struct_81_base& o = CWE415_Double_Free__new_delete_array_struct_81_bad();
     o.action(data);
 }
@@ -59,7 +59,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     const CWE415_Double_Free__new_delete_array_struct_81_base& baseObject = CWE415_Double_Free__new_delete_array_struct_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_81_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_81_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_81_bad.cpp	2025-05-05 11:26:03.625364220 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_struct_81_bad::action(twoIntsStruct * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_81_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_81_goodG2B.cpp	2025-05-05 11:26:03.599363653 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_struct_81_goodG2B::action(twoIntsStruct * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_82a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_82a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_82a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_82a.cpp	2025-05-05 11:26:03.630364329 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     CWE415_Double_Free__new_delete_array_struct_82_base* baseObject = new CWE415_Double_Free__new_delete_array_struct_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -61,7 +61,7 @@
     data = NULL;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
     CWE415_Double_Free__new_delete_array_struct_82_base* baseObject = new CWE415_Double_Free__new_delete_array_struct_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_82_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_82_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_82_bad.cpp	2025-05-05 11:26:03.595363566 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_struct_82_bad::action(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_82_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_82_goodG2B.cpp	2025-05-05 11:26:03.638364504 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_struct_82_goodG2B::action(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_83_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_83_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_83_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_83_bad.cpp	2025-05-05 11:26:03.596363588 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 CWE415_Double_Free__new_delete_array_struct_83_bad::~CWE415_Double_Free__new_delete_array_struct_83_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_83_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_83_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_83_goodB2G.cpp	2025-05-05 11:26:03.635364438 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 CWE415_Double_Free__new_delete_array_struct_83_goodB2G::~CWE415_Double_Free__new_delete_array_struct_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_83_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_83_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_83_goodG2B.cpp	2025-05-05 11:26:03.450360404 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_array_struct_83_goodG2B::~CWE415_Double_Free__new_delete_array_struct_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_84_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_84_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_84_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_84_bad.cpp	2025-05-05 11:26:03.622364155 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 CWE415_Double_Free__new_delete_array_struct_84_bad::~CWE415_Double_Free__new_delete_array_struct_84_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_84_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_84_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_84_goodB2G.cpp	2025-05-05 11:26:03.608363850 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new twoIntsStruct[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 
 CWE415_Double_Free__new_delete_array_struct_84_goodB2G::~CWE415_Double_Free__new_delete_array_struct_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_84_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_84_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_struct_84_goodG2B.cpp	2025-05-05 11:26:03.593363523 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_array_struct_84_goodG2B::~CWE415_Double_Free__new_delete_array_struct_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_struct(data, has_free_array_struct);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_01.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_01.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_01.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_01.cpp	2025-05-05 11:26:03.584363326 +0800
@@ -31,9 +31,9 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -49,7 +49,7 @@
     data = new wchar_t[100];
     /* FIX: Do NOT delete the array data in the source - the bad sink deletes the array data */
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     /* do nothing */
     /* FIX: Don't attempt to delete the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_02.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_02.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_02.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_02.cpp	2025-05-05 11:26:03.623364177 +0800
@@ -33,12 +33,12 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(1)
     {
@@ -110,7 +110,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -128,7 +128,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_03.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_03.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_03.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_03.cpp	2025-05-05 11:26:03.629364308 +0800
@@ -33,12 +33,12 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(5==5)
     {
@@ -110,7 +110,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -128,7 +128,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_04.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_04.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_04.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_04.cpp	2025-05-05 11:26:03.585363348 +0800
@@ -39,12 +39,12 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -134,7 +134,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_05.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_05.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_05.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_05.cpp	2025-05-05 11:26:03.589363435 +0800
@@ -39,12 +39,12 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(staticTrue)
     {
@@ -116,7 +116,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -134,7 +134,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_06.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_06.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_06.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_06.cpp	2025-05-05 11:26:03.583363304 +0800
@@ -38,12 +38,12 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -115,7 +115,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -133,7 +133,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_07.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_07.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_07.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_07.cpp	2025-05-05 11:26:03.637364482 +0800
@@ -38,12 +38,12 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(staticFive==5)
     {
@@ -115,7 +115,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -133,7 +133,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_08.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_08.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_08.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_08.cpp	2025-05-05 11:26:03.633364395 +0800
@@ -46,12 +46,12 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -69,7 +69,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(staticReturnsTrue())
     {
@@ -123,7 +123,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -141,7 +141,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_09.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_09.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_09.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_09.cpp	2025-05-05 11:26:03.607363828 +0800
@@ -33,12 +33,12 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -110,7 +110,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -128,7 +128,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_10.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_10.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_10.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_10.cpp	2025-05-05 11:26:03.596363588 +0800
@@ -33,12 +33,12 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(globalTrue)
     {
@@ -110,7 +110,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -128,7 +128,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_11.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_11.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_11.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_11.cpp	2025-05-05 11:26:03.618364068 +0800
@@ -32,12 +32,12 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(globalReturnsFalse())
     {
@@ -80,7 +80,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(globalReturnsTrue())
     {
@@ -109,7 +109,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_12.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_12.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_12.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_12.cpp	2025-05-05 11:26:03.621364133 +0800
@@ -32,7 +32,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     else
     {
@@ -68,13 +68,13 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     else
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -111,12 +111,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_13.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_13.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_13.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_13.cpp	2025-05-05 11:26:03.594363544 +0800
@@ -32,12 +32,12 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -109,7 +109,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -127,7 +127,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_14.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_14.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_14.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_14.cpp	2025-05-05 11:26:03.629364308 +0800
@@ -32,12 +32,12 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(globalFive!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     if(globalFive==5)
     {
@@ -109,7 +109,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_15.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_15.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_15.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_15.cpp	2025-05-05 11:26:03.631364351 +0800
@@ -33,7 +33,7 @@
     case 6:
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -44,7 +44,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
     case 6:
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -100,7 +100,7 @@
     case 6:
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -142,7 +142,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -172,7 +172,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_16.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_16.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_16.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_16.cpp	2025-05-05 11:26:03.622364155 +0800
@@ -32,13 +32,13 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
         break;
     }
 }
@@ -57,7 +57,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
         break;
     }
     while(1)
@@ -84,7 +84,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_17.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_17.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_17.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_17.cpp	2025-05-05 11:26:03.605363784 +0800
@@ -33,12 +33,12 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -57,7 +57,7 @@
     {
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
     for(k = 0; k < 1; k++)
     {
@@ -82,7 +82,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_18.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_18.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_18.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_18.cpp	2025-05-05 11:26:03.635364438 +0800
@@ -32,11 +32,11 @@
 source:
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
 source:
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     goto sink;
 sink:
     /* do nothing */
@@ -74,7 +74,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 void good()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_21.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_21.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_21.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_21.cpp	2025-05-05 11:26:03.599363653 +0800
@@ -32,7 +32,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -43,7 +43,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -80,7 +80,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2bStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_22a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_22a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_22a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_22a.cpp	2025-05-05 11:26:03.627364264 +0800
@@ -37,7 +37,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     badGlobal = 1; /* true */
     badSink(data);
 }
@@ -62,7 +62,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     goodB2G1Global = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -77,7 +77,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     goodB2G2Global = 1; /* true */
     goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_22b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_22b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_22b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_22b.cpp	2025-05-05 11:26:03.632364373 +0800
@@ -33,7 +33,7 @@
     if(badGlobal)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -80,7 +80,7 @@
     if(goodG2B1Global)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_31.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_31.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_31.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_31.cpp	2025-05-05 11:26:03.583363304 +0800
@@ -31,12 +31,12 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     {
         wchar_t * dataCopy = data;
         wchar_t * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -56,7 +56,7 @@
         wchar_t * dataCopy = data;
         wchar_t * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -68,7 +68,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     {
         wchar_t * dataCopy = data;
         wchar_t * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_32.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_32.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_32.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_32.cpp	2025-05-05 11:26:03.606363806 +0800
@@ -35,13 +35,13 @@
         wchar_t * data = *dataPtr1;
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
         *dataPtr1 = data;
     }
     {
         wchar_t * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -66,7 +66,7 @@
     {
         wchar_t * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -82,7 +82,7 @@
         wchar_t * data = *dataPtr1;
         data = new wchar_t[100];
         /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_33.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_33.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_33.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_33.cpp	2025-05-05 11:26:03.595363566 +0800
@@ -32,11 +32,11 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     {
         wchar_t * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         wchar_t * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -69,7 +69,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     {
         wchar_t * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_34.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_34.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_34.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_34.cpp	2025-05-05 11:26:03.585363348 +0800
@@ -38,12 +38,12 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     myUnion.unionFirst = data;
     {
         wchar_t * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -64,7 +64,7 @@
     {
         wchar_t * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete [] data;
+        callback_array_wchar(data, has_free_array_wchar);
     }
 }
 
@@ -77,7 +77,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     myUnion.unionFirst = data;
     {
         wchar_t * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_41.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_41.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_41.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_41.cpp	2025-05-05 11:26:03.595363566 +0800
@@ -27,7 +27,7 @@
 static void badSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 void bad()
@@ -37,7 +37,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     badSink(data);
 }
 
@@ -49,7 +49,7 @@
 static void goodG2BSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_42.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_42.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_42.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_42.cpp	2025-05-05 11:26:03.591363479 +0800
@@ -28,7 +28,7 @@
 {
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     return data;
 }
 
@@ -39,7 +39,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
 {
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_43.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_43.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_43.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_43.cpp	2025-05-05 11:26:03.619364090 +0800
@@ -28,7 +28,7 @@
 {
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 void bad()
@@ -38,7 +38,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -59,7 +59,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -67,7 +67,7 @@
 {
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_44.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_44.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_44.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_44.cpp	2025-05-05 11:26:03.620364111 +0800
@@ -27,7 +27,7 @@
 static void badSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -52,7 +52,7 @@
 static void goodG2BSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_45.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_45.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_45.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_45.cpp	2025-05-05 11:26:03.616364024 +0800
@@ -32,7 +32,7 @@
 {
     wchar_t * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 void bad()
@@ -42,7 +42,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     badData = data;
     badSink();
 }
@@ -56,7 +56,7 @@
 {
     wchar_t * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_51a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_51a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_51a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_51a.cpp	2025-05-05 11:26:03.598363632 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_51b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_51b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_51b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_51b.cpp	2025-05-05 11:26:03.611363915 +0800
@@ -27,7 +27,7 @@
 void badSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_52a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_52a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_52a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_52a.cpp	2025-05-05 11:26:03.449360382 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_52c.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_52c.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_52c.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_52c.cpp	2025-05-05 11:26:03.583363304 +0800
@@ -27,7 +27,7 @@
 void badSink_c(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_c(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_53a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_53a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_53a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_53a.cpp	2025-05-05 11:26:03.595363566 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_53d.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_53d.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_53d.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_53d.cpp	2025-05-05 11:26:03.594363544 +0800
@@ -27,7 +27,7 @@
 void badSink_d(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_d(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_54a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_54a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_54a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_54a.cpp	2025-05-05 11:26:03.623364177 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_54e.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_54e.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_54e.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_54e.cpp	2025-05-05 11:26:03.589363435 +0800
@@ -27,7 +27,7 @@
 void badSink_e(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_e(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_61a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_61a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_61a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_61a.cpp	2025-05-05 11:26:03.593363523 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_61b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_61b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_61b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_61b.cpp	2025-05-05 11:26:03.586363370 +0800
@@ -28,7 +28,7 @@
 {
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     return data;
 }
 
@@ -49,7 +49,7 @@
 {
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_62a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_62a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_62a.cpp	2025-05-05 11:26:03.601363697 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_62b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_62b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_62b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_62b.cpp	2025-05-05 11:26:03.583363304 +0800
@@ -28,7 +28,7 @@
 {
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -47,7 +47,7 @@
 {
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_63a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_63a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_63a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_63a.cpp	2025-05-05 11:26:03.611363915 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_63b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_63b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_63b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_63b.cpp	2025-05-05 11:26:03.610363893 +0800
@@ -28,7 +28,7 @@
 {
     wchar_t * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -40,7 +40,7 @@
 {
     wchar_t * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_64a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_64a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_64a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_64a.cpp	2025-05-05 11:26:03.631364351 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_64b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_64b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_64b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_64b.cpp	2025-05-05 11:26:03.630364329 +0800
@@ -31,7 +31,7 @@
     /* dereference dataPtr into data */
     wchar_t * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -46,7 +46,7 @@
     /* dereference dataPtr into data */
     wchar_t * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_65a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_65a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_65a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_65a.cpp	2025-05-05 11:26:03.585363348 +0800
@@ -36,7 +36,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_65b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_65b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_65b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_65b.cpp	2025-05-05 11:26:03.638364504 +0800
@@ -27,7 +27,7 @@
 void badSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_66a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_66a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_66a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_66a.cpp	2025-05-05 11:26:03.593363523 +0800
@@ -35,7 +35,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     /* put data in array */
     dataArray[2] = data;
     badSink(dataArray);
@@ -71,7 +71,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     dataArray[2] = data;
     goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_66b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_66b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_66b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_66b.cpp	2025-05-05 11:26:03.587363392 +0800
@@ -29,7 +29,7 @@
     /* copy data out of dataArray */
     wchar_t * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     wchar_t * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_67a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_67a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_67a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_67a.cpp	2025-05-05 11:26:03.588363414 +0800
@@ -40,7 +40,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     myStruct.structFirst = data;
     badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     myStruct.structFirst = data;
     goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_67b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_67b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_67b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_67b.cpp	2025-05-05 11:26:03.641364569 +0800
@@ -33,7 +33,7 @@
 {
     wchar_t * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -45,7 +45,7 @@
 {
     wchar_t * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_68a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_68a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_68a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_68a.cpp	2025-05-05 11:26:03.601363697 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     badData = data;
     badSink();
 }
@@ -71,7 +71,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_68b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_68b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_68b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_68b.cpp	2025-05-05 11:26:03.591363479 +0800
@@ -32,7 +32,7 @@
 {
     wchar_t * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     wchar_t * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_72a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_72a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_72a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_72a.cpp	2025-05-05 11:26:03.601363697 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_72b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_72b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_72b.cpp	2025-05-05 11:26:03.450360404 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     wchar_t * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     wchar_t * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_73a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_73a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_73a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_73a.cpp	2025-05-05 11:26:03.629364308 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_73b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_73b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_73b.cpp	2025-05-05 11:26:03.596363588 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     wchar_t * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     wchar_t * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_74a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_74a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_74a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_74a.cpp	2025-05-05 11:26:03.617364046 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -79,7 +79,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_74b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_74b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_74b.cpp	2025-05-05 11:26:03.449360382 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     wchar_t * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     wchar_t * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_81a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_81a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_81a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_81a.cpp	2025-05-05 11:26:03.607363828 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     const CWE415_Double_Free__new_delete_array_wchar_t_81_base& o = CWE415_Double_Free__new_delete_array_wchar_t_81_bad();
     o.action(data);
 }
@@ -59,7 +59,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     const CWE415_Double_Free__new_delete_array_wchar_t_81_base& baseObject = CWE415_Double_Free__new_delete_array_wchar_t_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_81_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_81_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_81_bad.cpp	2025-05-05 11:26:03.603363741 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_wchar_t_81_bad::action(wchar_t * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_81_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_81_goodG2B.cpp	2025-05-05 11:26:03.589363435 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_wchar_t_81_goodG2B::action(wchar_t * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_82a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_82a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_82a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_82a.cpp	2025-05-05 11:26:03.616364024 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     CWE415_Double_Free__new_delete_array_wchar_t_82_base* baseObject = new CWE415_Double_Free__new_delete_array_wchar_t_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -61,7 +61,7 @@
     data = NULL;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
     CWE415_Double_Free__new_delete_array_wchar_t_82_base* baseObject = new CWE415_Double_Free__new_delete_array_wchar_t_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_82_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_82_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_82_bad.cpp	2025-05-05 11:26:03.613363959 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_wchar_t_82_bad::action(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_82_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_82_goodG2B.cpp	2025-05-05 11:26:03.620364111 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_array_wchar_t_82_goodG2B::action(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_83_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_83_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_83_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_83_bad.cpp	2025-05-05 11:26:03.608363850 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 CWE415_Double_Free__new_delete_array_wchar_t_83_bad::~CWE415_Double_Free__new_delete_array_wchar_t_83_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_83_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_83_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_83_goodB2G.cpp	2025-05-05 11:26:03.611363915 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 CWE415_Double_Free__new_delete_array_wchar_t_83_goodB2G::~CWE415_Double_Free__new_delete_array_wchar_t_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_83_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_83_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_83_goodG2B.cpp	2025-05-05 11:26:03.609363872 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_array_wchar_t_83_goodG2B::~CWE415_Double_Free__new_delete_array_wchar_t_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_84_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_84_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_84_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_84_bad.cpp	2025-05-05 11:26:03.449360382 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 CWE415_Double_Free__new_delete_array_wchar_t_84_bad::~CWE415_Double_Free__new_delete_array_wchar_t_84_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_84_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_84_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_84_goodB2G.cpp	2025-05-05 11:26:03.610363893 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new wchar_t[100];
     /* POTENTIAL FLAW: delete the array data in the source - the bad sink deletes the array data as well */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 
 CWE415_Double_Free__new_delete_array_wchar_t_84_goodB2G::~CWE415_Double_Free__new_delete_array_wchar_t_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_84_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_84_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_array_wchar_t_84_goodG2B.cpp	2025-05-05 11:26:03.612363937 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_array_wchar_t_84_goodG2B::~CWE415_Double_Free__new_delete_array_wchar_t_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete [] data;
+    callback_array_wchar(data, has_free_array_wchar);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_01.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_01.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_01.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_01.cpp	2025-05-05 11:26:03.586363370 +0800
@@ -31,9 +31,9 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -49,7 +49,7 @@
     data = new char;
     /* FIX: Do NOT delete data in the source - the bad sink deletes data */
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     /* do nothing */
     /* FIX: Don't attempt to delete the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_02.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_02.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_02.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_02.cpp	2025-05-05 11:26:03.448360360 +0800
@@ -33,12 +33,12 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(1)
     {
@@ -110,7 +110,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -128,7 +128,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_03.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_03.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_03.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_03.cpp	2025-05-05 11:26:03.582363283 +0800
@@ -33,12 +33,12 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(5==5)
     {
@@ -110,7 +110,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -128,7 +128,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_04.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_04.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_04.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_04.cpp	2025-05-05 11:26:03.592363501 +0800
@@ -39,12 +39,12 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -134,7 +134,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_05.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_05.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_05.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_05.cpp	2025-05-05 11:26:03.450360404 +0800
@@ -39,12 +39,12 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(staticTrue)
     {
@@ -116,7 +116,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -134,7 +134,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_06.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_06.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_06.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_06.cpp	2025-05-05 11:26:03.639364526 +0800
@@ -38,12 +38,12 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -115,7 +115,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -133,7 +133,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_07.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_07.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_07.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_07.cpp	2025-05-05 11:26:03.641364569 +0800
@@ -38,12 +38,12 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(staticFive==5)
     {
@@ -115,7 +115,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -133,7 +133,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_08.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_08.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_08.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_08.cpp	2025-05-05 11:26:03.619364090 +0800
@@ -46,12 +46,12 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -69,7 +69,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(staticReturnsTrue())
     {
@@ -123,7 +123,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -141,7 +141,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_09.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_09.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_09.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_09.cpp	2025-05-05 11:26:03.609363872 +0800
@@ -33,12 +33,12 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -110,7 +110,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -128,7 +128,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_10.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_10.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_10.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_10.cpp	2025-05-05 11:26:03.640364548 +0800
@@ -33,12 +33,12 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(globalTrue)
     {
@@ -110,7 +110,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -128,7 +128,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_11.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_11.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_11.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_11.cpp	2025-05-05 11:26:03.581363261 +0800
@@ -32,12 +32,12 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(globalReturnsFalse())
     {
@@ -80,7 +80,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(globalReturnsTrue())
     {
@@ -109,7 +109,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_12.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_12.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_12.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_12.cpp	2025-05-05 11:26:03.636364460 +0800
@@ -32,7 +32,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     else
     {
@@ -68,13 +68,13 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     else
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -111,12 +111,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_13.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_13.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_13.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_13.cpp	2025-05-05 11:26:03.611363915 +0800
@@ -32,12 +32,12 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -109,7 +109,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -127,7 +127,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_14.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_14.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_14.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_14.cpp	2025-05-05 11:26:03.592363501 +0800
@@ -32,12 +32,12 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(globalFive!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     if(globalFive==5)
     {
@@ -109,7 +109,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_15.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_15.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_15.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_15.cpp	2025-05-05 11:26:03.617364046 +0800
@@ -33,7 +33,7 @@
     case 6:
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -44,7 +44,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
     case 6:
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -100,7 +100,7 @@
     case 6:
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -142,7 +142,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -172,7 +172,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_16.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_16.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_16.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_16.cpp	2025-05-05 11:26:03.605363784 +0800
@@ -32,13 +32,13 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
         break;
     }
 }
@@ -57,7 +57,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
         break;
     }
     while(1)
@@ -84,7 +84,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_17.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_17.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_17.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_17.cpp	2025-05-05 11:26:03.621364133 +0800
@@ -33,12 +33,12 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -57,7 +57,7 @@
     {
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
     for(k = 0; k < 1; k++)
     {
@@ -82,7 +82,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_18.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_18.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_18.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_18.cpp	2025-05-05 11:26:03.612363937 +0800
@@ -32,11 +32,11 @@
 source:
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
 source:
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     goto sink;
 sink:
     /* do nothing */
@@ -74,7 +74,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 void good()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_21.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_21.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_21.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_21.cpp	2025-05-05 11:26:03.612363937 +0800
@@ -32,7 +32,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -43,7 +43,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -80,7 +80,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2bStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_22a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_22a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_22a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_22a.cpp	2025-05-05 11:26:03.596363588 +0800
@@ -37,7 +37,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     badGlobal = 1; /* true */
     badSink(data);
 }
@@ -62,7 +62,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     goodB2G1Global = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -77,7 +77,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     goodB2G2Global = 1; /* true */
     goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_22b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_22b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_22b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_22b.cpp	2025-05-05 11:26:03.582363283 +0800
@@ -33,7 +33,7 @@
     if(badGlobal)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -80,7 +80,7 @@
     if(goodG2B1Global)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_31.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_31.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_31.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_31.cpp	2025-05-05 11:26:03.611363915 +0800
@@ -31,12 +31,12 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     {
         char * dataCopy = data;
         char * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -56,7 +56,7 @@
         char * dataCopy = data;
         char * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -68,7 +68,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     {
         char * dataCopy = data;
         char * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_32.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_32.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_32.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_32.cpp	2025-05-05 11:26:03.606363806 +0800
@@ -35,13 +35,13 @@
         char * data = *dataPtr1;
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
         *dataPtr1 = data;
     }
     {
         char * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -66,7 +66,7 @@
     {
         char * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -82,7 +82,7 @@
         char * data = *dataPtr1;
         data = new char;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_char(data, has_free_new_char);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_33.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_33.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_33.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_33.cpp	2025-05-05 11:26:03.634364417 +0800
@@ -32,11 +32,11 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     {
         char * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         char * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -69,7 +69,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     {
         char * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_34.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_34.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_34.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_34.cpp	2025-05-05 11:26:03.622364155 +0800
@@ -38,12 +38,12 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     myUnion.unionFirst = data;
     {
         char * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -64,7 +64,7 @@
     {
         char * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_char(data, has_free_new_char);
     }
 }
 
@@ -77,7 +77,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     myUnion.unionFirst = data;
     {
         char * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_41.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_41.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_41.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_41.cpp	2025-05-05 11:26:03.601363697 +0800
@@ -27,7 +27,7 @@
 static void badSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 void bad()
@@ -37,7 +37,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     badSink(data);
 }
 
@@ -49,7 +49,7 @@
 static void goodG2BSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_42.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_42.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_42.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_42.cpp	2025-05-05 11:26:03.607363828 +0800
@@ -28,7 +28,7 @@
 {
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     return data;
 }
 
@@ -39,7 +39,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
 {
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_43.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_43.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_43.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_43.cpp	2025-05-05 11:26:03.611363915 +0800
@@ -28,7 +28,7 @@
 {
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 void bad()
@@ -38,7 +38,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -59,7 +59,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -67,7 +67,7 @@
 {
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_44.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_44.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_44.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_44.cpp	2025-05-05 11:26:03.634364417 +0800
@@ -27,7 +27,7 @@
 static void badSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -52,7 +52,7 @@
 static void goodG2BSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_45.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_45.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_45.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_45.cpp	2025-05-05 11:26:03.624364199 +0800
@@ -32,7 +32,7 @@
 {
     char * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 void bad()
@@ -42,7 +42,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     badData = data;
     badSink();
 }
@@ -56,7 +56,7 @@
 {
     char * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_51a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_51a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_51a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_51a.cpp	2025-05-05 11:26:03.618364068 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_51b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_51b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_51b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_51b.cpp	2025-05-05 11:26:03.602363719 +0800
@@ -27,7 +27,7 @@
 void badSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_52a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_52a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_52a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_52a.cpp	2025-05-05 11:26:03.628364286 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_52c.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_52c.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_52c.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_52c.cpp	2025-05-05 11:26:03.607363828 +0800
@@ -27,7 +27,7 @@
 void badSink_c(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_c(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_53a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_53a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_53a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_53a.cpp	2025-05-05 11:26:03.449360382 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_53d.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_53d.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_53d.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_53d.cpp	2025-05-05 11:26:03.633364395 +0800
@@ -27,7 +27,7 @@
 void badSink_d(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_d(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_54a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_54a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_54a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_54a.cpp	2025-05-05 11:26:03.628364286 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_54e.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_54e.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_54e.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_54e.cpp	2025-05-05 11:26:03.628364286 +0800
@@ -27,7 +27,7 @@
 void badSink_e(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_e(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_61a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_61a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_61a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_61a.cpp	2025-05-05 11:26:03.639364526 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_61b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_61b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_61b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_61b.cpp	2025-05-05 11:26:03.607363828 +0800
@@ -28,7 +28,7 @@
 {
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     return data;
 }
 
@@ -49,7 +49,7 @@
 {
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_62a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_62a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_62a.cpp	2025-05-05 11:26:03.632364373 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_62b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_62b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_62b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_62b.cpp	2025-05-05 11:26:03.641364569 +0800
@@ -28,7 +28,7 @@
 {
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -47,7 +47,7 @@
 {
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_63a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_63a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_63a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_63a.cpp	2025-05-05 11:26:03.588363414 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_63b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_63b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_63b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_63b.cpp	2025-05-05 11:26:03.625364220 +0800
@@ -28,7 +28,7 @@
 {
     char * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -40,7 +40,7 @@
 {
     char * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_64a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_64a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_64a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_64a.cpp	2025-05-05 11:26:03.637364482 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_64b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_64b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_64b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_64b.cpp	2025-05-05 11:26:03.588363414 +0800
@@ -31,7 +31,7 @@
     /* dereference dataPtr into data */
     char * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -46,7 +46,7 @@
     /* dereference dataPtr into data */
     char * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_65a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_65a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_65a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_65a.cpp	2025-05-05 11:26:03.614363980 +0800
@@ -36,7 +36,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_65b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_65b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_65b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_65b.cpp	2025-05-05 11:26:03.588363414 +0800
@@ -27,7 +27,7 @@
 void badSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_66a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_66a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_66a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_66a.cpp	2025-05-05 11:26:03.602363719 +0800
@@ -35,7 +35,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     /* put data in array */
     dataArray[2] = data;
     badSink(dataArray);
@@ -71,7 +71,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     dataArray[2] = data;
     goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_66b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_66b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_66b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_66b.cpp	2025-05-05 11:26:03.584363326 +0800
@@ -29,7 +29,7 @@
     /* copy data out of dataArray */
     char * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     char * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_67a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_67a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_67a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_67a.cpp	2025-05-05 11:26:03.637364482 +0800
@@ -40,7 +40,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     myStruct.structFirst = data;
     badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     myStruct.structFirst = data;
     goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_67b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_67b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_67b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_67b.cpp	2025-05-05 11:26:03.631364351 +0800
@@ -33,7 +33,7 @@
 {
     char * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -45,7 +45,7 @@
 {
     char * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_68a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_68a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_68a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_68a.cpp	2025-05-05 11:26:03.635364438 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     badData = data;
     badSink();
 }
@@ -71,7 +71,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_68b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_68b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_68b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_68b.cpp	2025-05-05 11:26:03.596363588 +0800
@@ -32,7 +32,7 @@
 {
     char * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     char * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_72a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_72a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_72a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_72a.cpp	2025-05-05 11:26:03.583363304 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_72b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_72b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_72b.cpp	2025-05-05 11:26:03.591363479 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     char * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     char * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_73a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_73a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_73a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_73a.cpp	2025-05-05 11:26:03.448360360 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_73b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_73b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_73b.cpp	2025-05-05 11:26:03.607363828 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     char * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     char * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_74a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_74a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_74a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_74a.cpp	2025-05-05 11:26:03.610363893 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -79,7 +79,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_74b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_74b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_74b.cpp	2025-05-05 11:26:03.627364264 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     char * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     char * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_81a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_81a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_81a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_81a.cpp	2025-05-05 11:26:03.637364482 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     const CWE415_Double_Free__new_delete_char_81_base& o = CWE415_Double_Free__new_delete_char_81_bad();
     o.action(data);
 }
@@ -59,7 +59,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     const CWE415_Double_Free__new_delete_char_81_base& baseObject = CWE415_Double_Free__new_delete_char_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_81_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_81_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_81_bad.cpp	2025-05-05 11:26:03.613363959 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_char_81_bad::action(char * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_81_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_81_goodG2B.cpp	2025-05-05 11:26:03.634364417 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_char_81_goodG2B::action(char * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_82a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_82a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_82a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_82a.cpp	2025-05-05 11:26:03.621364133 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     CWE415_Double_Free__new_delete_char_82_base* baseObject = new CWE415_Double_Free__new_delete_char_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -61,7 +61,7 @@
     data = NULL;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
     CWE415_Double_Free__new_delete_char_82_base* baseObject = new CWE415_Double_Free__new_delete_char_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_82_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_82_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_82_bad.cpp	2025-05-05 11:26:03.619364090 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_char_82_bad::action(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_82_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_82_goodG2B.cpp	2025-05-05 11:26:03.631364351 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_char_82_goodG2B::action(char * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_83_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_83_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_83_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_83_bad.cpp	2025-05-05 11:26:03.449360382 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 CWE415_Double_Free__new_delete_char_83_bad::~CWE415_Double_Free__new_delete_char_83_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_83_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_83_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_83_goodB2G.cpp	2025-05-05 11:26:03.613363959 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 CWE415_Double_Free__new_delete_char_83_goodB2G::~CWE415_Double_Free__new_delete_char_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_83_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_83_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_83_goodG2B.cpp	2025-05-05 11:26:03.605363784 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_char_83_goodG2B::~CWE415_Double_Free__new_delete_char_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_84_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_84_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_84_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_84_bad.cpp	2025-05-05 11:26:03.632364373 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 CWE415_Double_Free__new_delete_char_84_bad::~CWE415_Double_Free__new_delete_char_84_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_84_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_84_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_84_goodB2G.cpp	2025-05-05 11:26:03.618364068 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new char;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 
 CWE415_Double_Free__new_delete_char_84_goodB2G::~CWE415_Double_Free__new_delete_char_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_84_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_84_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_char_84_goodG2B.cpp	2025-05-05 11:26:03.629364308 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_char_84_goodG2B::~CWE415_Double_Free__new_delete_char_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_char(data, has_free_new_char);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_01.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_01.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_01.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_01.cpp	2025-05-05 11:26:03.632364373 +0800
@@ -31,9 +31,9 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -49,7 +49,7 @@
     data = new TwoIntsClass;
     /* FIX: Do NOT delete data in the source - the bad sink deletes data */
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     /* do nothing */
     /* FIX: Don't attempt to delete the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_02.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_02.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_02.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_02.cpp	2025-05-05 11:26:03.616364024 +0800
@@ -33,12 +33,12 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(1)
     {
@@ -110,7 +110,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -128,7 +128,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_03.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_03.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_03.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_03.cpp	2025-05-05 11:26:03.636364460 +0800
@@ -33,12 +33,12 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(5==5)
     {
@@ -110,7 +110,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -128,7 +128,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_04.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_04.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_04.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_04.cpp	2025-05-05 11:26:03.626364242 +0800
@@ -39,12 +39,12 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -134,7 +134,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_05.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_05.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_05.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_05.cpp	2025-05-05 11:26:03.597363610 +0800
@@ -39,12 +39,12 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(staticTrue)
     {
@@ -116,7 +116,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -134,7 +134,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_06.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_06.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_06.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_06.cpp	2025-05-05 11:26:03.622364155 +0800
@@ -38,12 +38,12 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -115,7 +115,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -133,7 +133,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_07.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_07.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_07.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_07.cpp	2025-05-05 11:26:03.586363370 +0800
@@ -38,12 +38,12 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(staticFive==5)
     {
@@ -115,7 +115,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -133,7 +133,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_08.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_08.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_08.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_08.cpp	2025-05-05 11:26:03.449360382 +0800
@@ -46,12 +46,12 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -69,7 +69,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(staticReturnsTrue())
     {
@@ -123,7 +123,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -141,7 +141,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_09.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_09.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_09.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_09.cpp	2025-05-05 11:26:03.590363457 +0800
@@ -33,12 +33,12 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -110,7 +110,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -128,7 +128,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_10.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_10.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_10.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_10.cpp	2025-05-05 11:26:03.585363348 +0800
@@ -33,12 +33,12 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(globalTrue)
     {
@@ -110,7 +110,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -128,7 +128,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_11.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_11.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_11.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_11.cpp	2025-05-05 11:26:03.637364482 +0800
@@ -32,12 +32,12 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(globalReturnsFalse())
     {
@@ -80,7 +80,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(globalReturnsTrue())
     {
@@ -109,7 +109,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_12.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_12.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_12.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_12.cpp	2025-05-05 11:26:03.636364460 +0800
@@ -32,7 +32,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     else
     {
@@ -68,13 +68,13 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     else
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -111,12 +111,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_13.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_13.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_13.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_13.cpp	2025-05-05 11:26:03.582363283 +0800
@@ -32,12 +32,12 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -109,7 +109,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -127,7 +127,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_14.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_14.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_14.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_14.cpp	2025-05-05 11:26:03.590363457 +0800
@@ -32,12 +32,12 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(globalFive!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     if(globalFive==5)
     {
@@ -109,7 +109,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_15.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_15.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_15.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_15.cpp	2025-05-05 11:26:03.590363457 +0800
@@ -33,7 +33,7 @@
     case 6:
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -44,7 +44,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
     case 6:
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -100,7 +100,7 @@
     case 6:
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -142,7 +142,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -172,7 +172,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_16.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_16.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_16.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_16.cpp	2025-05-05 11:26:03.589363435 +0800
@@ -32,13 +32,13 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
         break;
     }
 }
@@ -57,7 +57,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
         break;
     }
     while(1)
@@ -84,7 +84,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_17.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_17.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_17.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_17.cpp	2025-05-05 11:26:03.610363893 +0800
@@ -33,12 +33,12 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -57,7 +57,7 @@
     {
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
     for(k = 0; k < 1; k++)
     {
@@ -82,7 +82,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_18.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_18.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_18.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_18.cpp	2025-05-05 11:26:03.597363610 +0800
@@ -32,11 +32,11 @@
 source:
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
 source:
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     goto sink;
 sink:
     /* do nothing */
@@ -74,7 +74,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 void good()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_21.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_21.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_21.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_21.cpp	2025-05-05 11:26:03.618364068 +0800
@@ -32,7 +32,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -43,7 +43,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -80,7 +80,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2bStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_22a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_22a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_22a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_22a.cpp	2025-05-05 11:26:03.627364264 +0800
@@ -37,7 +37,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     badGlobal = 1; /* true */
     badSink(data);
 }
@@ -62,7 +62,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     goodB2G1Global = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -77,7 +77,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     goodB2G2Global = 1; /* true */
     goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_22b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_22b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_22b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_22b.cpp	2025-05-05 11:26:03.450360404 +0800
@@ -33,7 +33,7 @@
     if(badGlobal)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -80,7 +80,7 @@
     if(goodG2B1Global)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_31.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_31.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_31.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_31.cpp	2025-05-05 11:26:03.639364526 +0800
@@ -31,12 +31,12 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     {
         TwoIntsClass * dataCopy = data;
         TwoIntsClass * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -56,7 +56,7 @@
         TwoIntsClass * dataCopy = data;
         TwoIntsClass * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -68,7 +68,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     {
         TwoIntsClass * dataCopy = data;
         TwoIntsClass * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_32.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_32.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_32.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_32.cpp	2025-05-05 11:26:03.627364264 +0800
@@ -35,13 +35,13 @@
         TwoIntsClass * data = *dataPtr1;
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
         *dataPtr1 = data;
     }
     {
         TwoIntsClass * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -66,7 +66,7 @@
     {
         TwoIntsClass * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -82,7 +82,7 @@
         TwoIntsClass * data = *dataPtr1;
         data = new TwoIntsClass;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_class(data, has_free_new_class);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_33.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_33.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_33.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_33.cpp	2025-05-05 11:26:03.612363937 +0800
@@ -32,11 +32,11 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     {
         TwoIntsClass * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         TwoIntsClass * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -69,7 +69,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     {
         TwoIntsClass * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_34.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_34.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_34.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_34.cpp	2025-05-05 11:26:03.623364177 +0800
@@ -38,12 +38,12 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     myUnion.unionFirst = data;
     {
         TwoIntsClass * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -64,7 +64,7 @@
     {
         TwoIntsClass * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_class(data, has_free_new_class);
     }
 }
 
@@ -77,7 +77,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     myUnion.unionFirst = data;
     {
         TwoIntsClass * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_41.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_41.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_41.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_41.cpp	2025-05-05 11:26:03.619364090 +0800
@@ -27,7 +27,7 @@
 static void badSink(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 void bad()
@@ -37,7 +37,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     badSink(data);
 }
 
@@ -49,7 +49,7 @@
 static void goodG2BSink(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_42.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_42.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_42.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_42.cpp	2025-05-05 11:26:03.630364329 +0800
@@ -28,7 +28,7 @@
 {
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     return data;
 }
 
@@ -39,7 +39,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
 {
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_43.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_43.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_43.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_43.cpp	2025-05-05 11:26:03.611363915 +0800
@@ -28,7 +28,7 @@
 {
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 void bad()
@@ -38,7 +38,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -59,7 +59,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -67,7 +67,7 @@
 {
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_44.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_44.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_44.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_44.cpp	2025-05-05 11:26:03.591363479 +0800
@@ -27,7 +27,7 @@
 static void badSink(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -52,7 +52,7 @@
 static void goodG2BSink(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_45.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_45.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_45.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_45.cpp	2025-05-05 11:26:03.449360382 +0800
@@ -32,7 +32,7 @@
 {
     TwoIntsClass * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 void bad()
@@ -42,7 +42,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     badData = data;
     badSink();
 }
@@ -56,7 +56,7 @@
 {
     TwoIntsClass * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_51a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_51a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_51a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_51a.cpp	2025-05-05 11:26:03.599363653 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_51b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_51b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_51b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_51b.cpp	2025-05-05 11:26:03.601363697 +0800
@@ -27,7 +27,7 @@
 void badSink(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_52a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_52a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_52a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_52a.cpp	2025-05-05 11:26:03.606363806 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_52c.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_52c.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_52c.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_52c.cpp	2025-05-05 11:26:03.625364220 +0800
@@ -27,7 +27,7 @@
 void badSink_c(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_c(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_53a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_53a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_53a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_53a.cpp	2025-05-05 11:26:03.596363588 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_53d.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_53d.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_53d.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_53d.cpp	2025-05-05 11:26:03.597363610 +0800
@@ -27,7 +27,7 @@
 void badSink_d(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_d(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_54a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_54a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_54a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_54a.cpp	2025-05-05 11:26:03.610363893 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_54e.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_54e.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_54e.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_54e.cpp	2025-05-05 11:26:03.615364002 +0800
@@ -27,7 +27,7 @@
 void badSink_e(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_e(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_61a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_61a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_61a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_61a.cpp	2025-05-05 11:26:03.586363370 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_61b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_61b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_61b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_61b.cpp	2025-05-05 11:26:03.606363806 +0800
@@ -28,7 +28,7 @@
 {
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     return data;
 }
 
@@ -49,7 +49,7 @@
 {
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_62a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_62a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_62a.cpp	2025-05-05 11:26:03.585363348 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_62b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_62b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_62b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_62b.cpp	2025-05-05 11:26:03.636364460 +0800
@@ -28,7 +28,7 @@
 {
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -47,7 +47,7 @@
 {
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_63a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_63a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_63a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_63a.cpp	2025-05-05 11:26:03.599363653 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_63b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_63b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_63b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_63b.cpp	2025-05-05 11:26:03.616364024 +0800
@@ -28,7 +28,7 @@
 {
     TwoIntsClass * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -40,7 +40,7 @@
 {
     TwoIntsClass * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_64a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_64a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_64a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_64a.cpp	2025-05-05 11:26:03.598363632 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_64b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_64b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_64b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_64b.cpp	2025-05-05 11:26:03.581363261 +0800
@@ -31,7 +31,7 @@
     /* dereference dataPtr into data */
     TwoIntsClass * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -46,7 +46,7 @@
     /* dereference dataPtr into data */
     TwoIntsClass * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_65a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_65a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_65a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_65a.cpp	2025-05-05 11:26:03.631364351 +0800
@@ -36,7 +36,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_65b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_65b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_65b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_65b.cpp	2025-05-05 11:26:03.625364220 +0800
@@ -27,7 +27,7 @@
 void badSink(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_66a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_66a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_66a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_66a.cpp	2025-05-05 11:26:03.606363806 +0800
@@ -35,7 +35,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     /* put data in array */
     dataArray[2] = data;
     badSink(dataArray);
@@ -71,7 +71,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     dataArray[2] = data;
     goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_66b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_66b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_66b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_66b.cpp	2025-05-05 11:26:03.634364417 +0800
@@ -29,7 +29,7 @@
     /* copy data out of dataArray */
     TwoIntsClass * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     TwoIntsClass * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_67a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_67a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_67a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_67a.cpp	2025-05-05 11:26:03.604363762 +0800
@@ -40,7 +40,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     myStruct.structFirst = data;
     badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     myStruct.structFirst = data;
     goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_67b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_67b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_67b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_67b.cpp	2025-05-05 11:26:03.636364460 +0800
@@ -33,7 +33,7 @@
 {
     TwoIntsClass * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -45,7 +45,7 @@
 {
     TwoIntsClass * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_68a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_68a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_68a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_68a.cpp	2025-05-05 11:26:03.588363414 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     badData = data;
     badSink();
 }
@@ -71,7 +71,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_68b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_68b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_68b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_68b.cpp	2025-05-05 11:26:03.604363762 +0800
@@ -32,7 +32,7 @@
 {
     TwoIntsClass * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     TwoIntsClass * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_72a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_72a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_72a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_72a.cpp	2025-05-05 11:26:03.621364133 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_72b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_72b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_72b.cpp	2025-05-05 11:26:03.621364133 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     TwoIntsClass * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     TwoIntsClass * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_73a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_73a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_73a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_73a.cpp	2025-05-05 11:26:03.605363784 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_73b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_73b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_73b.cpp	2025-05-05 11:26:03.609363872 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     TwoIntsClass * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     TwoIntsClass * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_74a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_74a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_74a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_74a.cpp	2025-05-05 11:26:03.610363893 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -79,7 +79,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_74b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_74b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_74b.cpp	2025-05-05 11:26:03.605363784 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     TwoIntsClass * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     TwoIntsClass * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_81a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_81a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_81a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_81a.cpp	2025-05-05 11:26:03.607363828 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     const CWE415_Double_Free__new_delete_class_81_base& o = CWE415_Double_Free__new_delete_class_81_bad();
     o.action(data);
 }
@@ -59,7 +59,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     const CWE415_Double_Free__new_delete_class_81_base& baseObject = CWE415_Double_Free__new_delete_class_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_81_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_81_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_81_bad.cpp	2025-05-05 11:26:03.587363392 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_class_81_bad::action(TwoIntsClass * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_81_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_81_goodG2B.cpp	2025-05-05 11:26:03.616364024 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_class_81_goodG2B::action(TwoIntsClass * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_82a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_82a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_82a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_82a.cpp	2025-05-05 11:26:03.603363741 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     CWE415_Double_Free__new_delete_class_82_base* baseObject = new CWE415_Double_Free__new_delete_class_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -61,7 +61,7 @@
     data = NULL;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
     CWE415_Double_Free__new_delete_class_82_base* baseObject = new CWE415_Double_Free__new_delete_class_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_82_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_82_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_82_bad.cpp	2025-05-05 11:26:03.637364482 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_class_82_bad::action(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_82_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_82_goodG2B.cpp	2025-05-05 11:26:03.640364548 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_class_82_goodG2B::action(TwoIntsClass * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_83_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_83_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_83_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_83_bad.cpp	2025-05-05 11:26:03.608363850 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 CWE415_Double_Free__new_delete_class_83_bad::~CWE415_Double_Free__new_delete_class_83_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_83_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_83_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_83_goodB2G.cpp	2025-05-05 11:26:03.448360360 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 CWE415_Double_Free__new_delete_class_83_goodB2G::~CWE415_Double_Free__new_delete_class_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_83_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_83_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_83_goodG2B.cpp	2025-05-05 11:26:03.614363980 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_class_83_goodG2B::~CWE415_Double_Free__new_delete_class_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_84_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_84_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_84_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_84_bad.cpp	2025-05-05 11:26:03.620364111 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 CWE415_Double_Free__new_delete_class_84_bad::~CWE415_Double_Free__new_delete_class_84_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_84_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_84_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_84_goodB2G.cpp	2025-05-05 11:26:03.450360404 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new TwoIntsClass;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 
 CWE415_Double_Free__new_delete_class_84_goodB2G::~CWE415_Double_Free__new_delete_class_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_84_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_84_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_class_84_goodG2B.cpp	2025-05-05 11:26:03.581363261 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_class_84_goodG2B::~CWE415_Double_Free__new_delete_class_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_class(data, has_free_new_class);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_01.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_01.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_01.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_01.cpp	2025-05-05 11:26:03.581363261 +0800
@@ -31,9 +31,9 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -49,7 +49,7 @@
     data = new int;
     /* FIX: Do NOT delete data in the source - the bad sink deletes data */
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     /* do nothing */
     /* FIX: Don't attempt to delete the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_02.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_02.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_02.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_02.cpp	2025-05-05 11:26:03.625364220 +0800
@@ -33,12 +33,12 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(1)
     {
@@ -110,7 +110,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -128,7 +128,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_03.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_03.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_03.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_03.cpp	2025-05-05 11:26:03.600363675 +0800
@@ -33,12 +33,12 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(5==5)
     {
@@ -110,7 +110,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -128,7 +128,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_04.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_04.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_04.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_04.cpp	2025-05-05 11:26:03.586363370 +0800
@@ -39,12 +39,12 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -134,7 +134,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_05.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_05.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_05.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_05.cpp	2025-05-05 11:26:03.617364046 +0800
@@ -39,12 +39,12 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(staticTrue)
     {
@@ -116,7 +116,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -134,7 +134,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_06.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_06.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_06.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_06.cpp	2025-05-05 11:26:03.634364417 +0800
@@ -38,12 +38,12 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -115,7 +115,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -133,7 +133,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_07.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_07.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_07.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_07.cpp	2025-05-05 11:26:03.611363915 +0800
@@ -38,12 +38,12 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(staticFive==5)
     {
@@ -115,7 +115,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -133,7 +133,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_08.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_08.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_08.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_08.cpp	2025-05-05 11:26:03.613363959 +0800
@@ -46,12 +46,12 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -69,7 +69,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(staticReturnsTrue())
     {
@@ -123,7 +123,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -141,7 +141,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_09.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_09.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_09.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_09.cpp	2025-05-05 11:26:03.604363762 +0800
@@ -33,12 +33,12 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -110,7 +110,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -128,7 +128,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_10.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_10.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_10.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_10.cpp	2025-05-05 11:26:03.609363872 +0800
@@ -33,12 +33,12 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(globalTrue)
     {
@@ -110,7 +110,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -128,7 +128,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_11.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_11.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_11.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_11.cpp	2025-05-05 11:26:03.591363479 +0800
@@ -32,12 +32,12 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(globalReturnsFalse())
     {
@@ -80,7 +80,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(globalReturnsTrue())
     {
@@ -109,7 +109,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_12.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_12.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_12.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_12.cpp	2025-05-05 11:26:03.619364090 +0800
@@ -32,7 +32,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     else
     {
@@ -68,13 +68,13 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     else
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -111,12 +111,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_13.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_13.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_13.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_13.cpp	2025-05-05 11:26:03.624364199 +0800
@@ -32,12 +32,12 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -109,7 +109,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -127,7 +127,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_14.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_14.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_14.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_14.cpp	2025-05-05 11:26:03.608363850 +0800
@@ -32,12 +32,12 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(globalFive!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     if(globalFive==5)
     {
@@ -109,7 +109,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_15.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_15.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_15.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_15.cpp	2025-05-05 11:26:03.594363544 +0800
@@ -33,7 +33,7 @@
     case 6:
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -44,7 +44,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
     case 6:
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -100,7 +100,7 @@
     case 6:
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -142,7 +142,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -172,7 +172,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_16.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_16.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_16.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_16.cpp	2025-05-05 11:26:03.604363762 +0800
@@ -32,13 +32,13 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
         break;
     }
 }
@@ -57,7 +57,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
         break;
     }
     while(1)
@@ -84,7 +84,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_17.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_17.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_17.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_17.cpp	2025-05-05 11:26:03.448360360 +0800
@@ -33,12 +33,12 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -57,7 +57,7 @@
     {
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
     for(k = 0; k < 1; k++)
     {
@@ -82,7 +82,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_18.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_18.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_18.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_18.cpp	2025-05-05 11:26:03.593363523 +0800
@@ -32,11 +32,11 @@
 source:
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
 source:
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     goto sink;
 sink:
     /* do nothing */
@@ -74,7 +74,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 void good()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_21.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_21.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_21.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_21.cpp	2025-05-05 11:26:03.603363741 +0800
@@ -32,7 +32,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -43,7 +43,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -80,7 +80,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2bStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_22a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_22a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_22a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_22a.cpp	2025-05-05 11:26:03.582363283 +0800
@@ -37,7 +37,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     badGlobal = 1; /* true */
     badSink(data);
 }
@@ -62,7 +62,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     goodB2G1Global = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -77,7 +77,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     goodB2G2Global = 1; /* true */
     goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_22b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_22b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_22b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_22b.cpp	2025-05-05 11:26:03.626364242 +0800
@@ -33,7 +33,7 @@
     if(badGlobal)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -80,7 +80,7 @@
     if(goodG2B1Global)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_31.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_31.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_31.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_31.cpp	2025-05-05 11:26:03.584363326 +0800
@@ -31,12 +31,12 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     {
         int * dataCopy = data;
         int * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -56,7 +56,7 @@
         int * dataCopy = data;
         int * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -68,7 +68,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     {
         int * dataCopy = data;
         int * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_32.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_32.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_32.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_32.cpp	2025-05-05 11:26:03.589363435 +0800
@@ -35,13 +35,13 @@
         int * data = *dataPtr1;
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
         *dataPtr1 = data;
     }
     {
         int * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -66,7 +66,7 @@
     {
         int * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -82,7 +82,7 @@
         int * data = *dataPtr1;
         data = new int;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int(data, has_free_new_int);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_33.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_33.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_33.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_33.cpp	2025-05-05 11:26:03.638364504 +0800
@@ -32,11 +32,11 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     {
         int * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         int * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -69,7 +69,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     {
         int * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_34.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_34.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_34.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_34.cpp	2025-05-05 11:26:03.616364024 +0800
@@ -38,12 +38,12 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     myUnion.unionFirst = data;
     {
         int * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -64,7 +64,7 @@
     {
         int * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int(data, has_free_new_int);
     }
 }
 
@@ -77,7 +77,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     myUnion.unionFirst = data;
     {
         int * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_41.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_41.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_41.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_41.cpp	2025-05-05 11:26:03.589363435 +0800
@@ -27,7 +27,7 @@
 static void badSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 void bad()
@@ -37,7 +37,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     badSink(data);
 }
 
@@ -49,7 +49,7 @@
 static void goodG2BSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_42.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_42.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_42.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_42.cpp	2025-05-05 11:26:03.619364090 +0800
@@ -28,7 +28,7 @@
 {
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     return data;
 }
 
@@ -39,7 +39,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
 {
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_43.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_43.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_43.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_43.cpp	2025-05-05 11:26:03.610363893 +0800
@@ -28,7 +28,7 @@
 {
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 void bad()
@@ -38,7 +38,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -59,7 +59,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -67,7 +67,7 @@
 {
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_44.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_44.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_44.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_44.cpp	2025-05-05 11:26:03.640364548 +0800
@@ -27,7 +27,7 @@
 static void badSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -52,7 +52,7 @@
 static void goodG2BSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_45.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_45.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_45.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_45.cpp	2025-05-05 11:26:03.603363741 +0800
@@ -32,7 +32,7 @@
 {
     int * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 void bad()
@@ -42,7 +42,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     badData = data;
     badSink();
 }
@@ -56,7 +56,7 @@
 {
     int * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_51a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_51a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_51a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_51a.cpp	2025-05-05 11:26:03.631364351 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_51b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_51b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_51b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_51b.cpp	2025-05-05 11:26:03.630364329 +0800
@@ -27,7 +27,7 @@
 void badSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_52a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_52a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_52a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_52a.cpp	2025-05-05 11:26:03.638364504 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_52c.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_52c.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_52c.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_52c.cpp	2025-05-05 11:26:03.591363479 +0800
@@ -27,7 +27,7 @@
 void badSink_c(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_c(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_53a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_53a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_53a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_53a.cpp	2025-05-05 11:26:03.632364373 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_53d.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_53d.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_53d.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_53d.cpp	2025-05-05 11:26:03.638364504 +0800
@@ -27,7 +27,7 @@
 void badSink_d(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_d(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_54a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_54a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_54a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_54a.cpp	2025-05-05 11:26:03.587363392 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_54e.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_54e.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_54e.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_54e.cpp	2025-05-05 11:26:03.602363719 +0800
@@ -27,7 +27,7 @@
 void badSink_e(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_e(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_61a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_61a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_61a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_61a.cpp	2025-05-05 11:26:03.631364351 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_61b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_61b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_61b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_61b.cpp	2025-05-05 11:26:03.582363283 +0800
@@ -28,7 +28,7 @@
 {
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     return data;
 }
 
@@ -49,7 +49,7 @@
 {
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_62a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_62a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_62a.cpp	2025-05-05 11:26:03.450360404 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_62b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_62b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_62b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_62b.cpp	2025-05-05 11:26:03.611363915 +0800
@@ -28,7 +28,7 @@
 {
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -47,7 +47,7 @@
 {
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_63a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_63a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_63a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_63a.cpp	2025-05-05 11:26:03.641364569 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_63b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_63b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_63b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_63b.cpp	2025-05-05 11:26:03.601363697 +0800
@@ -28,7 +28,7 @@
 {
     int * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -40,7 +40,7 @@
 {
     int * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_64a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_64a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_64a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_64a.cpp	2025-05-05 11:26:03.635364438 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_64b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_64b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_64b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_64b.cpp	2025-05-05 11:26:03.610363893 +0800
@@ -31,7 +31,7 @@
     /* dereference dataPtr into data */
     int * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -46,7 +46,7 @@
     /* dereference dataPtr into data */
     int * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_01.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_01.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_01.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_01.cpp	2025-05-05 11:26:03.587363392 +0800
@@ -31,9 +31,9 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -49,7 +49,7 @@
     data = new int64_t;
     /* FIX: Do NOT delete data in the source - the bad sink deletes data */
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     /* do nothing */
     /* FIX: Don't attempt to delete the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_02.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_02.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_02.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_02.cpp	2025-05-05 11:26:03.597363610 +0800
@@ -33,12 +33,12 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(1)
     {
@@ -110,7 +110,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -128,7 +128,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_03.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_03.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_03.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_03.cpp	2025-05-05 11:26:03.596363588 +0800
@@ -33,12 +33,12 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(5==5)
     {
@@ -110,7 +110,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -128,7 +128,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_04.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_04.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_04.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_04.cpp	2025-05-05 11:26:03.603363741 +0800
@@ -39,12 +39,12 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -134,7 +134,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_05.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_05.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_05.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_05.cpp	2025-05-05 11:26:03.602363719 +0800
@@ -39,12 +39,12 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(staticTrue)
     {
@@ -116,7 +116,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -134,7 +134,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_06.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_06.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_06.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_06.cpp	2025-05-05 11:26:03.624364199 +0800
@@ -38,12 +38,12 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -115,7 +115,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -133,7 +133,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_07.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_07.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_07.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_07.cpp	2025-05-05 11:26:03.595363566 +0800
@@ -38,12 +38,12 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(staticFive==5)
     {
@@ -115,7 +115,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -133,7 +133,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_08.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_08.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_08.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_08.cpp	2025-05-05 11:26:03.621364133 +0800
@@ -46,12 +46,12 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -69,7 +69,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(staticReturnsTrue())
     {
@@ -123,7 +123,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -141,7 +141,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_09.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_09.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_09.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_09.cpp	2025-05-05 11:26:03.626364242 +0800
@@ -33,12 +33,12 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -110,7 +110,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -128,7 +128,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_10.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_10.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_10.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_10.cpp	2025-05-05 11:26:03.639364526 +0800
@@ -33,12 +33,12 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(globalTrue)
     {
@@ -110,7 +110,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -128,7 +128,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_11.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_11.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_11.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_11.cpp	2025-05-05 11:26:03.599363653 +0800
@@ -32,12 +32,12 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(globalReturnsFalse())
     {
@@ -80,7 +80,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(globalReturnsTrue())
     {
@@ -109,7 +109,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_12.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_12.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_12.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_12.cpp	2025-05-05 11:26:03.624364199 +0800
@@ -32,7 +32,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     else
     {
@@ -68,13 +68,13 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     else
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -111,12 +111,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_13.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_13.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_13.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_13.cpp	2025-05-05 11:26:03.638364504 +0800
@@ -32,12 +32,12 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -109,7 +109,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -127,7 +127,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_14.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_14.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_14.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_14.cpp	2025-05-05 11:26:03.628364286 +0800
@@ -32,12 +32,12 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(globalFive!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     if(globalFive==5)
     {
@@ -109,7 +109,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_15.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_15.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_15.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_15.cpp	2025-05-05 11:26:03.637364482 +0800
@@ -33,7 +33,7 @@
     case 6:
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -44,7 +44,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
     case 6:
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -100,7 +100,7 @@
     case 6:
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -142,7 +142,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -172,7 +172,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_16.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_16.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_16.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_16.cpp	2025-05-05 11:26:03.641364569 +0800
@@ -32,13 +32,13 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
         break;
     }
 }
@@ -57,7 +57,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
         break;
     }
     while(1)
@@ -84,7 +84,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_17.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_17.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_17.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_17.cpp	2025-05-05 11:26:03.611363915 +0800
@@ -33,12 +33,12 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -57,7 +57,7 @@
     {
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
     for(k = 0; k < 1; k++)
     {
@@ -82,7 +82,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_18.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_18.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_18.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_18.cpp	2025-05-05 11:26:03.603363741 +0800
@@ -32,11 +32,11 @@
 source:
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
 source:
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     goto sink;
 sink:
     /* do nothing */
@@ -74,7 +74,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 void good()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_21.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_21.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_21.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_21.cpp	2025-05-05 11:26:03.637364482 +0800
@@ -32,7 +32,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -43,7 +43,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -80,7 +80,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2bStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_22a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_22a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_22a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_22a.cpp	2025-05-05 11:26:03.627364264 +0800
@@ -37,7 +37,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     badGlobal = 1; /* true */
     badSink(data);
 }
@@ -62,7 +62,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     goodB2G1Global = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -77,7 +77,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     goodB2G2Global = 1; /* true */
     goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_22b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_22b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_22b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_22b.cpp	2025-05-05 11:26:03.599363653 +0800
@@ -33,7 +33,7 @@
     if(badGlobal)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -80,7 +80,7 @@
     if(goodG2B1Global)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_31.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_31.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_31.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_31.cpp	2025-05-05 11:26:03.591363479 +0800
@@ -31,12 +31,12 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     {
         int64_t * dataCopy = data;
         int64_t * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -56,7 +56,7 @@
         int64_t * dataCopy = data;
         int64_t * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -68,7 +68,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     {
         int64_t * dataCopy = data;
         int64_t * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_32.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_32.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_32.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_32.cpp	2025-05-05 11:26:03.618364068 +0800
@@ -35,13 +35,13 @@
         int64_t * data = *dataPtr1;
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
         *dataPtr1 = data;
     }
     {
         int64_t * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -66,7 +66,7 @@
     {
         int64_t * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -82,7 +82,7 @@
         int64_t * data = *dataPtr1;
         data = new int64_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_33.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_33.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_33.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_33.cpp	2025-05-05 11:26:03.633364395 +0800
@@ -32,11 +32,11 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     {
         int64_t * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         int64_t * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -69,7 +69,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     {
         int64_t * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_34.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_34.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_34.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_34.cpp	2025-05-05 11:26:03.605363784 +0800
@@ -38,12 +38,12 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     myUnion.unionFirst = data;
     {
         int64_t * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -64,7 +64,7 @@
     {
         int64_t * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_int64(data, has_free_new_int64);
     }
 }
 
@@ -77,7 +77,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     myUnion.unionFirst = data;
     {
         int64_t * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_41.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_41.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_41.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_41.cpp	2025-05-05 11:26:03.609363872 +0800
@@ -27,7 +27,7 @@
 static void badSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 void bad()
@@ -37,7 +37,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     badSink(data);
 }
 
@@ -49,7 +49,7 @@
 static void goodG2BSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_42.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_42.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_42.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_42.cpp	2025-05-05 11:26:03.587363392 +0800
@@ -28,7 +28,7 @@
 {
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     return data;
 }
 
@@ -39,7 +39,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
 {
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_43.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_43.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_43.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_43.cpp	2025-05-05 11:26:03.617364046 +0800
@@ -28,7 +28,7 @@
 {
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 void bad()
@@ -38,7 +38,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -59,7 +59,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -67,7 +67,7 @@
 {
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_44.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_44.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_44.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_44.cpp	2025-05-05 11:26:03.618364068 +0800
@@ -27,7 +27,7 @@
 static void badSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -52,7 +52,7 @@
 static void goodG2BSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_45.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_45.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_45.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_45.cpp	2025-05-05 11:26:03.594363544 +0800
@@ -32,7 +32,7 @@
 {
     int64_t * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 void bad()
@@ -42,7 +42,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     badData = data;
     badSink();
 }
@@ -56,7 +56,7 @@
 {
     int64_t * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_51a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_51a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_51a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_51a.cpp	2025-05-05 11:26:03.624364199 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_51b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_51b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_51b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_51b.cpp	2025-05-05 11:26:03.632364373 +0800
@@ -27,7 +27,7 @@
 void badSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_52a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_52a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_52a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_52a.cpp	2025-05-05 11:26:03.593363523 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_52c.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_52c.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_52c.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_52c.cpp	2025-05-05 11:26:03.589363435 +0800
@@ -27,7 +27,7 @@
 void badSink_c(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_c(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_53a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_53a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_53a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_53a.cpp	2025-05-05 11:26:03.616364024 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_53d.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_53d.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_53d.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_53d.cpp	2025-05-05 11:26:03.596363588 +0800
@@ -27,7 +27,7 @@
 void badSink_d(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_d(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_54a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_54a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_54a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_54a.cpp	2025-05-05 11:26:03.606363806 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_54e.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_54e.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_54e.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_54e.cpp	2025-05-05 11:26:03.585363348 +0800
@@ -27,7 +27,7 @@
 void badSink_e(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_e(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_61a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_61a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_61a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_61a.cpp	2025-05-05 11:26:03.592363501 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_61b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_61b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_61b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_61b.cpp	2025-05-05 11:26:03.639364526 +0800
@@ -28,7 +28,7 @@
 {
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     return data;
 }
 
@@ -49,7 +49,7 @@
 {
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_62a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_62a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_62a.cpp	2025-05-05 11:26:03.585363348 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_62b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_62b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_62b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_62b.cpp	2025-05-05 11:26:03.617364046 +0800
@@ -28,7 +28,7 @@
 {
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -47,7 +47,7 @@
 {
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_63a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_63a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_63a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_63a.cpp	2025-05-05 11:26:03.622364155 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_63b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_63b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_63b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_63b.cpp	2025-05-05 11:26:03.626364242 +0800
@@ -28,7 +28,7 @@
 {
     int64_t * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -40,7 +40,7 @@
 {
     int64_t * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_64a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_64a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_64a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_64a.cpp	2025-05-05 11:26:03.615364002 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_64b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_64b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_64b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_64b.cpp	2025-05-05 11:26:03.594363544 +0800
@@ -31,7 +31,7 @@
     /* dereference dataPtr into data */
     int64_t * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -46,7 +46,7 @@
     /* dereference dataPtr into data */
     int64_t * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_65a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_65a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_65a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_65a.cpp	2025-05-05 11:26:03.608363850 +0800
@@ -36,7 +36,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_65b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_65b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_65b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_65b.cpp	2025-05-05 11:26:03.594363544 +0800
@@ -27,7 +27,7 @@
 void badSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_66a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_66a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_66a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_66a.cpp	2025-05-05 11:26:03.617364046 +0800
@@ -35,7 +35,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     /* put data in array */
     dataArray[2] = data;
     badSink(dataArray);
@@ -71,7 +71,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     dataArray[2] = data;
     goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_66b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_66b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_66b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_66b.cpp	2025-05-05 11:26:03.612363937 +0800
@@ -29,7 +29,7 @@
     /* copy data out of dataArray */
     int64_t * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     int64_t * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_67a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_67a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_67a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_67a.cpp	2025-05-05 11:26:03.593363523 +0800
@@ -40,7 +40,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     myStruct.structFirst = data;
     badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     myStruct.structFirst = data;
     goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_67b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_67b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_67b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_67b.cpp	2025-05-05 11:26:03.592363501 +0800
@@ -33,7 +33,7 @@
 {
     int64_t * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -45,7 +45,7 @@
 {
     int64_t * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_68a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_68a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_68a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_68a.cpp	2025-05-05 11:26:03.582363283 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     badData = data;
     badSink();
 }
@@ -71,7 +71,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_68b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_68b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_68b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_68b.cpp	2025-05-05 11:26:03.607363828 +0800
@@ -32,7 +32,7 @@
 {
     int64_t * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int64_t * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_72a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_72a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_72a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_72a.cpp	2025-05-05 11:26:03.606363806 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_72b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_72b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_72b.cpp	2025-05-05 11:26:03.448360360 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     int64_t * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int64_t * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_73a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_73a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_73a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_73a.cpp	2025-05-05 11:26:03.598363632 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_73b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_73b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_73b.cpp	2025-05-05 11:26:03.623364177 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     int64_t * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int64_t * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_74a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_74a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_74a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_74a.cpp	2025-05-05 11:26:03.606363806 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -79,7 +79,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_74b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_74b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_74b.cpp	2025-05-05 11:26:03.639364526 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     int64_t * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int64_t * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_81a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_81a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_81a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_81a.cpp	2025-05-05 11:26:03.617364046 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     const CWE415_Double_Free__new_delete_int64_t_81_base& o = CWE415_Double_Free__new_delete_int64_t_81_bad();
     o.action(data);
 }
@@ -59,7 +59,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     const CWE415_Double_Free__new_delete_int64_t_81_base& baseObject = CWE415_Double_Free__new_delete_int64_t_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_81_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_81_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_81_bad.cpp	2025-05-05 11:26:03.594363544 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_int64_t_81_bad::action(int64_t * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_81_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_81_goodG2B.cpp	2025-05-05 11:26:03.619364090 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_int64_t_81_goodG2B::action(int64_t * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_82a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_82a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_82a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_82a.cpp	2025-05-05 11:26:03.587363392 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     CWE415_Double_Free__new_delete_int64_t_82_base* baseObject = new CWE415_Double_Free__new_delete_int64_t_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -61,7 +61,7 @@
     data = NULL;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
     CWE415_Double_Free__new_delete_int64_t_82_base* baseObject = new CWE415_Double_Free__new_delete_int64_t_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_82_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_82_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_82_bad.cpp	2025-05-05 11:26:03.624364199 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_int64_t_82_bad::action(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_82_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_82_goodG2B.cpp	2025-05-05 11:26:03.584363326 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_int64_t_82_goodG2B::action(int64_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_83_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_83_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_83_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_83_bad.cpp	2025-05-05 11:26:03.602363719 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 CWE415_Double_Free__new_delete_int64_t_83_bad::~CWE415_Double_Free__new_delete_int64_t_83_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_83_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_83_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_83_goodB2G.cpp	2025-05-05 11:26:03.582363283 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 CWE415_Double_Free__new_delete_int64_t_83_goodB2G::~CWE415_Double_Free__new_delete_int64_t_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_83_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_83_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_83_goodG2B.cpp	2025-05-05 11:26:03.630364329 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_int64_t_83_goodG2B::~CWE415_Double_Free__new_delete_int64_t_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_84_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_84_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_84_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_84_bad.cpp	2025-05-05 11:26:03.637364482 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 CWE415_Double_Free__new_delete_int64_t_84_bad::~CWE415_Double_Free__new_delete_int64_t_84_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_84_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_84_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_84_goodB2G.cpp	2025-05-05 11:26:03.613363959 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new int64_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 
 CWE415_Double_Free__new_delete_int64_t_84_goodB2G::~CWE415_Double_Free__new_delete_int64_t_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_84_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_84_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int64_t_84_goodG2B.cpp	2025-05-05 11:26:03.591363479 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_int64_t_84_goodG2B::~CWE415_Double_Free__new_delete_int64_t_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int64(data, has_free_new_int64);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_65a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_65a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_65a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_65a.cpp	2025-05-05 11:26:03.600363675 +0800
@@ -36,7 +36,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_65b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_65b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_65b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_65b.cpp	2025-05-05 11:26:03.640364548 +0800
@@ -27,7 +27,7 @@
 void badSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_66a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_66a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_66a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_66a.cpp	2025-05-05 11:26:03.449360382 +0800
@@ -35,7 +35,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     /* put data in array */
     dataArray[2] = data;
     badSink(dataArray);
@@ -71,7 +71,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     dataArray[2] = data;
     goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_66b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_66b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_66b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_66b.cpp	2025-05-05 11:26:03.581363261 +0800
@@ -29,7 +29,7 @@
     /* copy data out of dataArray */
     int * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     int * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_67a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_67a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_67a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_67a.cpp	2025-05-05 11:26:03.640364548 +0800
@@ -40,7 +40,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     myStruct.structFirst = data;
     badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     myStruct.structFirst = data;
     goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_67b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_67b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_67b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_67b.cpp	2025-05-05 11:26:03.599363653 +0800
@@ -33,7 +33,7 @@
 {
     int * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -45,7 +45,7 @@
 {
     int * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_68a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_68a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_68a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_68a.cpp	2025-05-05 11:26:03.626364242 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     badData = data;
     badSink();
 }
@@ -71,7 +71,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_68b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_68b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_68b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_68b.cpp	2025-05-05 11:26:03.582363283 +0800
@@ -32,7 +32,7 @@
 {
     int * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_72a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_72a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_72a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_72a.cpp	2025-05-05 11:26:03.630364329 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_72b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_72b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_72b.cpp	2025-05-05 11:26:03.589363435 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     int * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_73a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_73a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_73a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_73a.cpp	2025-05-05 11:26:03.586363370 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_73b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_73b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_73b.cpp	2025-05-05 11:26:03.632364373 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     int * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_74a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_74a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_74a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_74a.cpp	2025-05-05 11:26:03.613363959 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -79,7 +79,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_74b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_74b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_74b.cpp	2025-05-05 11:26:03.616364024 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     int * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     int * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_81a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_81a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_81a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_81a.cpp	2025-05-05 11:26:03.585363348 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     const CWE415_Double_Free__new_delete_int_81_base& o = CWE415_Double_Free__new_delete_int_81_bad();
     o.action(data);
 }
@@ -59,7 +59,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     const CWE415_Double_Free__new_delete_int_81_base& baseObject = CWE415_Double_Free__new_delete_int_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_81_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_81_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_81_bad.cpp	2025-05-05 11:26:03.612363937 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_int_81_bad::action(int * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_81_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_81_goodG2B.cpp	2025-05-05 11:26:03.627364264 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_int_81_goodG2B::action(int * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_82a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_82a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_82a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_82a.cpp	2025-05-05 11:26:03.626364242 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     CWE415_Double_Free__new_delete_int_82_base* baseObject = new CWE415_Double_Free__new_delete_int_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -61,7 +61,7 @@
     data = NULL;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
     CWE415_Double_Free__new_delete_int_82_base* baseObject = new CWE415_Double_Free__new_delete_int_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_82_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_82_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_82_bad.cpp	2025-05-05 11:26:03.584363326 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_int_82_bad::action(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_82_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_82_goodG2B.cpp	2025-05-05 11:26:03.590363457 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_int_82_goodG2B::action(int * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_83_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_83_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_83_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_83_bad.cpp	2025-05-05 11:26:03.620364111 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 CWE415_Double_Free__new_delete_int_83_bad::~CWE415_Double_Free__new_delete_int_83_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_83_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_83_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_83_goodB2G.cpp	2025-05-05 11:26:03.598363632 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 CWE415_Double_Free__new_delete_int_83_goodB2G::~CWE415_Double_Free__new_delete_int_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_83_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_83_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_83_goodG2B.cpp	2025-05-05 11:26:03.600363675 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_int_83_goodG2B::~CWE415_Double_Free__new_delete_int_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_84_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_84_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_84_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_84_bad.cpp	2025-05-05 11:26:03.618364068 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 CWE415_Double_Free__new_delete_int_84_bad::~CWE415_Double_Free__new_delete_int_84_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_84_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_84_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_84_goodB2G.cpp	2025-05-05 11:26:03.605363784 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new int;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 
 CWE415_Double_Free__new_delete_int_84_goodB2G::~CWE415_Double_Free__new_delete_int_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_84_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_84_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_int_84_goodG2B.cpp	2025-05-05 11:26:03.612363937 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_int_84_goodG2B::~CWE415_Double_Free__new_delete_int_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_int(data, has_free_new_int);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_01.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_01.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_01.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_01.cpp	2025-05-05 11:26:03.596363588 +0800
@@ -31,9 +31,9 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -49,7 +49,7 @@
     data = new long;
     /* FIX: Do NOT delete data in the source - the bad sink deletes data */
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     /* do nothing */
     /* FIX: Don't attempt to delete the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_02.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_02.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_02.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_02.cpp	2025-05-05 11:26:03.593363523 +0800
@@ -33,12 +33,12 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(1)
     {
@@ -110,7 +110,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -128,7 +128,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_03.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_03.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_03.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_03.cpp	2025-05-05 11:26:03.582363283 +0800
@@ -33,12 +33,12 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(5==5)
     {
@@ -110,7 +110,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -128,7 +128,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_04.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_04.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_04.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_04.cpp	2025-05-05 11:26:03.629364308 +0800
@@ -39,12 +39,12 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -134,7 +134,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_05.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_05.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_05.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_05.cpp	2025-05-05 11:26:03.618364068 +0800
@@ -39,12 +39,12 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(staticTrue)
     {
@@ -116,7 +116,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -134,7 +134,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_06.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_06.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_06.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_06.cpp	2025-05-05 11:26:03.635364438 +0800
@@ -38,12 +38,12 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -115,7 +115,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -133,7 +133,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_07.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_07.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_07.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_07.cpp	2025-05-05 11:26:03.588363414 +0800
@@ -38,12 +38,12 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(staticFive==5)
     {
@@ -115,7 +115,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -133,7 +133,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_08.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_08.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_08.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_08.cpp	2025-05-05 11:26:03.635364438 +0800
@@ -46,12 +46,12 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -69,7 +69,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(staticReturnsTrue())
     {
@@ -123,7 +123,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -141,7 +141,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_09.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_09.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_09.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_09.cpp	2025-05-05 11:26:03.604363762 +0800
@@ -33,12 +33,12 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -110,7 +110,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -128,7 +128,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_10.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_10.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_10.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_10.cpp	2025-05-05 11:26:03.593363523 +0800
@@ -33,12 +33,12 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(globalTrue)
     {
@@ -110,7 +110,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -128,7 +128,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_11.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_11.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_11.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_11.cpp	2025-05-05 11:26:03.587363392 +0800
@@ -32,12 +32,12 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(globalReturnsFalse())
     {
@@ -80,7 +80,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(globalReturnsTrue())
     {
@@ -109,7 +109,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_12.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_12.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_12.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_12.cpp	2025-05-05 11:26:03.634364417 +0800
@@ -32,7 +32,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     else
     {
@@ -68,13 +68,13 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     else
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -111,12 +111,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_13.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_13.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_13.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_13.cpp	2025-05-05 11:26:03.598363632 +0800
@@ -32,12 +32,12 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -109,7 +109,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -127,7 +127,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_14.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_14.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_14.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_14.cpp	2025-05-05 11:26:03.637364482 +0800
@@ -32,12 +32,12 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(globalFive!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     if(globalFive==5)
     {
@@ -109,7 +109,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_15.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_15.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_15.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_15.cpp	2025-05-05 11:26:03.595363566 +0800
@@ -33,7 +33,7 @@
     case 6:
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -44,7 +44,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
     case 6:
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -100,7 +100,7 @@
     case 6:
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -142,7 +142,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -172,7 +172,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_16.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_16.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_16.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_16.cpp	2025-05-05 11:26:03.590363457 +0800
@@ -32,13 +32,13 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
         break;
     }
 }
@@ -57,7 +57,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
         break;
     }
     while(1)
@@ -84,7 +84,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_17.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_17.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_17.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_17.cpp	2025-05-05 11:26:03.614363980 +0800
@@ -33,12 +33,12 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -57,7 +57,7 @@
     {
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
     for(k = 0; k < 1; k++)
     {
@@ -82,7 +82,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_18.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_18.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_18.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_18.cpp	2025-05-05 11:26:03.623364177 +0800
@@ -32,11 +32,11 @@
 source:
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
 source:
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     goto sink;
 sink:
     /* do nothing */
@@ -74,7 +74,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 void good()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_21.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_21.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_21.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_21.cpp	2025-05-05 11:26:03.584363326 +0800
@@ -32,7 +32,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -43,7 +43,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -80,7 +80,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2bStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_22a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_22a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_22a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_22a.cpp	2025-05-05 11:26:03.599363653 +0800
@@ -37,7 +37,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     badGlobal = 1; /* true */
     badSink(data);
 }
@@ -62,7 +62,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     goodB2G1Global = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -77,7 +77,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     goodB2G2Global = 1; /* true */
     goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_22b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_22b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_22b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_22b.cpp	2025-05-05 11:26:03.608363850 +0800
@@ -33,7 +33,7 @@
     if(badGlobal)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -80,7 +80,7 @@
     if(goodG2B1Global)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_31.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_31.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_31.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_31.cpp	2025-05-05 11:26:03.590363457 +0800
@@ -31,12 +31,12 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     {
         long * dataCopy = data;
         long * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -56,7 +56,7 @@
         long * dataCopy = data;
         long * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -68,7 +68,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     {
         long * dataCopy = data;
         long * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_32.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_32.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_32.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_32.cpp	2025-05-05 11:26:03.611363915 +0800
@@ -35,13 +35,13 @@
         long * data = *dataPtr1;
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
         *dataPtr1 = data;
     }
     {
         long * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -66,7 +66,7 @@
     {
         long * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -82,7 +82,7 @@
         long * data = *dataPtr1;
         data = new long;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_long(data, has_free_new_long);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_33.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_33.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_33.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_33.cpp	2025-05-05 11:26:03.449360382 +0800
@@ -32,11 +32,11 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     {
         long * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         long * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -69,7 +69,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     {
         long * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_34.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_34.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_34.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_34.cpp	2025-05-05 11:26:03.450360404 +0800
@@ -38,12 +38,12 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     myUnion.unionFirst = data;
     {
         long * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -64,7 +64,7 @@
     {
         long * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_long(data, has_free_new_long);
     }
 }
 
@@ -77,7 +77,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     myUnion.unionFirst = data;
     {
         long * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_41.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_41.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_41.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_41.cpp	2025-05-05 11:26:03.632364373 +0800
@@ -27,7 +27,7 @@
 static void badSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 void bad()
@@ -37,7 +37,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     badSink(data);
 }
 
@@ -49,7 +49,7 @@
 static void goodG2BSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_42.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_42.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_42.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_42.cpp	2025-05-05 11:26:03.584363326 +0800
@@ -28,7 +28,7 @@
 {
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     return data;
 }
 
@@ -39,7 +39,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
 {
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_43.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_43.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_43.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_43.cpp	2025-05-05 11:26:03.581363261 +0800
@@ -28,7 +28,7 @@
 {
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 void bad()
@@ -38,7 +38,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -59,7 +59,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -67,7 +67,7 @@
 {
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_44.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_44.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_44.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_44.cpp	2025-05-05 11:26:03.630364329 +0800
@@ -27,7 +27,7 @@
 static void badSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -52,7 +52,7 @@
 static void goodG2BSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_45.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_45.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_45.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_45.cpp	2025-05-05 11:26:03.597363610 +0800
@@ -32,7 +32,7 @@
 {
     long * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 void bad()
@@ -42,7 +42,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     badData = data;
     badSink();
 }
@@ -56,7 +56,7 @@
 {
     long * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_51a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_51a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_51a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_51a.cpp	2025-05-05 11:26:03.605363784 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_51b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_51b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_51b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_51b.cpp	2025-05-05 11:26:03.586363370 +0800
@@ -27,7 +27,7 @@
 void badSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_52a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_52a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_52a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_52a.cpp	2025-05-05 11:26:03.624364199 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_52c.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_52c.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_52c.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_52c.cpp	2025-05-05 11:26:03.604363762 +0800
@@ -27,7 +27,7 @@
 void badSink_c(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_c(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_53a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_53a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_53a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_53a.cpp	2025-05-05 11:26:03.636364460 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_53d.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_53d.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_53d.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_53d.cpp	2025-05-05 11:26:03.447360339 +0800
@@ -27,7 +27,7 @@
 void badSink_d(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_d(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_54a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_54a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_54a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_54a.cpp	2025-05-05 11:26:03.614363980 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_54e.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_54e.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_54e.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_54e.cpp	2025-05-05 11:26:03.624364199 +0800
@@ -27,7 +27,7 @@
 void badSink_e(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_e(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_61a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_61a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_61a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_61a.cpp	2025-05-05 11:26:03.622364155 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_61b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_61b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_61b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_61b.cpp	2025-05-05 11:26:03.614363980 +0800
@@ -28,7 +28,7 @@
 {
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     return data;
 }
 
@@ -49,7 +49,7 @@
 {
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_62a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_62a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_62a.cpp	2025-05-05 11:26:03.639364526 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_62b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_62b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_62b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_62b.cpp	2025-05-05 11:26:03.634364417 +0800
@@ -28,7 +28,7 @@
 {
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -47,7 +47,7 @@
 {
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_63a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_63a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_63a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_63a.cpp	2025-05-05 11:26:03.582363283 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_63b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_63b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_63b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_63b.cpp	2025-05-05 11:26:03.601363697 +0800
@@ -28,7 +28,7 @@
 {
     long * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -40,7 +40,7 @@
 {
     long * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_64a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_64a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_64a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_64a.cpp	2025-05-05 11:26:03.581363261 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_64b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_64b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_64b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_64b.cpp	2025-05-05 11:26:03.588363414 +0800
@@ -31,7 +31,7 @@
     /* dereference dataPtr into data */
     long * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -46,7 +46,7 @@
     /* dereference dataPtr into data */
     long * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_65a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_65a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_65a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_65a.cpp	2025-05-05 11:26:03.594363544 +0800
@@ -36,7 +36,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_65b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_65b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_65b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_65b.cpp	2025-05-05 11:26:03.589363435 +0800
@@ -27,7 +27,7 @@
 void badSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_66a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_66a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_66a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_66a.cpp	2025-05-05 11:26:03.623364177 +0800
@@ -35,7 +35,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     /* put data in array */
     dataArray[2] = data;
     badSink(dataArray);
@@ -71,7 +71,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     dataArray[2] = data;
     goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_66b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_66b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_66b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_66b.cpp	2025-05-05 11:26:03.640364548 +0800
@@ -29,7 +29,7 @@
     /* copy data out of dataArray */
     long * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     long * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_67a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_67a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_67a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_67a.cpp	2025-05-05 11:26:03.631364351 +0800
@@ -40,7 +40,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     myStruct.structFirst = data;
     badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     myStruct.structFirst = data;
     goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_67b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_67b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_67b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_67b.cpp	2025-05-05 11:26:03.599363653 +0800
@@ -33,7 +33,7 @@
 {
     long * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -45,7 +45,7 @@
 {
     long * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_68a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_68a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_68a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_68a.cpp	2025-05-05 11:26:03.587363392 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     badData = data;
     badSink();
 }
@@ -71,7 +71,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_68b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_68b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_68b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_68b.cpp	2025-05-05 11:26:03.604363762 +0800
@@ -32,7 +32,7 @@
 {
     long * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     long * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_72a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_72a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_72a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_72a.cpp	2025-05-05 11:26:03.590363457 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_72b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_72b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_72b.cpp	2025-05-05 11:26:03.584363326 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     long * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     long * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_73a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_73a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_73a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_73a.cpp	2025-05-05 11:26:03.609363872 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_73b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_73b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_73b.cpp	2025-05-05 11:26:03.608363850 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     long * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     long * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_74a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_74a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_74a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_74a.cpp	2025-05-05 11:26:03.611363915 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -79,7 +79,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_74b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_74b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_74b.cpp	2025-05-05 11:26:03.633364395 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     long * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     long * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_81a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_81a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_81a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_81a.cpp	2025-05-05 11:26:03.600363675 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     const CWE415_Double_Free__new_delete_long_81_base& o = CWE415_Double_Free__new_delete_long_81_bad();
     o.action(data);
 }
@@ -59,7 +59,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     const CWE415_Double_Free__new_delete_long_81_base& baseObject = CWE415_Double_Free__new_delete_long_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_81_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_81_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_81_bad.cpp	2025-05-05 11:26:03.592363501 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_long_81_bad::action(long * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_81_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_81_goodG2B.cpp	2025-05-05 11:26:03.626364242 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_long_81_goodG2B::action(long * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_82a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_82a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_82a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_82a.cpp	2025-05-05 11:26:03.595363566 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     CWE415_Double_Free__new_delete_long_82_base* baseObject = new CWE415_Double_Free__new_delete_long_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -61,7 +61,7 @@
     data = NULL;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
     CWE415_Double_Free__new_delete_long_82_base* baseObject = new CWE415_Double_Free__new_delete_long_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_82_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_82_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_82_bad.cpp	2025-05-05 11:26:03.639364526 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_long_82_bad::action(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_82_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_82_goodG2B.cpp	2025-05-05 11:26:03.602363719 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_long_82_goodG2B::action(long * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_83_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_83_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_83_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_83_bad.cpp	2025-05-05 11:26:03.605363784 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 CWE415_Double_Free__new_delete_long_83_bad::~CWE415_Double_Free__new_delete_long_83_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_83_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_83_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_83_goodB2G.cpp	2025-05-05 11:26:03.633364395 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 CWE415_Double_Free__new_delete_long_83_goodB2G::~CWE415_Double_Free__new_delete_long_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_83_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_83_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_83_goodG2B.cpp	2025-05-05 11:26:03.625364220 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_long_83_goodG2B::~CWE415_Double_Free__new_delete_long_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_84_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_84_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_84_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_84_bad.cpp	2025-05-05 11:26:03.592363501 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 CWE415_Double_Free__new_delete_long_84_bad::~CWE415_Double_Free__new_delete_long_84_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_84_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_84_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_84_goodB2G.cpp	2025-05-05 11:26:03.630364329 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new long;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 
 CWE415_Double_Free__new_delete_long_84_goodB2G::~CWE415_Double_Free__new_delete_long_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_84_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_84_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_long_84_goodG2B.cpp	2025-05-05 11:26:03.635364438 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_long_84_goodG2B::~CWE415_Double_Free__new_delete_long_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_long(data, has_free_new_long);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_01.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_01.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_01.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_01.cpp	2025-05-05 11:26:03.620364111 +0800
@@ -31,9 +31,9 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -49,7 +49,7 @@
     data = new twoIntsStruct;
     /* FIX: Do NOT delete data in the source - the bad sink deletes data */
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     /* do nothing */
     /* FIX: Don't attempt to delete the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_02.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_02.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_02.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_02.cpp	2025-05-05 11:26:03.629364308 +0800
@@ -33,12 +33,12 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(1)
     {
@@ -110,7 +110,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -128,7 +128,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_03.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_03.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_03.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_03.cpp	2025-05-05 11:26:03.449360382 +0800
@@ -33,12 +33,12 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(5==5)
     {
@@ -110,7 +110,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -128,7 +128,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_04.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_04.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_04.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_04.cpp	2025-05-05 11:26:03.630364329 +0800
@@ -39,12 +39,12 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -134,7 +134,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_05.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_05.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_05.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_05.cpp	2025-05-05 11:26:03.584363326 +0800
@@ -39,12 +39,12 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(staticTrue)
     {
@@ -116,7 +116,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -134,7 +134,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_06.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_06.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_06.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_06.cpp	2025-05-05 11:26:03.448360360 +0800
@@ -38,12 +38,12 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -115,7 +115,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -133,7 +133,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_07.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_07.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_07.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_07.cpp	2025-05-05 11:26:03.640364548 +0800
@@ -38,12 +38,12 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(staticFive==5)
     {
@@ -115,7 +115,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -133,7 +133,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_08.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_08.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_08.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_08.cpp	2025-05-05 11:26:03.617364046 +0800
@@ -46,12 +46,12 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -69,7 +69,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(staticReturnsTrue())
     {
@@ -123,7 +123,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -141,7 +141,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_09.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_09.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_09.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_09.cpp	2025-05-05 11:26:03.614363980 +0800
@@ -33,12 +33,12 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -110,7 +110,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -128,7 +128,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_10.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_10.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_10.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_10.cpp	2025-05-05 11:26:03.619364090 +0800
@@ -33,12 +33,12 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(globalTrue)
     {
@@ -110,7 +110,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -128,7 +128,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_11.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_11.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_11.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_11.cpp	2025-05-05 11:26:03.623364177 +0800
@@ -32,12 +32,12 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(globalReturnsFalse())
     {
@@ -80,7 +80,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(globalReturnsTrue())
     {
@@ -109,7 +109,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_12.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_12.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_12.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_12.cpp	2025-05-05 11:26:03.596363588 +0800
@@ -32,7 +32,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     else
     {
@@ -68,13 +68,13 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     else
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -111,12 +111,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_13.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_13.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_13.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_13.cpp	2025-05-05 11:26:03.607363828 +0800
@@ -32,12 +32,12 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -109,7 +109,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -127,7 +127,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_14.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_14.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_14.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_14.cpp	2025-05-05 11:26:03.586363370 +0800
@@ -32,12 +32,12 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(globalFive!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     if(globalFive==5)
     {
@@ -109,7 +109,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_15.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_15.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_15.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_15.cpp	2025-05-05 11:26:03.447360339 +0800
@@ -33,7 +33,7 @@
     case 6:
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -44,7 +44,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
     case 6:
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -100,7 +100,7 @@
     case 6:
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -142,7 +142,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -172,7 +172,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_16.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_16.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_16.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_16.cpp	2025-05-05 11:26:03.608363850 +0800
@@ -32,13 +32,13 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
         break;
     }
 }
@@ -57,7 +57,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
         break;
     }
     while(1)
@@ -84,7 +84,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_17.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_17.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_17.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_17.cpp	2025-05-05 11:26:03.447360339 +0800
@@ -33,12 +33,12 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -57,7 +57,7 @@
     {
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
     for(k = 0; k < 1; k++)
     {
@@ -82,7 +82,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_18.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_18.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_18.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_18.cpp	2025-05-05 11:26:03.633364395 +0800
@@ -32,11 +32,11 @@
 source:
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
 source:
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     goto sink;
 sink:
     /* do nothing */
@@ -74,7 +74,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 void good()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_21.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_21.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_21.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_21.cpp	2025-05-05 11:26:03.637364482 +0800
@@ -32,7 +32,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -43,7 +43,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -80,7 +80,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2bStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_22a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_22a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_22a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_22a.cpp	2025-05-05 11:26:03.591363479 +0800
@@ -37,7 +37,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     badGlobal = 1; /* true */
     badSink(data);
 }
@@ -62,7 +62,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     goodB2G1Global = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -77,7 +77,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     goodB2G2Global = 1; /* true */
     goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_22b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_22b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_22b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_22b.cpp	2025-05-05 11:26:03.602363719 +0800
@@ -33,7 +33,7 @@
     if(badGlobal)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -80,7 +80,7 @@
     if(goodG2B1Global)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_31.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_31.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_31.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_31.cpp	2025-05-05 11:26:03.612363937 +0800
@@ -31,12 +31,12 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     {
         twoIntsStruct * dataCopy = data;
         twoIntsStruct * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -56,7 +56,7 @@
         twoIntsStruct * dataCopy = data;
         twoIntsStruct * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -68,7 +68,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     {
         twoIntsStruct * dataCopy = data;
         twoIntsStruct * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_32.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_32.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_32.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_32.cpp	2025-05-05 11:26:03.621364133 +0800
@@ -35,13 +35,13 @@
         twoIntsStruct * data = *dataPtr1;
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
         *dataPtr1 = data;
     }
     {
         twoIntsStruct * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -66,7 +66,7 @@
     {
         twoIntsStruct * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -82,7 +82,7 @@
         twoIntsStruct * data = *dataPtr1;
         data = new twoIntsStruct;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_33.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_33.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_33.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_33.cpp	2025-05-05 11:26:03.597363610 +0800
@@ -32,11 +32,11 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     {
         twoIntsStruct * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         twoIntsStruct * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -69,7 +69,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     {
         twoIntsStruct * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_34.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_34.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_34.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_34.cpp	2025-05-05 11:26:03.609363872 +0800
@@ -38,12 +38,12 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     myUnion.unionFirst = data;
     {
         twoIntsStruct * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -64,7 +64,7 @@
     {
         twoIntsStruct * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_struct(data, has_free_new_struct);
     }
 }
 
@@ -77,7 +77,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     myUnion.unionFirst = data;
     {
         twoIntsStruct * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_41.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_41.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_41.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_41.cpp	2025-05-05 11:26:03.616364024 +0800
@@ -27,7 +27,7 @@
 static void badSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 void bad()
@@ -37,7 +37,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     badSink(data);
 }
 
@@ -49,7 +49,7 @@
 static void goodG2BSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_42.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_42.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_42.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_42.cpp	2025-05-05 11:26:03.633364395 +0800
@@ -28,7 +28,7 @@
 {
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     return data;
 }
 
@@ -39,7 +39,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
 {
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_43.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_43.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_43.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_43.cpp	2025-05-05 11:26:03.621364133 +0800
@@ -28,7 +28,7 @@
 {
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 void bad()
@@ -38,7 +38,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -59,7 +59,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -67,7 +67,7 @@
 {
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_44.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_44.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_44.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_44.cpp	2025-05-05 11:26:03.586363370 +0800
@@ -27,7 +27,7 @@
 static void badSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -52,7 +52,7 @@
 static void goodG2BSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_45.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_45.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_45.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_45.cpp	2025-05-05 11:26:03.601363697 +0800
@@ -32,7 +32,7 @@
 {
     twoIntsStruct * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 void bad()
@@ -42,7 +42,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     badData = data;
     badSink();
 }
@@ -56,7 +56,7 @@
 {
     twoIntsStruct * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_51a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_51a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_51a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_51a.cpp	2025-05-05 11:26:03.597363610 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_51b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_51b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_51b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_51b.cpp	2025-05-05 11:26:03.611363915 +0800
@@ -27,7 +27,7 @@
 void badSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_52a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_52a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_52a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_52a.cpp	2025-05-05 11:26:03.633364395 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_52c.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_52c.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_52c.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_52c.cpp	2025-05-05 11:26:03.602363719 +0800
@@ -27,7 +27,7 @@
 void badSink_c(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_c(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_53a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_53a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_53a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_53a.cpp	2025-05-05 11:26:03.624364199 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_53d.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_53d.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_53d.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_53d.cpp	2025-05-05 11:26:03.626364242 +0800
@@ -27,7 +27,7 @@
 void badSink_d(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_d(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_54a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_54a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_54a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_54a.cpp	2025-05-05 11:26:03.633364395 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_54e.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_54e.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_54e.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_54e.cpp	2025-05-05 11:26:03.630364329 +0800
@@ -27,7 +27,7 @@
 void badSink_e(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_e(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_61a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_61a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_61a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_61a.cpp	2025-05-05 11:26:03.584363326 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_61b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_61b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_61b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_61b.cpp	2025-05-05 11:26:03.597363610 +0800
@@ -28,7 +28,7 @@
 {
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     return data;
 }
 
@@ -49,7 +49,7 @@
 {
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_62a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_62a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_62a.cpp	2025-05-05 11:26:03.583363304 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_62b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_62b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_62b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_62b.cpp	2025-05-05 11:26:03.621364133 +0800
@@ -28,7 +28,7 @@
 {
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -47,7 +47,7 @@
 {
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_63a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_63a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_63a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_63a.cpp	2025-05-05 11:26:03.600363675 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_63b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_63b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_63b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_63b.cpp	2025-05-05 11:26:03.621364133 +0800
@@ -28,7 +28,7 @@
 {
     twoIntsStruct * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -40,7 +40,7 @@
 {
     twoIntsStruct * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_64a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_64a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_64a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_64a.cpp	2025-05-05 11:26:03.610363893 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_64b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_64b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_64b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_64b.cpp	2025-05-05 11:26:03.640364548 +0800
@@ -31,7 +31,7 @@
     /* dereference dataPtr into data */
     twoIntsStruct * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -46,7 +46,7 @@
     /* dereference dataPtr into data */
     twoIntsStruct * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_65a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_65a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_65a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_65a.cpp	2025-05-05 11:26:03.609363872 +0800
@@ -36,7 +36,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_65b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_65b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_65b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_65b.cpp	2025-05-05 11:26:03.581363261 +0800
@@ -27,7 +27,7 @@
 void badSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_66a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_66a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_66a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_66a.cpp	2025-05-05 11:26:03.447360339 +0800
@@ -35,7 +35,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     /* put data in array */
     dataArray[2] = data;
     badSink(dataArray);
@@ -71,7 +71,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     dataArray[2] = data;
     goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_66b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_66b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_66b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_66b.cpp	2025-05-05 11:26:03.600363675 +0800
@@ -29,7 +29,7 @@
     /* copy data out of dataArray */
     twoIntsStruct * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     twoIntsStruct * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_67a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_67a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_67a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_67a.cpp	2025-05-05 11:26:03.580363239 +0800
@@ -40,7 +40,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     myStruct.structFirst = data;
     badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     myStruct.structFirst = data;
     goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_67b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_67b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_67b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_67b.cpp	2025-05-05 11:26:03.592363501 +0800
@@ -33,7 +33,7 @@
 {
     twoIntsStruct * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -45,7 +45,7 @@
 {
     twoIntsStruct * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_68a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_68a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_68a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_68a.cpp	2025-05-05 11:26:03.583363304 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     badData = data;
     badSink();
 }
@@ -71,7 +71,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_68b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_68b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_68b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_68b.cpp	2025-05-05 11:26:03.604363762 +0800
@@ -32,7 +32,7 @@
 {
     twoIntsStruct * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     twoIntsStruct * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_72a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_72a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_72a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_72a.cpp	2025-05-05 11:26:03.613363959 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_72b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_72b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_72b.cpp	2025-05-05 11:26:03.630364329 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     twoIntsStruct * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     twoIntsStruct * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_73a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_73a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_73a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_73a.cpp	2025-05-05 11:26:03.631364351 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_73b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_73b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_73b.cpp	2025-05-05 11:26:03.610363893 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     twoIntsStruct * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     twoIntsStruct * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_74a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_74a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_74a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_74a.cpp	2025-05-05 11:26:03.634364417 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -79,7 +79,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_74b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_74b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_74b.cpp	2025-05-05 11:26:03.636364460 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     twoIntsStruct * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     twoIntsStruct * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_81a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_81a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_81a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_81a.cpp	2025-05-05 11:26:03.635364438 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     const CWE415_Double_Free__new_delete_struct_81_base& o = CWE415_Double_Free__new_delete_struct_81_bad();
     o.action(data);
 }
@@ -59,7 +59,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     const CWE415_Double_Free__new_delete_struct_81_base& baseObject = CWE415_Double_Free__new_delete_struct_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_81_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_81_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_81_bad.cpp	2025-05-05 11:26:03.609363872 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_struct_81_bad::action(twoIntsStruct * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_81_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_81_goodG2B.cpp	2025-05-05 11:26:03.616364024 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_struct_81_goodG2B::action(twoIntsStruct * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_82a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_82a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_82a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_82a.cpp	2025-05-05 11:26:03.615364002 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     CWE415_Double_Free__new_delete_struct_82_base* baseObject = new CWE415_Double_Free__new_delete_struct_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -61,7 +61,7 @@
     data = NULL;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
     CWE415_Double_Free__new_delete_struct_82_base* baseObject = new CWE415_Double_Free__new_delete_struct_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_82_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_82_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_82_bad.cpp	2025-05-05 11:26:03.597363610 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_struct_82_bad::action(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_82_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_82_goodG2B.cpp	2025-05-05 11:26:03.610363893 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_struct_82_goodG2B::action(twoIntsStruct * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_83_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_83_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_83_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_83_bad.cpp	2025-05-05 11:26:03.581363261 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 CWE415_Double_Free__new_delete_struct_83_bad::~CWE415_Double_Free__new_delete_struct_83_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_83_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_83_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_83_goodB2G.cpp	2025-05-05 11:26:03.580363239 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 CWE415_Double_Free__new_delete_struct_83_goodB2G::~CWE415_Double_Free__new_delete_struct_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_83_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_83_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_83_goodG2B.cpp	2025-05-05 11:26:03.615364002 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_struct_83_goodG2B::~CWE415_Double_Free__new_delete_struct_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_84_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_84_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_84_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_84_bad.cpp	2025-05-05 11:26:03.448360360 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 CWE415_Double_Free__new_delete_struct_84_bad::~CWE415_Double_Free__new_delete_struct_84_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_84_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_84_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_84_goodB2G.cpp	2025-05-05 11:26:03.636364460 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new twoIntsStruct;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 
 CWE415_Double_Free__new_delete_struct_84_goodB2G::~CWE415_Double_Free__new_delete_struct_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_84_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_84_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_struct_84_goodG2B.cpp	2025-05-05 11:26:03.599363653 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_struct_84_goodG2B::~CWE415_Double_Free__new_delete_struct_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_struct(data, has_free_new_struct);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_01.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_01.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_01.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_01.cpp	2025-05-05 11:26:03.641364569 +0800
@@ -31,9 +31,9 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -49,7 +49,7 @@
     data = new wchar_t;
     /* FIX: Do NOT delete data in the source - the bad sink deletes data */
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
@@ -60,7 +60,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     /* do nothing */
     /* FIX: Don't attempt to delete the memory */
     ; /* empty statement needed for some flow variants */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_02.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_02.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_02.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_02.cpp	2025-05-05 11:26:03.615364002 +0800
@@ -33,12 +33,12 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(0)
     {
@@ -81,7 +81,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(1)
     {
@@ -110,7 +110,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -128,7 +128,7 @@
     if(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_03.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_03.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_03.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_03.cpp	2025-05-05 11:26:03.592363501 +0800
@@ -33,12 +33,12 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(5!=5)
     {
@@ -81,7 +81,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(5==5)
     {
@@ -110,7 +110,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -128,7 +128,7 @@
     if(5==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_04.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_04.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_04.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_04.cpp	2025-05-05 11:26:03.622364155 +0800
@@ -39,12 +39,12 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(STATIC_CONST_FALSE)
     {
@@ -87,7 +87,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(STATIC_CONST_TRUE)
     {
@@ -116,7 +116,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -134,7 +134,7 @@
     if(STATIC_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_05.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_05.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_05.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_05.cpp	2025-05-05 11:26:03.589363435 +0800
@@ -39,12 +39,12 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -62,7 +62,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(staticFalse)
     {
@@ -87,7 +87,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(staticTrue)
     {
@@ -116,7 +116,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -134,7 +134,7 @@
     if(staticTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_06.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_06.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_06.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_06.cpp	2025-05-05 11:26:03.619364090 +0800
@@ -38,12 +38,12 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(STATIC_CONST_FIVE!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(STATIC_CONST_FIVE==5)
     {
@@ -115,7 +115,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -133,7 +133,7 @@
     if(STATIC_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_07.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_07.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_07.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_07.cpp	2025-05-05 11:26:03.635364438 +0800
@@ -38,12 +38,12 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -61,7 +61,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(staticFive!=5)
     {
@@ -86,7 +86,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(staticFive==5)
     {
@@ -115,7 +115,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -133,7 +133,7 @@
     if(staticFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_08.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_08.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_08.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_08.cpp	2025-05-05 11:26:03.617364046 +0800
@@ -46,12 +46,12 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -69,7 +69,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(staticReturnsFalse())
     {
@@ -94,7 +94,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(staticReturnsTrue())
     {
@@ -123,7 +123,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -141,7 +141,7 @@
     if(staticReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_09.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_09.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_09.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_09.cpp	2025-05-05 11:26:03.593363523 +0800
@@ -33,12 +33,12 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(GLOBAL_CONST_FALSE)
     {
@@ -81,7 +81,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(GLOBAL_CONST_TRUE)
     {
@@ -110,7 +110,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -128,7 +128,7 @@
     if(GLOBAL_CONST_TRUE)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_10.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_10.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_10.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_10.cpp	2025-05-05 11:26:03.607363828 +0800
@@ -33,12 +33,12 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(globalFalse)
     {
@@ -81,7 +81,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(globalTrue)
     {
@@ -110,7 +110,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -128,7 +128,7 @@
     if(globalTrue)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_11.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_11.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_11.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_11.cpp	2025-05-05 11:26:03.581363261 +0800
@@ -32,12 +32,12 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(globalReturnsFalse())
     {
@@ -80,7 +80,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(globalReturnsTrue())
     {
@@ -109,7 +109,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalReturnsTrue())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_12.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_12.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_12.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_12.cpp	2025-05-05 11:26:03.606363806 +0800
@@ -32,7 +32,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     else
     {
@@ -42,7 +42,7 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     else
     {
@@ -68,13 +68,13 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     else
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(globalReturnsTrueOrFalse())
     {
@@ -111,12 +111,12 @@
     if(globalReturnsTrueOrFalse())
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     else
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_13.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_13.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_13.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_13.cpp	2025-05-05 11:26:03.614363980 +0800
@@ -32,12 +32,12 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(GLOBAL_CONST_FIVE!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(GLOBAL_CONST_FIVE==5)
     {
@@ -109,7 +109,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -127,7 +127,7 @@
     if(GLOBAL_CONST_FIVE==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_14.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_14.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_14.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_14.cpp	2025-05-05 11:26:03.613363959 +0800
@@ -32,12 +32,12 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -55,7 +55,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(globalFive!=5)
     {
@@ -80,7 +80,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     if(globalFive==5)
     {
@@ -109,7 +109,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -127,7 +127,7 @@
     if(globalFive==5)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_15.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_15.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_15.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_15.cpp	2025-05-05 11:26:03.618364068 +0800
@@ -33,7 +33,7 @@
     case 6:
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -44,7 +44,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -68,7 +68,7 @@
     case 6:
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -100,7 +100,7 @@
     case 6:
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -142,7 +142,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
@@ -172,7 +172,7 @@
     {
     case 7:
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
         break;
     default:
         /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_16.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_16.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_16.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_16.cpp	2025-05-05 11:26:03.584363326 +0800
@@ -32,13 +32,13 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
         break;
     }
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
         break;
     }
 }
@@ -57,7 +57,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
         break;
     }
     while(1)
@@ -84,7 +84,7 @@
     while(1)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
         break;
     }
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_17.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_17.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_17.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_17.cpp	2025-05-05 11:26:03.588363414 +0800
@@ -33,12 +33,12 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -57,7 +57,7 @@
     {
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
     for(k = 0; k < 1; k++)
     {
@@ -82,7 +82,7 @@
     for(j = 0; j < 1; j++)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_18.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_18.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_18.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_18.cpp	2025-05-05 11:26:03.632364373 +0800
@@ -32,11 +32,11 @@
 source:
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -53,7 +53,7 @@
 source:
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     goto sink;
 sink:
     /* do nothing */
@@ -74,7 +74,7 @@
     goto sink;
 sink:
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 void good()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_21.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_21.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_21.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_21.cpp	2025-05-05 11:26:03.595363566 +0800
@@ -32,7 +32,7 @@
     if(badStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -43,7 +43,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     badStatic = 1; /* true */
     badSink(data);
 }
@@ -80,7 +80,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     goodB2G1Static = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -103,7 +103,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     goodB2G2Static = 1; /* true */
     goodB2G2Sink(data);
 }
@@ -114,7 +114,7 @@
     if(goodG2bStatic)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_22a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_22a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_22a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_22a.cpp	2025-05-05 11:26:03.604363762 +0800
@@ -37,7 +37,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     badGlobal = 1; /* true */
     badSink(data);
 }
@@ -62,7 +62,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     goodB2G1Global = 0; /* false */
     goodB2G1Sink(data);
 }
@@ -77,7 +77,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     goodB2G2Global = 1; /* true */
     goodB2G2Sink(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_22b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_22b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_22b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_22b.cpp	2025-05-05 11:26:03.603363741 +0800
@@ -33,7 +33,7 @@
     if(badGlobal)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -80,7 +80,7 @@
     if(goodG2B1Global)
     {
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_31.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_31.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_31.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_31.cpp	2025-05-05 11:26:03.592363501 +0800
@@ -31,12 +31,12 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     {
         wchar_t * dataCopy = data;
         wchar_t * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -56,7 +56,7 @@
         wchar_t * dataCopy = data;
         wchar_t * data = dataCopy;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -68,7 +68,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     {
         wchar_t * dataCopy = data;
         wchar_t * data = dataCopy;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_32.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_32.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_32.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_32.cpp	2025-05-05 11:26:03.627364264 +0800
@@ -35,13 +35,13 @@
         wchar_t * data = *dataPtr1;
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
         *dataPtr1 = data;
     }
     {
         wchar_t * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -66,7 +66,7 @@
     {
         wchar_t * data = *dataPtr2;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -82,7 +82,7 @@
         wchar_t * data = *dataPtr1;
         data = new wchar_t;
         /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
         *dataPtr1 = data;
     }
     {
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_33.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_33.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_33.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_33.cpp	2025-05-05 11:26:03.626364242 +0800
@@ -32,11 +32,11 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     {
         wchar_t * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -56,7 +56,7 @@
     {
         wchar_t * data = dataRef;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -69,7 +69,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     {
         wchar_t * data = dataRef;
         /* do nothing */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_34.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_34.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_34.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_34.cpp	2025-05-05 11:26:03.447360339 +0800
@@ -38,12 +38,12 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     myUnion.unionFirst = data;
     {
         wchar_t * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -64,7 +64,7 @@
     {
         wchar_t * data = myUnion.unionSecond;
         /* POTENTIAL FLAW: Possibly deleting memory twice */
-        delete data;
+        callback_new_wchar(data, has_free_new_wchar);
     }
 }
 
@@ -77,7 +77,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     myUnion.unionFirst = data;
     {
         wchar_t * data = myUnion.unionSecond;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_41.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_41.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_41.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_41.cpp	2025-05-05 11:26:03.602363719 +0800
@@ -27,7 +27,7 @@
 static void badSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 void bad()
@@ -37,7 +37,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     badSink(data);
 }
 
@@ -49,7 +49,7 @@
 static void goodG2BSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 static void goodG2B()
@@ -77,7 +77,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_42.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_42.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_42.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_42.cpp	2025-05-05 11:26:03.613363959 +0800
@@ -28,7 +28,7 @@
 {
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     return data;
 }
 
@@ -39,7 +39,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -61,7 +61,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -69,7 +69,7 @@
 {
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_43.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_43.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_43.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_43.cpp	2025-05-05 11:26:03.617364046 +0800
@@ -28,7 +28,7 @@
 {
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 void bad()
@@ -38,7 +38,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -59,7 +59,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G() uses the BadSource with the GoodSink */
@@ -67,7 +67,7 @@
 {
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 static void goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_44.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_44.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_44.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_44.cpp	2025-05-05 11:26:03.608363850 +0800
@@ -27,7 +27,7 @@
 static void badSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 void bad()
@@ -39,7 +39,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -52,7 +52,7 @@
 static void goodG2BSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 static void goodG2B()
@@ -82,7 +82,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_45.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_45.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_45.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_45.cpp	2025-05-05 11:26:03.595363566 +0800
@@ -32,7 +32,7 @@
 {
     wchar_t * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 void bad()
@@ -42,7 +42,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     badData = data;
     badSink();
 }
@@ -56,7 +56,7 @@
 {
     wchar_t * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 static void goodG2B()
@@ -86,7 +86,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_51a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_51a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_51a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_51a.cpp	2025-05-05 11:26:03.599363653 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     badSink(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     goodB2GSink(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_51b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_51b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_51b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_51b.cpp	2025-05-05 11:26:03.621364133 +0800
@@ -27,7 +27,7 @@
 void badSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_52a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_52a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_52a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_52a.cpp	2025-05-05 11:26:03.614363980 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_52c.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_52c.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_52c.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_52c.cpp	2025-05-05 11:26:03.640364548 +0800
@@ -27,7 +27,7 @@
 void badSink_c(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_c(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_53a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_53a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_53a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_53a.cpp	2025-05-05 11:26:03.627364264 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_53d.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_53d.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_53d.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_53d.cpp	2025-05-05 11:26:03.634364417 +0800
@@ -27,7 +27,7 @@
 void badSink_d(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_d(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_54a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_54a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_54a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_54a.cpp	2025-05-05 11:26:03.636364460 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     badSink_b(data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     goodB2GSink_b(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_54e.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_54e.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_54e.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_54e.cpp	2025-05-05 11:26:03.599363653 +0800
@@ -27,7 +27,7 @@
 void badSink_e(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink_e(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_61a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_61a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_61a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_61a.cpp	2025-05-05 11:26:03.640364548 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     data = goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_61b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_61b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_61b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_61b.cpp	2025-05-05 11:26:03.598363632 +0800
@@ -28,7 +28,7 @@
 {
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     return data;
 }
 
@@ -49,7 +49,7 @@
 {
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     return data;
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_62a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_62a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_62a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_62a.cpp	2025-05-05 11:26:03.603363741 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     badSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -51,7 +51,7 @@
     data = NULL;
     goodG2BSource(data);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_62b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_62b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_62b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_62b.cpp	2025-05-05 11:26:03.591363479 +0800
@@ -28,7 +28,7 @@
 {
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -47,7 +47,7 @@
 {
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_63a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_63a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_63a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_63a.cpp	2025-05-05 11:26:03.625364220 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_63b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_63b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_63b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_63b.cpp	2025-05-05 11:26:03.638364504 +0800
@@ -28,7 +28,7 @@
 {
     wchar_t * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -40,7 +40,7 @@
 {
     wchar_t * data = *dataPtr;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_64a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_64a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_64a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_64a.cpp	2025-05-05 11:26:03.638364504 +0800
@@ -34,7 +34,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     badSink(&data);
 }
 
@@ -65,7 +65,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     goodB2GSink(&data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_64b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_64b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_64b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_64b.cpp	2025-05-05 11:26:03.635364438 +0800
@@ -31,7 +31,7 @@
     /* dereference dataPtr into data */
     wchar_t * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -46,7 +46,7 @@
     /* dereference dataPtr into data */
     wchar_t * data = (*dataPtr);
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_65a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_65a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_65a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_65a.cpp	2025-05-05 11:26:03.597363610 +0800
@@ -36,7 +36,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     /* use the function pointer */
     funcPtr(data);
 }
@@ -70,7 +70,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     funcPtr(data);
 }
 
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_65b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_65b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_65b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_65b.cpp	2025-05-05 11:26:03.600363675 +0800
@@ -27,7 +27,7 @@
 void badSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -38,7 +38,7 @@
 void goodG2BSink(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_66a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_66a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_66a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_66a.cpp	2025-05-05 11:26:03.608363850 +0800
@@ -35,7 +35,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     /* put data in array */
     dataArray[2] = data;
     badSink(dataArray);
@@ -71,7 +71,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     dataArray[2] = data;
     goodB2GSink(dataArray);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_66b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_66b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_66b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_66b.cpp	2025-05-05 11:26:03.627364264 +0800
@@ -29,7 +29,7 @@
     /* copy data out of dataArray */
     wchar_t * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -41,7 +41,7 @@
 {
     wchar_t * data = dataArray[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_67a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_67a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_67a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_67a.cpp	2025-05-05 11:26:03.620364111 +0800
@@ -40,7 +40,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     myStruct.structFirst = data;
     badSink(myStruct);
 }
@@ -75,7 +75,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     myStruct.structFirst = data;
     goodB2GSink(myStruct);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_67b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_67b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_67b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_67b.cpp	2025-05-05 11:26:03.626364242 +0800
@@ -33,7 +33,7 @@
 {
     wchar_t * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -45,7 +45,7 @@
 {
     wchar_t * data = myStruct.structFirst;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_68a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_68a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_68a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_68a.cpp	2025-05-05 11:26:03.617364046 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     badData = data;
     badSink();
 }
@@ -71,7 +71,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     goodB2GData = data;
     goodB2GSink();
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_68b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_68b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_68b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_68b.cpp	2025-05-05 11:26:03.587363392 +0800
@@ -32,7 +32,7 @@
 {
     wchar_t * data = badData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     wchar_t * data = goodG2BData;
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_72a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_72a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_72a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_72a.cpp	2025-05-05 11:26:03.585363348 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     /* Put data in a vector */
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
     dataVector.insert(dataVector.end(), 1, data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_72b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_72b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_72b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_72b.cpp	2025-05-05 11:26:03.629364308 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataVector */
     wchar_t * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     wchar_t * data = dataVector[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_73a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_73a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_73a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_73a.cpp	2025-05-05 11:26:03.601363697 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     /* Put data in a list */
     dataList.push_back(data);
     dataList.push_back(data);
@@ -79,7 +79,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     dataList.push_back(data);
     dataList.push_back(data);
     dataList.push_back(data);
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_73b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_73b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_73b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_73b.cpp	2025-05-05 11:26:03.634364417 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataList */
     wchar_t * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     wchar_t * data = dataList.back();
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_74a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_74a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_74a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_74a.cpp	2025-05-05 11:26:03.606363806 +0800
@@ -38,7 +38,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     /* Put data in a map */
     dataMap[0] = data;
     dataMap[1] = data;
@@ -79,7 +79,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     dataMap[0] = data;
     dataMap[1] = data;
     dataMap[2] = data;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_74b.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_74b.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_74b.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_74b.cpp	2025-05-05 11:26:03.591363479 +0800
@@ -32,7 +32,7 @@
     /* copy data out of dataMap */
     wchar_t * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 #endif /* OMITBAD */
@@ -44,7 +44,7 @@
 {
     wchar_t * data = dataMap[2];
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 /* goodB2G uses the BadSource with the GoodSink */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_81a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_81a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_81a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_81a.cpp	2025-05-05 11:26:03.621364133 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     const CWE415_Double_Free__new_delete_wchar_t_81_base& o = CWE415_Double_Free__new_delete_wchar_t_81_bad();
     o.action(data);
 }
@@ -59,7 +59,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     const CWE415_Double_Free__new_delete_wchar_t_81_base& baseObject = CWE415_Double_Free__new_delete_wchar_t_81_goodB2G();
     baseObject.action(data);
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_81_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_81_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_81_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_81_bad.cpp	2025-05-05 11:26:03.605363784 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_wchar_t_81_bad::action(wchar_t * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_81_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_81_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_81_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_81_goodG2B.cpp	2025-05-05 11:26:03.602363719 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_wchar_t_81_goodG2B::action(wchar_t * data) const
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_82a.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_82a.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_82a.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_82a.cpp	2025-05-05 11:26:03.602363719 +0800
@@ -30,7 +30,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     CWE415_Double_Free__new_delete_wchar_t_82_base* baseObject = new CWE415_Double_Free__new_delete_wchar_t_82_bad;
     baseObject->action(data);
     delete baseObject;
@@ -61,7 +61,7 @@
     data = NULL;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
     CWE415_Double_Free__new_delete_wchar_t_82_base* baseObject = new CWE415_Double_Free__new_delete_wchar_t_82_goodB2G;
     baseObject->action(data);
     delete baseObject;
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_82_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_82_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_82_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_82_bad.cpp	2025-05-05 11:26:03.585363348 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_wchar_t_82_bad::action(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_82_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_82_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_82_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_82_goodG2B.cpp	2025-05-05 11:26:03.590363457 +0800
@@ -25,7 +25,7 @@
 void CWE415_Double_Free__new_delete_wchar_t_82_goodG2B::action(wchar_t * data)
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 }
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_83_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_83_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_83_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_83_bad.cpp	2025-05-05 11:26:03.629364308 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 CWE415_Double_Free__new_delete_wchar_t_83_bad::~CWE415_Double_Free__new_delete_wchar_t_83_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_83_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_83_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_83_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_83_goodB2G.cpp	2025-05-05 11:26:03.580363239 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 CWE415_Double_Free__new_delete_wchar_t_83_goodB2G::~CWE415_Double_Free__new_delete_wchar_t_83_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_83_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_83_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_83_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_83_goodG2B.cpp	2025-05-05 11:26:03.608363850 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_wchar_t_83_goodG2B::~CWE415_Double_Free__new_delete_wchar_t_83_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 }
 #endif /* OMITGOOD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_84_bad.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_84_bad.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_84_bad.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_84_bad.cpp	2025-05-05 11:26:03.594363544 +0800
@@ -26,13 +26,13 @@
     data = dataCopy;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 CWE415_Double_Free__new_delete_wchar_t_84_bad::~CWE415_Double_Free__new_delete_wchar_t_84_bad()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 }
 #endif /* OMITBAD */
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_84_goodB2G.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_84_goodB2G.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_84_goodB2G.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_84_goodB2G.cpp	2025-05-05 11:26:03.631364351 +0800
@@ -26,7 +26,7 @@
     data = dataCopy;
     data = new wchar_t;
     /* POTENTIAL FLAW: delete data in the source - the bad sink deletes data as well */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 
 CWE415_Double_Free__new_delete_wchar_t_84_goodB2G::~CWE415_Double_Free__new_delete_wchar_t_84_goodB2G()
diff -ruw benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_84_goodG2B.cpp refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_84_goodG2B.cpp
--- benchmark/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_84_goodG2B.cpp	2017-06-13 04:15:07.000000000 +0800
+++ refined/CWE415_Double_Free/s02/CWE415_Double_Free__new_delete_wchar_t_84_goodG2B.cpp	2025-05-05 11:26:03.629364308 +0800
@@ -31,7 +31,7 @@
 CWE415_Double_Free__new_delete_wchar_t_84_goodG2B::~CWE415_Double_Free__new_delete_wchar_t_84_goodG2B()
 {
     /* POTENTIAL FLAW: Possibly deleting memory twice */
-    delete data;
+    callback_new_wchar(data, has_free_new_wchar);
 }
 }
 #endif /* OMITGOOD */
